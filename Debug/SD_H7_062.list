
SD_H7_062.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f0c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08007328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000014  0800733c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000074  0800739c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f3c  200000d4  080073fc  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001010  080073fc  00021010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030366  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e28  00000000  00000000  00050468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000117f5  00000000  00000000  00055290  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001280  00000000  00000000  00066a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a70  00000000  00000000  00067d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b86f  00000000  00000000  00069778  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000082fb  00000000  00000000  00074fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0007d2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  0007d360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000d4 	.word	0x200000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800718c 	.word	0x0800718c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000d8 	.word	0x200000d8
 80002d4:	0800718c 	.word	0x0800718c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b97a 	b.w	80005f4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	468c      	mov	ip, r1
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	9e08      	ldr	r6, [sp, #32]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d151      	bne.n	80003cc <__udivmoddi4+0xb4>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d96d      	bls.n	800040a <__udivmoddi4+0xf2>
 800032e:	fab2 fe82 	clz	lr, r2
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d00b      	beq.n	8000350 <__udivmoddi4+0x38>
 8000338:	f1ce 0c20 	rsb	ip, lr, #32
 800033c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000340:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000344:	fa02 f70e 	lsl.w	r7, r2, lr
 8000348:	ea4c 0c05 	orr.w	ip, ip, r5
 800034c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000350:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000354:	0c25      	lsrs	r5, r4, #16
 8000356:	fbbc f8fa 	udiv	r8, ip, sl
 800035a:	fa1f f987 	uxth.w	r9, r7
 800035e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000362:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000366:	fb08 f309 	mul.w	r3, r8, r9
 800036a:	42ab      	cmp	r3, r5
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x6c>
 800036e:	19ed      	adds	r5, r5, r7
 8000370:	f108 32ff 	add.w	r2, r8, #4294967295
 8000374:	f080 8123 	bcs.w	80005be <__udivmoddi4+0x2a6>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f240 8120 	bls.w	80005be <__udivmoddi4+0x2a6>
 800037e:	f1a8 0802 	sub.w	r8, r8, #2
 8000382:	443d      	add	r5, r7
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb5 f0fa 	udiv	r0, r5, sl
 800038c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb00 f909 	mul.w	r9, r0, r9
 8000398:	45a1      	cmp	r9, r4
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x98>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	f080 810a 	bcs.w	80005ba <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8107 	bls.w	80005ba <__udivmoddi4+0x2a2>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 0409 	sub.w	r4, r4, r9
 80003b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b8:	2100      	movs	r1, #0
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d061      	beq.n	8000482 <__udivmoddi4+0x16a>
 80003be:	fa24 f40e 	lsr.w	r4, r4, lr
 80003c2:	2300      	movs	r3, #0
 80003c4:	6034      	str	r4, [r6, #0]
 80003c6:	6073      	str	r3, [r6, #4]
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0xc8>
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d054      	beq.n	800047e <__udivmoddi4+0x166>
 80003d4:	2100      	movs	r1, #0
 80003d6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003da:	4608      	mov	r0, r1
 80003dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e0:	fab3 f183 	clz	r1, r3
 80003e4:	2900      	cmp	r1, #0
 80003e6:	f040 808e 	bne.w	8000506 <__udivmoddi4+0x1ee>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xdc>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80fa 	bhi.w	80005e8 <__udivmoddi4+0x2d0>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb65 0503 	sbc.w	r5, r5, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	46ac      	mov	ip, r5
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d03f      	beq.n	8000482 <__udivmoddi4+0x16a>
 8000402:	e886 1010 	stmia.w	r6, {r4, ip}
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	b912      	cbnz	r2, 8000412 <__udivmoddi4+0xfa>
 800040c:	2701      	movs	r7, #1
 800040e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000412:	fab7 fe87 	clz	lr, r7
 8000416:	f1be 0f00 	cmp.w	lr, #0
 800041a:	d134      	bne.n	8000486 <__udivmoddi4+0x16e>
 800041c:	1beb      	subs	r3, r5, r7
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	2101      	movs	r1, #1
 8000426:	fbb3 f8f2 	udiv	r8, r3, r2
 800042a:	0c25      	lsrs	r5, r4, #16
 800042c:	fb02 3318 	mls	r3, r2, r8, r3
 8000430:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000434:	fb0c f308 	mul.w	r3, ip, r8
 8000438:	42ab      	cmp	r3, r5
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x134>
 800043c:	19ed      	adds	r5, r5, r7
 800043e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x132>
 8000444:	42ab      	cmp	r3, r5
 8000446:	f200 80d1 	bhi.w	80005ec <__udivmoddi4+0x2d4>
 800044a:	4680      	mov	r8, r0
 800044c:	1aed      	subs	r5, r5, r3
 800044e:	b2a3      	uxth	r3, r4
 8000450:	fbb5 f0f2 	udiv	r0, r5, r2
 8000454:	fb02 5510 	mls	r5, r2, r0, r5
 8000458:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800045c:	fb0c fc00 	mul.w	ip, ip, r0
 8000460:	45a4      	cmp	ip, r4
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x15c>
 8000464:	19e4      	adds	r4, r4, r7
 8000466:	f100 33ff 	add.w	r3, r0, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x15a>
 800046c:	45a4      	cmp	ip, r4
 800046e:	f200 80b8 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 8000472:	4618      	mov	r0, r3
 8000474:	eba4 040c 	sub.w	r4, r4, ip
 8000478:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047c:	e79d      	b.n	80003ba <__udivmoddi4+0xa2>
 800047e:	4631      	mov	r1, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	f1ce 0420 	rsb	r4, lr, #32
 800048a:	fa05 f30e 	lsl.w	r3, r5, lr
 800048e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000492:	fa20 f804 	lsr.w	r8, r0, r4
 8000496:	0c3a      	lsrs	r2, r7, #16
 8000498:	fa25 f404 	lsr.w	r4, r5, r4
 800049c:	ea48 0803 	orr.w	r8, r8, r3
 80004a0:	fbb4 f1f2 	udiv	r1, r4, r2
 80004a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a8:	fb02 4411 	mls	r4, r2, r1, r4
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004b4:	fb01 f30c 	mul.w	r3, r1, ip
 80004b8:	42ab      	cmp	r3, r5
 80004ba:	fa00 f40e 	lsl.w	r4, r0, lr
 80004be:	d909      	bls.n	80004d4 <__udivmoddi4+0x1bc>
 80004c0:	19ed      	adds	r5, r5, r7
 80004c2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004c6:	f080 808a 	bcs.w	80005de <__udivmoddi4+0x2c6>
 80004ca:	42ab      	cmp	r3, r5
 80004cc:	f240 8087 	bls.w	80005de <__udivmoddi4+0x2c6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	443d      	add	r5, r7
 80004d4:	1aeb      	subs	r3, r5, r3
 80004d6:	fa1f f588 	uxth.w	r5, r8
 80004da:	fbb3 f0f2 	udiv	r0, r3, r2
 80004de:	fb02 3310 	mls	r3, r2, r0, r3
 80004e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004e6:	fb00 f30c 	mul.w	r3, r0, ip
 80004ea:	42ab      	cmp	r3, r5
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x1e6>
 80004ee:	19ed      	adds	r5, r5, r7
 80004f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f4:	d26f      	bcs.n	80005d6 <__udivmoddi4+0x2be>
 80004f6:	42ab      	cmp	r3, r5
 80004f8:	d96d      	bls.n	80005d6 <__udivmoddi4+0x2be>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	1aeb      	subs	r3, r5, r3
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	e78f      	b.n	8000426 <__udivmoddi4+0x10e>
 8000506:	f1c1 0720 	rsb	r7, r1, #32
 800050a:	fa22 f807 	lsr.w	r8, r2, r7
 800050e:	408b      	lsls	r3, r1
 8000510:	fa05 f401 	lsl.w	r4, r5, r1
 8000514:	ea48 0303 	orr.w	r3, r8, r3
 8000518:	fa20 fe07 	lsr.w	lr, r0, r7
 800051c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000520:	40fd      	lsrs	r5, r7
 8000522:	ea4e 0e04 	orr.w	lr, lr, r4
 8000526:	fbb5 f9fc 	udiv	r9, r5, ip
 800052a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800052e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000532:	fa1f f883 	uxth.w	r8, r3
 8000536:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800053a:	fb09 f408 	mul.w	r4, r9, r8
 800053e:	42ac      	cmp	r4, r5
 8000540:	fa02 f201 	lsl.w	r2, r2, r1
 8000544:	fa00 fa01 	lsl.w	sl, r0, r1
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x244>
 800054a:	18ed      	adds	r5, r5, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d243      	bcs.n	80005da <__udivmoddi4+0x2c2>
 8000552:	42ac      	cmp	r4, r5
 8000554:	d941      	bls.n	80005da <__udivmoddi4+0x2c2>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	441d      	add	r5, r3
 800055c:	1b2d      	subs	r5, r5, r4
 800055e:	fa1f fe8e 	uxth.w	lr, lr
 8000562:	fbb5 f0fc 	udiv	r0, r5, ip
 8000566:	fb0c 5510 	mls	r5, ip, r0, r5
 800056a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45a0      	cmp	r8, r4
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x26e>
 8000576:	18e4      	adds	r4, r4, r3
 8000578:	f100 35ff 	add.w	r5, r0, #4294967295
 800057c:	d229      	bcs.n	80005d2 <__udivmoddi4+0x2ba>
 800057e:	45a0      	cmp	r8, r4
 8000580:	d927      	bls.n	80005d2 <__udivmoddi4+0x2ba>
 8000582:	3802      	subs	r0, #2
 8000584:	441c      	add	r4, r3
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba4 0408 	sub.w	r4, r4, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454c      	cmp	r4, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	464d      	mov	r5, r9
 8000598:	d315      	bcc.n	80005c6 <__udivmoddi4+0x2ae>
 800059a:	d012      	beq.n	80005c2 <__udivmoddi4+0x2aa>
 800059c:	b156      	cbz	r6, 80005b4 <__udivmoddi4+0x29c>
 800059e:	ebba 030e 	subs.w	r3, sl, lr
 80005a2:	eb64 0405 	sbc.w	r4, r4, r5
 80005a6:	fa04 f707 	lsl.w	r7, r4, r7
 80005aa:	40cb      	lsrs	r3, r1
 80005ac:	431f      	orrs	r7, r3
 80005ae:	40cc      	lsrs	r4, r1
 80005b0:	6037      	str	r7, [r6, #0]
 80005b2:	6074      	str	r4, [r6, #4]
 80005b4:	2100      	movs	r1, #0
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	4618      	mov	r0, r3
 80005bc:	e6f8      	b.n	80003b0 <__udivmoddi4+0x98>
 80005be:	4690      	mov	r8, r2
 80005c0:	e6e0      	b.n	8000384 <__udivmoddi4+0x6c>
 80005c2:	45c2      	cmp	sl, r8
 80005c4:	d2ea      	bcs.n	800059c <__udivmoddi4+0x284>
 80005c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ca:	eb69 0503 	sbc.w	r5, r9, r3
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7e4      	b.n	800059c <__udivmoddi4+0x284>
 80005d2:	4628      	mov	r0, r5
 80005d4:	e7d7      	b.n	8000586 <__udivmoddi4+0x26e>
 80005d6:	4640      	mov	r0, r8
 80005d8:	e791      	b.n	80004fe <__udivmoddi4+0x1e6>
 80005da:	4681      	mov	r9, r0
 80005dc:	e7be      	b.n	800055c <__udivmoddi4+0x244>
 80005de:	4601      	mov	r1, r0
 80005e0:	e778      	b.n	80004d4 <__udivmoddi4+0x1bc>
 80005e2:	3802      	subs	r0, #2
 80005e4:	443c      	add	r4, r7
 80005e6:	e745      	b.n	8000474 <__udivmoddi4+0x15c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e708      	b.n	80003fe <__udivmoddi4+0xe6>
 80005ec:	f1a8 0802 	sub.w	r8, r8, #2
 80005f0:	443d      	add	r5, r7
 80005f2:	e72b      	b.n	800044c <__udivmoddi4+0x134>

080005f4 <__aeabi_idiv0>:
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_InitTick+0x40>)
{
 80005fc:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80005fe:	7818      	ldrb	r0, [r3, #0]
 8000600:	b908      	cbnz	r0, 8000606 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000602:	2001      	movs	r0, #1
 8000604:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_InitTick+0x44>)
 800060c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000610:	6810      	ldr	r0, [r2, #0]
 8000612:	fbb0 f0f3 	udiv	r0, r0, r3
 8000616:	f000 f8cf 	bl	80007b8 <HAL_SYSTICK_Config>
 800061a:	4604      	mov	r4, r0
 800061c:	2800      	cmp	r0, #0
 800061e:	d1f0      	bne.n	8000602 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d8ee      	bhi.n	8000602 <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f87e 	bl	800072c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_InitTick+0x48>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000636:	bd38      	pop	{r3, r4, r5, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_Init>:
{
 8000644:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f85e 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800064c:	f000 ff96 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8000650:	490f      	ldr	r1, [pc, #60]	; (8000690 <HAL_Init+0x4c>)
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_Init+0x50>)
 8000654:	698b      	ldr	r3, [r1, #24]
 8000656:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	f003 031f 	and.w	r3, r3, #31
 8000660:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000662:	698b      	ldr	r3, [r1, #24]
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	5cd3      	ldrb	r3, [r2, r3]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <HAL_Init+0x54>)
 800066c:	f003 031f 	and.w	r3, r3, #31
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_Init+0x58>)
 8000678:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ffbc 	bl	80005f8 <HAL_InitTick>
 8000680:	4604      	mov	r4, r0
 8000682:	b918      	cbnz	r0, 800068c <HAL_Init+0x48>
  HAL_MspInit();
 8000684:	f006 fb5c 	bl	8006d40 <HAL_MspInit>
}
 8000688:	4620      	mov	r0, r4
 800068a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800068c:	2401      	movs	r4, #1
 800068e:	e7fb      	b.n	8000688 <HAL_Init+0x44>
 8000690:	58024400 	.word	0x58024400
 8000694:	08007308 	.word	0x08007308
 8000698:	20000010 	.word	0x20000010
 800069c:	2000000c 	.word	0x2000000c

080006a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x10>)
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_IncTick+0x14>)
 80006a4:	6811      	ldr	r1, [r2, #0]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	440b      	add	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000124 	.word	0x20000124
 80006b4:	20000000 	.word	0x20000000

080006b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <HAL_GetTick+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000124 	.word	0x20000124

080006c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c4:	b538      	push	{r3, r4, r5, lr}
 80006c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f7ff fff6 	bl	80006b8 <HAL_GetTick>
 80006cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006d0:	bf1e      	ittt	ne
 80006d2:	4b04      	ldrne	r3, [pc, #16]	; (80006e4 <HAL_Delay+0x20>)
 80006d4:	781b      	ldrbne	r3, [r3, #0]
 80006d6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d8:	f7ff ffee 	bl	80006b8 <HAL_GetTick>
 80006dc:	1b40      	subs	r0, r0, r5
 80006de:	4284      	cmp	r4, r0
 80006e0:	d8fa      	bhi.n	80006d8 <HAL_Delay+0x14>
  {
  }
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <HAL_GetREVID+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	0c00      	lsrs	r0, r0, #16
 80006ee:	4770      	bx	lr
 80006f0:	5c001000 	.word	0x5c001000

080006f4 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80006f6:	6853      	ldr	r3, [r2, #4]
 80006f8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80006fc:	4318      	orrs	r0, r3
 80006fe:	6050      	str	r0, [r2, #4]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	58000400 	.word	0x58000400

08000708 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000716:	041b      	lsls	r3, r3, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000722:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000724:	60d3      	str	r3, [r2, #12]
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	68dc      	ldr	r4, [r3, #12]
 8000732:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000736:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	2b04      	cmp	r3, #4
 800073e:	bf28      	it	cs
 8000740:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000748:	bf8c      	ite	hi
 800074a:	3c03      	subhi	r4, #3
 800074c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000752:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f103 33ff 	add.w	r3, r3, #4294967295
 8000758:	ea01 0103 	and.w	r1, r1, r3
 800075c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	fa05 f404 	lsl.w	r4, r5, r4
 8000764:	f104 34ff 	add.w	r4, r4, #4294967295
 8000768:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	ea42 0201 	orr.w	r2, r2, r1
 8000770:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000774:	db07      	blt.n	8000786 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000780:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000784:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	f000 000f 	and.w	r0, r0, #15
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <HAL_NVIC_SetPriority+0x6c>)
 800078e:	541a      	strb	r2, [r3, r0]
 8000790:	bd30      	pop	{r4, r5, pc}
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	e000ed14 	.word	0xe000ed14

0800079c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800079c:	2800      	cmp	r0, #0
 800079e:	db08      	blt.n	80007b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a0:	0942      	lsrs	r2, r0, #5
 80007a2:	2301      	movs	r3, #1
 80007a4:	f000 001f 	and.w	r0, r0, #31
 80007a8:	fa03 f000 	lsl.w	r0, r3, r0
 80007ac:	4b01      	ldr	r3, [pc, #4]	; (80007b4 <HAL_NVIC_EnableIRQ+0x18>)
 80007ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	3801      	subs	r0, #1
 80007ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007be:	d20a      	bcs.n	80007d6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	21f0      	movs	r1, #240	; 0xf0
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80007e4:	688b      	ldr	r3, [r1, #8]
 80007e6:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80007e8:	f891 c004 	ldrb.w	ip, [r1, #4]
 80007ec:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80007ee:	7c0b      	ldrb	r3, [r1, #16]
 80007f0:	2b00      	cmp	r3, #0
{
 80007f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80007f6:	bf08      	it	eq
 80007f8:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 80007fc:	b085      	sub	sp, #20
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80007fe:	bf18      	it	ne
 8000800:	2300      	movne	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000802:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000806:	7b4f      	ldrb	r7, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000808:	9300      	str	r3, [sp, #0]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800080a:	7c4b      	ldrb	r3, [r1, #17]
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800080c:	7b8e      	ldrb	r6, [r1, #14]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800080e:	2b00      	cmp	r3, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000810:	7bcd      	ldrb	r5, [r1, #15]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000812:	7c8c      	ldrb	r4, [r1, #18]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000814:	bf0c      	ite	eq
 8000816:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800081a:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800081c:	f891 901c 	ldrb.w	r9, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	694b      	ldr	r3, [r1, #20]
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000824:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8000828:	431a      	orrs	r2, r3
 800082a:	698b      	ldr	r3, [r1, #24]
 800082c:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800082e:	7f8a      	ldrb	r2, [r1, #30]
 8000830:	2a00      	cmp	r2, #0
 8000832:	bf0c      	ite	eq
 8000834:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8000838:	2200      	movne	r2, #0
 800083a:	9202      	str	r2, [sp, #8]
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800083c:	7fca      	ldrb	r2, [r1, #31]
 800083e:	9203      	str	r2, [sp, #12]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000840:	f891 2020 	ldrb.w	r2, [r1, #32]
 8000844:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000846:	6802      	ldr	r2, [r0, #0]
 8000848:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800084a:	f8d2 a000 	ldr.w	sl, [r2]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800084e:	bf08      	it	eq
 8000850:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000854:	ea43 0300 	orr.w	r3, r3, r0
 8000858:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800085a:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800085e:	bf18      	it	ne
 8000860:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000864:	4303      	orrs	r3, r0
 8000866:	9803      	ldr	r0, [sp, #12]
 8000868:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 800086c:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 8000870:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8000874:	ea43 030a 	orr.w	r3, r3, sl
 8000878:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 800087c:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 8000880:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8000884:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000888:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800088c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000890:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8000894:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000898:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800089c:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80008a0:	9800      	ldr	r0, [sp, #0]
 80008a2:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 80008a6:	4303      	orrs	r3, r0
 80008a8:	9801      	ldr	r0, [sp, #4]
 80008aa:	4303      	orrs	r3, r0
 80008ac:	9802      	ldr	r0, [sp, #8]
 80008ae:	4303      	orrs	r3, r0
 80008b0:	ea43 0308 	orr.w	r3, r3, r8
 80008b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80008b6:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80008b8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80008bc:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80008c0:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008c2:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80008c4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008c8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80008cc:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80008d0:	bf0c      	ite	eq
 80008d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80008d6:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008d8:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 80008dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008e0:	f023 0307 	bic.w	r3, r3, #7
 80008e4:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 80008e8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80008ea:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 80008ec:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008ee:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80008f2:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 80008f6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008f8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80008fc:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000900:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000902:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000904:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000906:	68d3      	ldr	r3, [r2, #12]
 8000908:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000912:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000916:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800091a:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800091c:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8000920:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000922:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000924:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000928:	bf0c      	ite	eq
 800092a:	2080      	moveq	r0, #128	; 0x80
 800092c:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800092e:	041b      	lsls	r3, r3, #16
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000936:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000938:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800093a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800093e:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000942:	4303      	orrs	r3, r0
 8000944:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000946:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800094a:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800094e:	f020 0003 	bic.w	r0, r0, #3
 8000952:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000954:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000958:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800095c:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800095e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000962:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8000966:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 800096a:	4303      	orrs	r3, r0
 800096c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000970:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000974:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000978:	2b00      	cmp	r3, #0

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800097a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 800097e:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000982:	bf0c      	ite	eq
 8000984:	2040      	moveq	r0, #64	; 0x40
 8000986:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000988:	432b      	orrs	r3, r5
 800098a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800098e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000992:	4303      	orrs	r3, r0
 8000994:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8000998:	b005      	add	sp, #20
 800099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009a0 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80009a0:	6802      	ldr	r2, [r0, #0]
 80009a2:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 80009ac:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	680c      	ldr	r4, [r1, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80009b4:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80009b6:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009b8:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80009bc:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80009be:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009c0:	5910      	ldr	r0, [r2, r4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80009c2:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009c4:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80009c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 80009cc:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009ce:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80009d2:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009d4:	4303      	orrs	r3, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80009d6:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80009d8:	5113      	str	r3, [r2, r4]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80009da:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80009de:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80009e0:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80009e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <ETH_SetDMAConfig+0x88>)
 80009e8:	4028      	ands	r0, r5
 80009ea:	4303      	orrs	r3, r0

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80009ec:	7d08      	ldrb	r0, [r1, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80009ee:	6023      	str	r3, [r4, #0]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80009f0:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80009f4:	7f4b      	ldrb	r3, [r1, #29]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80009f6:	5915      	ldr	r5, [r2, r4]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80009f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80009fa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80009fe:	6908      	ldr	r0, [r1, #16]
 8000a00:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <ETH_SetDMAConfig+0x8c>)
 8000a04:	4028      	ands	r0, r5

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000a06:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	5113      	str	r3, [r2, r4]
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000a0c:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000a10:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000a12:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000a14:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000a18:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8000a1c:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000a20:	430b      	orrs	r3, r1
 8000a22:	5113      	str	r3, [r2, r4]
 8000a24:	bd30      	pop	{r4, r5, pc}
 8000a26:	bf00      	nop
 8000a28:	fffec000 	.word	0xfffec000
 8000a2c:	ffc0efef 	.word	0xffc0efef

08000a30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8000a30:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000a32:	6803      	ldr	r3, [r0, #0]
{
 8000a34:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000a36:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000a3a:	f000 ff69 	bl	8001910 <HAL_RCC_GetHCLKFreq>

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_ETH_SetMDIOClockRange+0x58>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8000a42:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000a46:	4403      	add	r3, r0
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d805      	bhi.n	8000a58 <HAL_ETH_SetMDIOClockRange+0x28>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8000a4c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_ETH_SetMDIOClockRange+0x60>)
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_ETH_SetMDIOClockRange+0x64>)
 8000a5c:	4403      	add	r3, r0
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d802      	bhi.n	8000a68 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8000a62:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000a66:	e7f3      	b.n	8000a50 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_ETH_SetMDIOClockRange+0x68>)
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8000a6c:	4403      	add	r3, r0
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d9ee      	bls.n	8000a50 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_ETH_SetMDIOClockRange+0x70>)
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8000a76:	4403      	add	r3, r0
 8000a78:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8000a7a:	bf94      	ite	ls
 8000a7c:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8000a80:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8000a84:	e7e4      	b.n	8000a50 <HAL_ETH_SetMDIOClockRange+0x20>
 8000a86:	bf00      	nop
 8000a88:	feced300 	.word	0xfeced300
 8000a8c:	00e4e1bf 	.word	0x00e4e1bf
 8000a90:	fde9f140 	.word	0xfde9f140
 8000a94:	017d783f 	.word	0x017d783f
 8000a98:	fc6c7900 	.word	0xfc6c7900
 8000a9c:	026259ff 	.word	0x026259ff
 8000aa0:	fa0a1f00 	.word	0xfa0a1f00
 8000aa4:	02faf07f 	.word	0x02faf07f

08000aa8 <HAL_ETH_Init>:
{
 8000aa8:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 8000aaa:	4605      	mov	r5, r0
{
 8000aac:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	f000 80bd 	beq.w	8000c2e <HAL_ETH_Init+0x186>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000ab4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000ab6:	b90b      	cbnz	r3, 8000abc <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 8000ab8:	f006 f954 	bl	8006d64 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 8000abc:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000abe:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 8000ac0:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b86      	ldr	r3, [pc, #536]	; (8000cdc <HAL_ETH_Init+0x234>)
 8000ac4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ac8:	f042 0202 	orr.w	r2, r2, #2
 8000acc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000adc:	2800      	cmp	r0, #0
 8000ade:	f040 8098 	bne.w	8000c12 <HAL_ETH_Init+0x16a>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000ae2:	f7ff fe07 	bl	80006f4 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f042 0201 	orr.w	r2, r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000af4:	f7ff fde0 	bl	80006b8 <HAL_GetTick>
 8000af8:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b00:	681c      	ldr	r4, [r3, #0]
 8000b02:	f014 0401 	ands.w	r4, r4, #1
 8000b06:	f040 8087 	bne.w	8000c18 <HAL_ETH_Init+0x170>
  ETH_MAC_MDIO_ClkConfig(heth);
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f7ff ff90 	bl	8000a30 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000b10:	682e      	ldr	r6, [r5, #0]
 8000b12:	f000 fefd 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8000b16:	4b72      	ldr	r3, [pc, #456]	; (8000ce0 <HAL_ETH_Init+0x238>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000b18:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000b1a:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8000b1c:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000b20:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 8000b24:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000b28:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000b2c:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000b2e:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000b32:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000b36:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000b3a:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8000b3c:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000b40:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000b44:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000b46:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000b48:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000b4a:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000b4e:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000b52:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000b56:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000b5e:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000b60:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000b62:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000b66:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000b6a:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000b6c:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000b6e:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000b70:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000b72:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000b76:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000b78:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8000b7c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000b80:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000b86:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000b8a:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000b8c:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000b8e:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000b92:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 8000b96:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 8000b9a:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 8000b9e:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 8000ba2:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000ba6:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000ba8:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000bac:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000bb0:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000bb4:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000bb8:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000bba:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000bbe:	f7ff fe11 	bl	80007e4 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000bc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000bc6:	a902      	add	r1, sp, #8
 8000bc8:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000bca:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000bce:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000bd0:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000bd2:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000bd6:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000bd8:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000bda:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000bdc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000be0:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000be4:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000be8:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000bec:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000bf0:	f7ff fed6 	bl	80009a0 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000bf4:	682b      	ldr	r3, [r5, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000bf6:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000bf8:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 8000bfc:	680a      	ldr	r2, [r1, #0]
 8000bfe:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8000c02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000c06:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000c08:	f010 0103 	ands.w	r1, r0, #3
 8000c0c:	d011      	beq.n	8000c32 <HAL_ETH_Init+0x18a>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000c0e:	65ee      	str	r6, [r5, #92]	; 0x5c
 8000c10:	e00b      	b.n	8000c2a <HAL_ETH_Init+0x182>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000c12:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c16:	e764      	b.n	8000ae2 <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000c18:	f7ff fd4e 	bl	80006b8 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c22:	f67f af6a 	bls.w	8000afa <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000c26:	2304      	movs	r3, #4
 8000c28:	65eb      	str	r3, [r5, #92]	; 0x5c
    heth->gState = HAL_ETH_STATE_ERROR;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	656b      	str	r3, [r5, #84]	; 0x54
    return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e052      	b.n	8000cd8 <HAL_ETH_Init+0x230>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000c32:	f241 1408 	movw	r4, #4360	; 0x1108
 8000c36:	591a      	ldr	r2, [r3, r4]
 8000c38:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000c3c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8000c40:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000c44:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000c46:	511a      	str	r2, [r3, r4]
 8000c48:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8000c4c:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 8000c50:	4602      	mov	r2, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8000c52:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000c54:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8000c56:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8000c58:	60d1      	str	r1, [r2, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000c5a:	f844 2b04 	str.w	r2, [r4], #4
 8000c5e:	3218      	adds	r2, #24
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000c60:	42b2      	cmp	r2, r6
 8000c62:	d1f6      	bne.n	8000c52 <HAL_ETH_Init+0x1aa>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000c64:	62a9      	str	r1, [r5, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000c66:	f241 122c 	movw	r2, #4396	; 0x112c
 8000c6a:	2103      	movs	r1, #3

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000c6c:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000c6e:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000c70:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8000c74:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000c76:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8000c78:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 8000c7c:	f101 0660 	add.w	r6, r1, #96	; 0x60
 8000c80:	6010      	str	r0, [r2, #0]
 8000c82:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 8000c86:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000c88:	6014      	str	r4, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8000c8a:	6054      	str	r4, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8000c8c:	6094      	str	r4, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8000c8e:	60d4      	str	r4, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8000c90:	6114      	str	r4, [r2, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8000c92:	6154      	str	r4, [r2, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000c94:	f840 2b04 	str.w	r2, [r0], #4
 8000c98:	3218      	adds	r2, #24
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000c9a:	42b2      	cmp	r2, r6
 8000c9c:	d1f4      	bne.n	8000c88 <HAL_ETH_Init+0x1e0>
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f241 1230 	movw	r2, #4400	; 0x1130
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8000ca4:	63ec      	str	r4, [r5, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8000ca6:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8000ca8:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8000caa:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8000cac:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8000cae:	5098      	str	r0, [r3, r2]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000cb0:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000cb6:	5099      	str	r1, [r3, r2]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8000cb8:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8000cbc:	f241 1228 	movw	r2, #4392	; 0x1128
 8000cc0:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000cc2:	686a      	ldr	r2, [r5, #4]
 8000cc4:	8891      	ldrh	r1, [r2, #4]
 8000cc6:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000cca:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ccc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8000cd0:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000cd2:	65ec      	str	r4, [r5, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000cd4:	656b      	str	r3, [r5, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000cd6:	65ab      	str	r3, [r5, #88]	; 0x58
}
 8000cd8:	b024      	add	sp, #144	; 0x90
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	000f4240 	.word	0x000f4240

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ce8:	680b      	ldr	r3, [r1, #0]
{
 8000cea:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000eb8 <HAL_GPIO_Init+0x1d4>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf0:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf4:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000cf6:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8000cf8:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000ebc <HAL_GPIO_Init+0x1d8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cfc:	9a01      	ldr	r2, [sp, #4]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000d02:	b005      	add	sp, #20
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d08:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8000d0a:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d0c:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000d0e:	ea12 0507 	ands.w	r5, r2, r7
 8000d12:	f000 80bb 	beq.w	8000e8c <HAL_GPIO_Init+0x1a8>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d16:	684a      	ldr	r2, [r1, #4]
 8000d18:	005e      	lsls	r6, r3, #1
 8000d1a:	f022 0e10 	bic.w	lr, r2, #16
 8000d1e:	f10e 34ff 	add.w	r4, lr, #4294967295
 8000d22:	2c01      	cmp	r4, #1
 8000d24:	d814      	bhi.n	8000d50 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d26:	f04f 0a03 	mov.w	sl, #3
        temp = GPIOx->OSPEEDR;
 8000d2a:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2e:	fa0a f406 	lsl.w	r4, sl, r6
 8000d32:	ea2b 0a04 	bic.w	sl, fp, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d36:	68cc      	ldr	r4, [r1, #12]
 8000d38:	40b4      	lsls	r4, r6
 8000d3a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 8000d3e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d40:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d42:	ea24 0707 	bic.w	r7, r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d46:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8000d4a:	409c      	lsls	r4, r3
 8000d4c:	4327      	orrs	r7, r4
        GPIOx->OTYPER = temp;
 8000d4e:	6047      	str	r7, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d50:	2403      	movs	r4, #3
      temp = GPIOx->PUPDR;
 8000d52:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d54:	f1be 0f02 	cmp.w	lr, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d58:	fa04 f406 	lsl.w	r4, r4, r6
 8000d5c:	ea6f 0404 	mvn.w	r4, r4
 8000d60:	ea07 0a04 	and.w	sl, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d64:	688f      	ldr	r7, [r1, #8]
 8000d66:	fa07 f706 	lsl.w	r7, r7, r6
 8000d6a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000d6e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	d116      	bne.n	8000da0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000d72:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d76:	f003 0b07 	and.w	fp, r3, #7
 8000d7a:	f04f 0e0f 	mov.w	lr, #15
 8000d7e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d82:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d8a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d8e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d92:	690f      	ldr	r7, [r1, #16]
 8000d94:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d98:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d9c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000da0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000da2:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	f002 0703 	and.w	r7, r2, #3
 8000da8:	fa07 f606 	lsl.w	r6, r7, r6
 8000dac:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000dae:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db0:	00d4      	lsls	r4, r2, #3
 8000db2:	d56b      	bpl.n	8000e8c <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000db8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dbc:	f003 0703 	and.w	r7, r3, #3
 8000dc0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	f044 0402 	orr.w	r4, r4, #2
 8000dc8:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dcc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000dd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dd6:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000dda:	f004 0402 	and.w	r4, r4, #2
 8000dde:	9403      	str	r4, [sp, #12]
 8000de0:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000de2:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000de6:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dea:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dee:	4c31      	ldr	r4, [pc, #196]	; (8000eb4 <HAL_GPIO_Init+0x1d0>)
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d04d      	beq.n	8000e90 <HAL_GPIO_Init+0x1ac>
 8000df4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000df8:	42a0      	cmp	r0, r4
 8000dfa:	d04b      	beq.n	8000e94 <HAL_GPIO_Init+0x1b0>
 8000dfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e00:	42a0      	cmp	r0, r4
 8000e02:	d049      	beq.n	8000e98 <HAL_GPIO_Init+0x1b4>
 8000e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d047      	beq.n	8000e9c <HAL_GPIO_Init+0x1b8>
 8000e0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e10:	42a0      	cmp	r0, r4
 8000e12:	d045      	beq.n	8000ea0 <HAL_GPIO_Init+0x1bc>
 8000e14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e18:	42a0      	cmp	r0, r4
 8000e1a:	d043      	beq.n	8000ea4 <HAL_GPIO_Init+0x1c0>
 8000e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e20:	42a0      	cmp	r0, r4
 8000e22:	d041      	beq.n	8000ea8 <HAL_GPIO_Init+0x1c4>
 8000e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e28:	42a0      	cmp	r0, r4
 8000e2a:	d03f      	beq.n	8000eac <HAL_GPIO_Init+0x1c8>
 8000e2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	d03d      	beq.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000e34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e38:	42a0      	cmp	r0, r4
 8000e3a:	bf14      	ite	ne
 8000e3c:	240a      	movne	r4, #10
 8000e3e:	2409      	moveq	r4, #9
 8000e40:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e42:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e44:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000e4a:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000e4e:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000e52:	bf54      	ite	pl
 8000e54:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e56:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e58:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000e5a:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000e5e:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000e62:	bf54      	ite	pl
 8000e64:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e66:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e68:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000e6a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000e6e:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000e72:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000e76:	bf54      	ite	pl
 8000e78:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e7a:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000e7e:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000e80:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000e82:	bf54      	ite	pl
 8000e84:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e86:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000e88:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	e735      	b.n	8000cfc <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e90:	2400      	movs	r4, #0
 8000e92:	e7d5      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000e94:	2401      	movs	r4, #1
 8000e96:	e7d3      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000e98:	2402      	movs	r4, #2
 8000e9a:	e7d1      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000e9c:	2403      	movs	r4, #3
 8000e9e:	e7cf      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000ea0:	2404      	movs	r4, #4
 8000ea2:	e7cd      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000ea4:	2405      	movs	r4, #5
 8000ea6:	e7cb      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000ea8:	2406      	movs	r4, #6
 8000eaa:	e7c9      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000eac:	2407      	movs	r4, #7
 8000eae:	e7c7      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000eb0:	2408      	movs	r4, #8
 8000eb2:	e7c5      	b.n	8000e40 <HAL_GPIO_Init+0x15c>
 8000eb4:	58020000 	.word	0x58020000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58000080 	.word	0x58000080

08000ec0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000ec0:	6903      	ldr	r3, [r0, #16]
 8000ec2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000ec4:	bf14      	ite	ne
 8000ec6:	2001      	movne	r0, #1
 8000ec8:	2000      	moveq	r0, #0
 8000eca:	4770      	bx	lr

08000ecc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ecc:	b10a      	cbz	r2, 8000ed2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ece:	6181      	str	r1, [r0, #24]
 8000ed0:	4770      	bx	lr
 8000ed2:	0409      	lsls	r1, r1, #16
 8000ed4:	e7fb      	b.n	8000ece <HAL_GPIO_WritePin+0x2>

08000ed6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ed6:	6943      	ldr	r3, [r0, #20]
 8000ed8:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000edc:	bf08      	it	eq
 8000ede:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee0:	6181      	str	r1, [r0, #24]
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ee6:	4604      	mov	r4, r0
{
 8000ee8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000eea:	b360      	cbz	r0, 8000f46 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eec:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000ef0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ef6:	b91b      	cbnz	r3, 8000f00 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ef8:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000efc:	f006 f862 	bl	8006fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f00:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f02:	466e      	mov	r6, sp
 8000f04:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f06:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f0a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000f0c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f0e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000f12:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000f16:	bf08      	it	eq
 8000f18:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000f1a:	f004 fac0 	bl	800549e <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2a:	4625      	mov	r5, r4
 8000f2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f30:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f34:	f855 0b10 	ldr.w	r0, [r5], #16
 8000f38:	f004 fa70 	bl	800541c <USB_CoreInit>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	b120      	cbz	r0, 8000f4a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000f46:	2501      	movs	r5, #1
 8000f48:	e054      	b.n	8000ff4 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	f004 faac 	bl	80054aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f52:	4630      	mov	r0, r6
 8000f54:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f58:	261c      	movs	r6, #28
 8000f5a:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5e:	4601      	mov	r1, r0
 8000f60:	b2c2      	uxtb	r2, r0
 8000f62:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f64:	4596      	cmp	lr, r2
 8000f66:	d81b      	bhi.n	8000fa0 <HAL_PCD_Init+0xbc>
 8000f68:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f6a:	261c      	movs	r6, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	b2d8      	uxtb	r0, r3
 8000f70:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	4586      	cmp	lr, r0
 8000f74:	d822      	bhi.n	8000fbc <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	466e      	mov	r6, sp
 8000f7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f84:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f88:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f004 facd 	bl	800552c <USB_DevInit>
 8000f92:	2301      	movs	r3, #1
 8000f94:	4605      	mov	r5, r0
 8000f96:	b300      	cbz	r0, 8000fda <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000f9e:	e7d2      	b.n	8000f46 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000fa0:	fb06 4302 	mla	r3, r6, r2, r4
 8000fa4:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fb0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb4:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fb6:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb8:	6519      	str	r1, [r3, #80]	; 0x50
 8000fba:	e7d1      	b.n	8000f60 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000fbc:	fb06 4200 	mla	r2, r6, r0, r4
 8000fc0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000fc4:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fc8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fcc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fd0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fd4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000fd8:	e7c9      	b.n	8000f6e <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000fda:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fde:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f000 f806 	bl	8000ffa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	f004 fb54 	bl	800569c <USB_DevDisconnect>

  return HAL_OK;
}
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	b00b      	add	sp, #44	; 0x2c
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ffa <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000ffa:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffc:	6802      	ldr	r2, [r0, #0]
{
 8000ffe:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001000:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001004:	2000      	movs	r0, #0
 8001006:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800100a:	6993      	ldr	r3, [r2, #24]
 800100c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001010:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001012:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800101e:	4770      	bx	lr

08001020 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001022:	4c10      	ldr	r4, [pc, #64]	; (8001064 <HAL_PWREx_ConfigSupply+0x44>)
 8001024:	68e3      	ldr	r3, [r4, #12]
 8001026:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800102a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800102c:	d105      	bne.n	800103a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800102e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001032:	1a18      	subs	r0, r3, r0
 8001034:	bf18      	it	ne
 8001036:	2001      	movne	r0, #1
 8001038:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800103a:	f023 0307 	bic.w	r3, r3, #7
 800103e:	4318      	orrs	r0, r3
 8001040:	60e0      	str	r0, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001042:	f7ff fb39 	bl	80006b8 <HAL_GetTick>
 8001046:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001048:	6863      	ldr	r3, [r4, #4]
 800104a:	049b      	lsls	r3, r3, #18
 800104c:	d501      	bpl.n	8001052 <HAL_PWREx_ConfigSupply+0x32>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800104e:	2000      	movs	r0, #0
 8001050:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001052:	f7ff fb31 	bl	80006b8 <HAL_GetTick>
 8001056:	1b40      	subs	r0, r0, r5
 8001058:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800105c:	d9f4      	bls.n	8001048 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
}
 8001060:	bd38      	pop	{r3, r4, r5, pc}
 8001062:	bf00      	nop
 8001064:	58024800 	.word	0x58024800

08001068 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001068:	4a02      	ldr	r2, [pc, #8]	; (8001074 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800106a:	68d3      	ldr	r3, [r2, #12]
 800106c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001070:	60d3      	str	r3, [r2, #12]
 8001072:	4770      	bx	lr
 8001074:	58024800 	.word	0x58024800

08001078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800107a:	4604      	mov	r4, r0
 800107c:	b908      	cbnz	r0, 8001082 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	6803      	ldr	r3, [r0, #0]
 8001084:	07d8      	lsls	r0, r3, #31
 8001086:	d45a      	bmi.n	800113e <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	0799      	lsls	r1, r3, #30
 800108c:	f100 80a7 	bmi.w	80011de <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	06da      	lsls	r2, r3, #27
 8001094:	d523      	bpl.n	80010de <HAL_RCC_OscConfig+0x66>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001096:	4ba9      	ldr	r3, [pc, #676]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 8001098:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800109a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80010a0:	2a08      	cmp	r2, #8
 80010a2:	d007      	beq.n	80010b4 <HAL_RCC_OscConfig+0x3c>
 80010a4:	2a18      	cmp	r2, #24
 80010a6:	f040 80fb 	bne.w	80012a0 <HAL_RCC_OscConfig+0x228>
 80010aa:	f001 0203 	and.w	r2, r1, #3
 80010ae:	2a01      	cmp	r2, #1
 80010b0:	f040 80f6 	bne.w	80012a0 <HAL_RCC_OscConfig+0x228>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	d502      	bpl.n	80010c0 <HAL_RCC_OscConfig+0x48>
 80010ba:	69e3      	ldr	r3, [r4, #28]
 80010bc:	2b80      	cmp	r3, #128	; 0x80
 80010be:	d1de      	bne.n	800107e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010c0:	f7ff fb12 	bl	80006e8 <HAL_GetREVID>
 80010c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80010c8:	4a9c      	ldr	r2, [pc, #624]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 80010ca:	4298      	cmp	r0, r3
 80010cc:	6a21      	ldr	r1, [r4, #32]
 80010ce:	f200 80e0 	bhi.w	8001292 <HAL_RCC_OscConfig+0x21a>
 80010d2:	6853      	ldr	r3, [r2, #4]
 80010d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010d8:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80010dc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0719      	lsls	r1, r3, #28
 80010e2:	f100 8116 	bmi.w	8001312 <HAL_RCC_OscConfig+0x29a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	069a      	lsls	r2, r3, #26
 80010ea:	f100 813c 	bmi.w	8001366 <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	075d      	lsls	r5, r3, #29
 80010f2:	d51e      	bpl.n	8001132 <HAL_RCC_OscConfig+0xba>
    PWR->CR1 |= PWR_CR1_DBP;
 80010f4:	4d92      	ldr	r5, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x2c8>)
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80010fe:	f7ff fadb 	bl	80006b8 <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	05da      	lsls	r2, r3, #23
 8001108:	f140 8152 	bpl.w	80013b0 <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	4d8b      	ldr	r5, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 8001110:	2b01      	cmp	r3, #1
 8001112:	f040 8154 	bne.w	80013be <HAL_RCC_OscConfig+0x346>
 8001116:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001122:	f7ff fac9 	bl	80006b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001126:	4e85      	ldr	r6, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8001128:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800112a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800112c:	079b      	lsls	r3, r3, #30
 800112e:	f140 816c 	bpl.w	800140a <HAL_RCC_OscConfig+0x392>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001134:	2800      	cmp	r0, #0
 8001136:	f040 816f 	bne.w	8001418 <HAL_RCC_OscConfig+0x3a0>
      }
    }
  }
  return HAL_OK;
 800113a:	2000      	movs	r0, #0
 800113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 8001140:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001142:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001144:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001148:	2a10      	cmp	r2, #16
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0xe0>
 800114c:	2a18      	cmp	r2, #24
 800114e:	d10a      	bne.n	8001166 <HAL_RCC_OscConfig+0xee>
 8001150:	f001 0203 	and.w	r2, r1, #3
 8001154:	2a02      	cmp	r2, #2
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0xee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	039a      	lsls	r2, r3, #14
 800115c:	d594      	bpl.n	8001088 <HAL_RCC_OscConfig+0x10>
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d191      	bne.n	8001088 <HAL_RCC_OscConfig+0x10>
 8001164:	e78b      	b.n	800107e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	6863      	ldr	r3, [r4, #4]
 8001168:	4d74      	ldr	r5, [pc, #464]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d111      	bne.n	8001194 <HAL_RCC_OscConfig+0x11c>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001178:	f7ff fa9e 	bl	80006b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800117c:	4d6f      	ldr	r5, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 800117e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	039b      	lsls	r3, r3, #14
 8001184:	d480      	bmi.n	8001088 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001186:	f7ff fa97 	bl	80006b8 <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	2864      	cmp	r0, #100	; 0x64
 800118e:	d9f7      	bls.n	8001180 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
 8001192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	b9a3      	cbnz	r3, 80011c0 <HAL_RCC_OscConfig+0x148>
 8001196:	682b      	ldr	r3, [r5, #0]
 8001198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	682b      	ldr	r3, [r5, #0]
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011a6:	f7ff fa87 	bl	80006b8 <HAL_GetTick>
 80011aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	039f      	lsls	r7, r3, #14
 80011b0:	f57f af6a 	bpl.w	8001088 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fa80 	bl	80006b8 <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	2864      	cmp	r0, #100	; 0x64
 80011bc:	d9f6      	bls.n	80011ac <HAL_RCC_OscConfig+0x134>
 80011be:	e7e7      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	d103      	bne.n	80011d0 <HAL_RCC_OscConfig+0x158>
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	e7cf      	b.n	8001170 <HAL_RCC_OscConfig+0xf8>
 80011d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d4:	602b      	str	r3, [r5, #0]
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	e7cb      	b.n	8001176 <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 80011e0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011e4:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80011e8:	d003      	beq.n	80011f2 <HAL_RCC_OscConfig+0x17a>
 80011ea:	2a18      	cmp	r2, #24
 80011ec:	d11b      	bne.n	8001226 <HAL_RCC_OscConfig+0x1ae>
 80011ee:	078e      	lsls	r6, r1, #30
 80011f0:	d119      	bne.n	8001226 <HAL_RCC_OscConfig+0x1ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	075d      	lsls	r5, r3, #29
 80011f6:	d503      	bpl.n	8001200 <HAL_RCC_OscConfig+0x188>
 80011f8:	68e3      	ldr	r3, [r4, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f43f af3f 	beq.w	800107e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	f7ff fa72 	bl	80006e8 <HAL_GetREVID>
 8001204:	f241 0303 	movw	r3, #4099	; 0x1003
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 800120a:	4298      	cmp	r0, r3
 800120c:	6921      	ldr	r1, [r4, #16]
 800120e:	6853      	ldr	r3, [r2, #4]
 8001210:	bf95      	itete	ls
 8001212:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8001216:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 800121a:	ea43 3301 	orrls.w	r3, r3, r1, lsl #12
 800121e:	ea43 6301 	orrhi.w	r3, r3, r1, lsl #24
 8001222:	6053      	str	r3, [r2, #4]
 8001224:	e734      	b.n	8001090 <HAL_RCC_OscConfig+0x18>
 8001226:	4d45      	ldr	r5, [pc, #276]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001228:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800122a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800122c:	b30a      	cbz	r2, 8001272 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800122e:	f023 0319 	bic.w	r3, r3, #25
 8001232:	4313      	orrs	r3, r2
 8001234:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001236:	f7ff fa3f 	bl	80006b8 <HAL_GetTick>
 800123a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	0758      	lsls	r0, r3, #29
 8001240:	d511      	bpl.n	8001266 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	f7ff fa51 	bl	80006e8 <HAL_GetREVID>
 8001246:	f241 0303 	movw	r3, #4099	; 0x1003
 800124a:	6922      	ldr	r2, [r4, #16]
 800124c:	4298      	cmp	r0, r3
 800124e:	686b      	ldr	r3, [r5, #4]
 8001250:	bf95      	itete	ls
 8001252:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8001256:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 800125a:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 800125e:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 8001262:	606b      	str	r3, [r5, #4]
 8001264:	e714      	b.n	8001090 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fa27 	bl	80006b8 <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d9e5      	bls.n	800123c <HAL_RCC_OscConfig+0x1c4>
 8001270:	e78e      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_DISABLE();
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff fa1e 	bl	80006b8 <HAL_GetTick>
 800127c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	0759      	lsls	r1, r3, #29
 8001282:	f57f af05 	bpl.w	8001090 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fa17 	bl	80006b8 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	2802      	cmp	r0, #2
 800128e:	d9f6      	bls.n	800127e <HAL_RCC_OscConfig+0x206>
 8001290:	e77e      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001292:	68d3      	ldr	r3, [r2, #12]
 8001294:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001298:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800129c:	60d3      	str	r3, [r2, #12]
 800129e:	e71e      	b.n	80010de <HAL_RCC_OscConfig+0x66>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80012a0:	69e3      	ldr	r3, [r4, #28]
 80012a2:	4d26      	ldr	r5, [pc, #152]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 80012a4:	b323      	cbz	r3, 80012f0 <HAL_RCC_OscConfig+0x278>
        __HAL_RCC_CSI_ENABLE();
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012ae:	f7ff fa03 	bl	80006b8 <HAL_GetTick>
 80012b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	05df      	lsls	r7, r3, #23
 80012b8:	d50d      	bpl.n	80012d6 <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012ba:	f7ff fa15 	bl	80006e8 <HAL_GetREVID>
 80012be:	f241 0303 	movw	r3, #4099	; 0x1003
 80012c2:	6a22      	ldr	r2, [r4, #32]
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d80c      	bhi.n	80012e2 <HAL_RCC_OscConfig+0x26a>
 80012c8:	686b      	ldr	r3, [r5, #4]
 80012ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80012ce:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80012d2:	606b      	str	r3, [r5, #4]
 80012d4:	e703      	b.n	80010de <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80012d6:	f7ff f9ef 	bl	80006b8 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9e9      	bls.n	80012b4 <HAL_RCC_OscConfig+0x23c>
 80012e0:	e756      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012e2:	68eb      	ldr	r3, [r5, #12]
 80012e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80012e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012ec:	60eb      	str	r3, [r5, #12]
 80012ee:	e6f6      	b.n	80010de <HAL_RCC_OscConfig+0x66>
        __HAL_RCC_CSI_DISABLE();
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9de 	bl	80006b8 <HAL_GetTick>
 80012fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	05d8      	lsls	r0, r3, #23
 8001302:	f57f aeec 	bpl.w	80010de <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001306:	f7ff f9d7 	bl	80006b8 <HAL_GetTick>
 800130a:	1b80      	subs	r0, r0, r6
 800130c:	2802      	cmp	r0, #2
 800130e:	d9f6      	bls.n	80012fe <HAL_RCC_OscConfig+0x286>
 8001310:	e73e      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001312:	6963      	ldr	r3, [r4, #20]
 8001314:	4d09      	ldr	r5, [pc, #36]	; (800133c <HAL_RCC_OscConfig+0x2c4>)
 8001316:	b1ab      	cbz	r3, 8001344 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 8001318:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001320:	f7ff f9ca 	bl	80006b8 <HAL_GetTick>
 8001324:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001326:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001328:	079b      	lsls	r3, r3, #30
 800132a:	f53f aedc 	bmi.w	80010e6 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff f9c3 	bl	80006b8 <HAL_GetTick>
 8001332:	1b80      	subs	r0, r0, r6
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f6      	bls.n	8001326 <HAL_RCC_OscConfig+0x2ae>
 8001338:	e72a      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
 800133a:	bf00      	nop
 800133c:	58024400 	.word	0x58024400
 8001340:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8001344:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800134c:	f7ff f9b4 	bl	80006b8 <HAL_GetTick>
 8001350:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001352:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001354:	079f      	lsls	r7, r3, #30
 8001356:	f57f aec6 	bpl.w	80010e6 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff f9ad 	bl	80006b8 <HAL_GetTick>
 800135e:	1b80      	subs	r0, r0, r6
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f6      	bls.n	8001352 <HAL_RCC_OscConfig+0x2da>
 8001364:	e714      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001366:	69a3      	ldr	r3, [r4, #24]
 8001368:	4d83      	ldr	r5, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x500>)
 800136a:	b183      	cbz	r3, 800138e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_HSI48_ENABLE();
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001372:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001374:	f7ff f9a0 	bl	80006b8 <HAL_GetTick>
 8001378:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	0498      	lsls	r0, r3, #18
 800137e:	f53f aeb6 	bmi.w	80010ee <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001382:	f7ff f999 	bl	80006b8 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f6      	bls.n	800137a <HAL_RCC_OscConfig+0x302>
 800138c:	e700      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSI48_DISABLE();
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001394:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001396:	f7ff f98f 	bl	80006b8 <HAL_GetTick>
 800139a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	0499      	lsls	r1, r3, #18
 80013a0:	f57f aea5 	bpl.w	80010ee <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80013a4:	f7ff f988 	bl	80006b8 <HAL_GetTick>
 80013a8:	1b80      	subs	r0, r0, r6
 80013aa:	2802      	cmp	r0, #2
 80013ac:	d9f6      	bls.n	800139c <HAL_RCC_OscConfig+0x324>
 80013ae:	e6ef      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff f982 	bl	80006b8 <HAL_GetTick>
 80013b4:	1b80      	subs	r0, r0, r6
 80013b6:	2864      	cmp	r0, #100	; 0x64
 80013b8:	f67f aea4 	bls.w	8001104 <HAL_RCC_OscConfig+0x8c>
 80013bc:	e6e8      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013be:	b9b3      	cbnz	r3, 80013ee <HAL_RCC_OscConfig+0x376>
 80013c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	672b      	str	r3, [r5, #112]	; 0x70
 80013cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013d4:	f7ff f970 	bl	80006b8 <HAL_GetTick>
 80013d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013dc:	0798      	lsls	r0, r3, #30
 80013de:	f57f aea8 	bpl.w	8001132 <HAL_RCC_OscConfig+0xba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff f969 	bl	80006b8 <HAL_GetTick>
 80013e6:	1b80      	subs	r0, r0, r6
 80013e8:	42b8      	cmp	r0, r7
 80013ea:	d9f6      	bls.n	80013da <HAL_RCC_OscConfig+0x362>
 80013ec:	e6d0      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f2:	d103      	bne.n	80013fc <HAL_RCC_OscConfig+0x384>
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	672b      	str	r3, [r5, #112]	; 0x70
 80013fa:	e68c      	b.n	8001116 <HAL_RCC_OscConfig+0x9e>
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	672b      	str	r3, [r5, #112]	; 0x70
 8001402:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	e688      	b.n	800111c <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff f955 	bl	80006b8 <HAL_GetTick>
 800140e:	1bc0      	subs	r0, r0, r7
 8001410:	42a8      	cmp	r0, r5
 8001412:	f67f ae8a 	bls.w	800112a <HAL_RCC_OscConfig+0xb2>
 8001416:	e6bb      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001418:	4d57      	ldr	r5, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x500>)
 800141a:	692b      	ldr	r3, [r5, #16]
 800141c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001420:	2b18      	cmp	r3, #24
 8001422:	d07a      	beq.n	800151a <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 8001424:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001426:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800142c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142e:	d167      	bne.n	8001500 <HAL_RCC_OscConfig+0x488>
        tickstart = HAL_GetTick();
 8001430:	f7ff f942 	bl	80006b8 <HAL_GetTick>
 8001434:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	0199      	lsls	r1, r3, #6
 800143a:	d45b      	bmi.n	80014f4 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800143e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001440:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	4313      	orrs	r3, r2
 800144a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800144c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001450:	62ab      	str	r3, [r5, #40]	; 0x28
 8001452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001454:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001456:	3b01      	subs	r3, #1
 8001458:	3a01      	subs	r2, #1
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	0412      	lsls	r2, r2, #16
 800145e:	b29b      	uxth	r3, r3
 8001460:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001464:	4313      	orrs	r3, r2
 8001466:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001468:	3a01      	subs	r2, #1
 800146a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800146e:	4313      	orrs	r3, r2
 8001470:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001472:	3a01      	subs	r2, #1
 8001474:	0612      	lsls	r2, r2, #24
 8001476:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800147a:	4313      	orrs	r3, r2
 800147c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800147e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001486:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001488:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800148a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800148e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001492:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001496:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001498:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800149a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800149c:	f023 030c 	bic.w	r3, r3, #12
 80014a0:	4313      	orrs	r3, r2
 80014a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80014a8:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014ac:	4c32      	ldr	r4, [pc, #200]	; (8001578 <HAL_RCC_OscConfig+0x500>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014ae:	4313      	orrs	r3, r2
 80014b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80014b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80014c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80014ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014da:	f7ff f8ed 	bl	80006b8 <HAL_GetTick>
 80014de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	019a      	lsls	r2, r3, #6
 80014e4:	f53f ae29 	bmi.w	800113a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff f8e6 	bl	80006b8 <HAL_GetTick>
 80014ec:	1b40      	subs	r0, r0, r5
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f6      	bls.n	80014e0 <HAL_RCC_OscConfig+0x468>
 80014f2:	e64d      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff f8e0 	bl	80006b8 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d99b      	bls.n	8001436 <HAL_RCC_OscConfig+0x3be>
 80014fe:	e647      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001500:	f7ff f8da 	bl	80006b8 <HAL_GetTick>
 8001504:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	f57f ae16 	bpl.w	800113a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff f8d3 	bl	80006b8 <HAL_GetTick>
 8001512:	1b00      	subs	r0, r0, r4
 8001514:	2802      	cmp	r0, #2
 8001516:	d9f6      	bls.n	8001506 <HAL_RCC_OscConfig+0x48e>
 8001518:	e63a      	b.n	8001190 <HAL_RCC_OscConfig+0x118>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800151c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800151e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x4fc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001528:	4281      	cmp	r1, r0
 800152a:	f47f ada8 	bne.w	800107e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800152e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001534:	428a      	cmp	r2, r1
 8001536:	f47f ada2 	bne.w	800107e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800153a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800153c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001540:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001542:	4291      	cmp	r1, r2
 8001544:	f47f ad9b 	bne.w	800107e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001548:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800154a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800154e:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001550:	4291      	cmp	r1, r2
 8001552:	f47f ad94 	bne.w	800107e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001558:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800155c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800155e:	4291      	cmp	r1, r2
 8001560:	f47f ad8d 	bne.w	800107e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001564:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001566:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800156a:	3801      	subs	r0, #1
    return HAL_ERROR;
 800156c:	1a18      	subs	r0, r3, r0
 800156e:	bf18      	it	ne
 8001570:	2001      	movne	r0, #1
 8001572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8001574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001576:	bf00      	nop
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x124>)
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001584:	2a10      	cmp	r2, #16
{
 8001586:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	d00e      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800158a:	2a18      	cmp	r2, #24
 800158c:	d00e      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x30>
 800158e:	2a00      	cmp	r2, #0
 8001590:	f040 8083 	bne.w	800169a <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4843      	ldr	r0, [pc, #268]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001598:	f012 0f20 	tst.w	r2, #32
 800159c:	d07e      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80015a4:	40d8      	lsrs	r0, r3
 80015a6:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015a8:	483f      	ldr	r0, [pc, #252]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80015aa:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015b2:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015b6:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d06f      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015bc:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015c0:	f002 0201 	and.w	r2, r2, #1
 80015c4:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80016ac <HAL_RCC_GetSysClockFreq+0x130>
 80015c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015cc:	4362      	muls	r2, r4
 80015ce:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015d2:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 80015da:	2a01      	cmp	r2, #1
 80015dc:	ee07 0a90 	vmov	s15, r0
 80015e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x70>
 80015e6:	d30f      	bcc.n	8001608 <HAL_RCC_GetSysClockFreq+0x8c>
 80015e8:	2a02      	cmp	r2, #2
 80015ea:	d048      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	eee6 7a05 	vfma.f32	s15, s12, s10
 80015fe:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80016b0 <HAL_RCC_GetSysClockFreq+0x134>
 8001602:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001606:	e037      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	0692      	lsls	r2, r2, #26
 800160c:	d527      	bpl.n	800165e <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001612:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001618:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161e:	ee07 2a90 	vmov	s15, r2
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001636:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001646:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001648:	ee07 3a10 	vmov	s14, r3
 800164c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001650:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001654:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001658:	ee17 0a90 	vmov	r0, s15
 800165c:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001670:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80016b4 <HAL_RCC_GetSysClockFreq+0x138>
 8001674:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001678:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800167c:	e7dd      	b.n	800163a <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001690:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80016b8 <HAL_RCC_GetSysClockFreq+0x13c>
 8001694:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001698:	e7ee      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800169c:	bd10      	pop	{r4, pc}
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	03d09000 	.word	0x03d09000
 80016a8:	007a1200 	.word	0x007a1200
 80016ac:	39000000 	.word	0x39000000
 80016b0:	4a742400 	.word	0x4a742400
 80016b4:	4c742400 	.word	0x4c742400
 80016b8:	4af42400 	.word	0x4af42400
 80016bc:	003d0900 	.word	0x003d0900

080016c0 <HAL_RCC_ClockConfig>:
{
 80016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016c6:	4604      	mov	r4, r0
 80016c8:	b910      	cbnz	r0, 80016d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
 80016cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4a89      	ldr	r2, [pc, #548]	; (80018f8 <HAL_RCC_ClockConfig+0x238>)
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	428b      	cmp	r3, r1
 80016da:	f0c0 8093 	bcc.w	8001804 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	075f      	lsls	r7, r3, #29
 80016e2:	f100 809b 	bmi.w	800181c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e6:	071e      	lsls	r6, r3, #28
 80016e8:	d50b      	bpl.n	8001702 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016ea:	4984      	ldr	r1, [pc, #528]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 80016ec:	6966      	ldr	r6, [r4, #20]
 80016ee:	69c8      	ldr	r0, [r1, #28]
 80016f0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80016f4:	4286      	cmp	r6, r0
 80016f6:	d904      	bls.n	8001702 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016f8:	69ca      	ldr	r2, [r1, #28]
 80016fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016fe:	4332      	orrs	r2, r6
 8001700:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	06d8      	lsls	r0, r3, #27
 8001704:	d50b      	bpl.n	800171e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001706:	497d      	ldr	r1, [pc, #500]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 8001708:	69a6      	ldr	r6, [r4, #24]
 800170a:	69c8      	ldr	r0, [r1, #28]
 800170c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001710:	4286      	cmp	r6, r0
 8001712:	d904      	bls.n	800171e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001714:	69ca      	ldr	r2, [r1, #28]
 8001716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800171a:	4332      	orrs	r2, r6
 800171c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800171e:	0699      	lsls	r1, r3, #26
 8001720:	d50b      	bpl.n	800173a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001722:	4976      	ldr	r1, [pc, #472]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 8001724:	69e6      	ldr	r6, [r4, #28]
 8001726:	6a08      	ldr	r0, [r1, #32]
 8001728:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800172c:	4286      	cmp	r6, r0
 800172e:	d904      	bls.n	800173a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001730:	6a0a      	ldr	r2, [r1, #32]
 8001732:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001736:	4332      	orrs	r2, r6
 8001738:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173a:	079a      	lsls	r2, r3, #30
 800173c:	d50b      	bpl.n	8001756 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800173e:	496f      	ldr	r1, [pc, #444]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 8001740:	68e6      	ldr	r6, [r4, #12]
 8001742:	6988      	ldr	r0, [r1, #24]
 8001744:	f000 000f 	and.w	r0, r0, #15
 8001748:	4286      	cmp	r6, r0
 800174a:	d904      	bls.n	8001756 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	698a      	ldr	r2, [r1, #24]
 800174e:	f022 020f 	bic.w	r2, r2, #15
 8001752:	4332      	orrs	r2, r6
 8001754:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	07df      	lsls	r7, r3, #31
 8001758:	d46e      	bmi.n	8001838 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	079e      	lsls	r6, r3, #30
 800175e:	f100 80a2 	bmi.w	80018a6 <HAL_RCC_ClockConfig+0x1e6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x238>)
 8001764:	680a      	ldr	r2, [r1, #0]
 8001766:	f002 020f 	and.w	r2, r2, #15
 800176a:	4295      	cmp	r5, r2
 800176c:	f0c0 80a9 	bcc.w	80018c2 <HAL_RCC_ClockConfig+0x202>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001770:	0758      	lsls	r0, r3, #29
 8001772:	f100 80b2 	bmi.w	80018da <HAL_RCC_ClockConfig+0x21a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001776:	0719      	lsls	r1, r3, #28
 8001778:	d50b      	bpl.n	8001792 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800177a:	4960      	ldr	r1, [pc, #384]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 800177c:	6965      	ldr	r5, [r4, #20]
 800177e:	69c8      	ldr	r0, [r1, #28]
 8001780:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001784:	4285      	cmp	r5, r0
 8001786:	d204      	bcs.n	8001792 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001788:	69ca      	ldr	r2, [r1, #28]
 800178a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800178e:	432a      	orrs	r2, r5
 8001790:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	06da      	lsls	r2, r3, #27
 8001794:	d50b      	bpl.n	80017ae <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001796:	4959      	ldr	r1, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 8001798:	69a5      	ldr	r5, [r4, #24]
 800179a:	69c8      	ldr	r0, [r1, #28]
 800179c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017a0:	4285      	cmp	r5, r0
 80017a2:	d204      	bcs.n	80017ae <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017a4:	69ca      	ldr	r2, [r1, #28]
 80017a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017aa:	432a      	orrs	r2, r5
 80017ac:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ae:	069b      	lsls	r3, r3, #26
 80017b0:	d50b      	bpl.n	80017ca <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017b2:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 80017b4:	69e0      	ldr	r0, [r4, #28]
 80017b6:	6a11      	ldr	r1, [r2, #32]
 80017b8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80017bc:	4288      	cmp	r0, r1
 80017be:	d204      	bcs.n	80017ca <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017c0:	6a13      	ldr	r3, [r2, #32]
 80017c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017c6:	4303      	orrs	r3, r0
 80017c8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017ca:	f7ff fed7 	bl	800157c <HAL_RCC_GetSysClockFreq>
 80017ce:	494b      	ldr	r1, [pc, #300]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_RCC_ClockConfig+0x240>)
 80017d2:	698b      	ldr	r3, [r1, #24]
 80017d4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e0:	698b      	ldr	r3, [r1, #24]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_RCC_ClockConfig+0x244>)
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	fa20 f303 	lsr.w	r3, r0, r3
 80017f2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_RCC_ClockConfig+0x248>)
 80017f6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <HAL_RCC_ClockConfig+0x24c>)
}
 80017fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f7fe befa 	b.w	80005f8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	430b      	orrs	r3, r1
 800180c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	4299      	cmp	r1, r3
 8001816:	f47f af58 	bne.w	80016ca <HAL_RCC_ClockConfig+0xa>
 800181a:	e760      	b.n	80016de <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 800181e:	6926      	ldr	r6, [r4, #16]
 8001820:	6988      	ldr	r0, [r1, #24]
 8001822:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001826:	4286      	cmp	r6, r0
 8001828:	f67f af5d 	bls.w	80016e6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800182c:	698a      	ldr	r2, [r1, #24]
 800182e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001832:	4332      	orrs	r2, r6
 8001834:	618a      	str	r2, [r1, #24]
 8001836:	e756      	b.n	80016e6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 800183a:	68a1      	ldr	r1, [r4, #8]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001842:	430a      	orrs	r2, r1
 8001844:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001848:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	2902      	cmp	r1, #2
 800184c:	d11e      	bne.n	800188c <HAL_RCC_ClockConfig+0x1cc>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800184e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001852:	f43f af3a 	beq.w	80016ca <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001856:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	4e27      	ldr	r6, [pc, #156]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800185e:	f022 0207 	bic.w	r2, r2, #7
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001866:	f7fe ff27 	bl	80006b8 <HAL_GetTick>
 800186a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186c:	6933      	ldr	r3, [r6, #16]
 800186e:	6862      	ldr	r2, [r4, #4]
 8001870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001874:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001878:	f43f af6f 	beq.w	800175a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7fe ff1c 	bl	80006b8 <HAL_GetTick>
 8001880:	1bc0      	subs	r0, r0, r7
 8001882:	4540      	cmp	r0, r8
 8001884:	d9f2      	bls.n	800186c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
}
 8001888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188c:	2903      	cmp	r1, #3
 800188e:	d102      	bne.n	8001896 <HAL_RCC_ClockConfig+0x1d6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001890:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001894:	e7dd      	b.n	8001852 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001896:	2901      	cmp	r1, #1
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x1e0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800189a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800189e:	e7d8      	b.n	8001852 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a0:	f012 0f04 	tst.w	r2, #4
 80018a4:	e7d5      	b.n	8001852 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018a6:	4915      	ldr	r1, [pc, #84]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 80018a8:	68e6      	ldr	r6, [r4, #12]
 80018aa:	6988      	ldr	r0, [r1, #24]
 80018ac:	f000 000f 	and.w	r0, r0, #15
 80018b0:	4286      	cmp	r6, r0
 80018b2:	f4bf af56 	bcs.w	8001762 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b6:	698a      	ldr	r2, [r1, #24]
 80018b8:	f022 020f 	bic.w	r2, r2, #15
 80018bc:	4332      	orrs	r2, r6
 80018be:	618a      	str	r2, [r1, #24]
 80018c0:	e74f      	b.n	8001762 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	680a      	ldr	r2, [r1, #0]
 80018c4:	f022 020f 	bic.w	r2, r2, #15
 80018c8:	432a      	orrs	r2, r5
 80018ca:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018cc:	680a      	ldr	r2, [r1, #0]
 80018ce:	f002 020f 	and.w	r2, r2, #15
 80018d2:	4295      	cmp	r5, r2
 80018d4:	f47f aef9 	bne.w	80016ca <HAL_RCC_ClockConfig+0xa>
 80018d8:	e74a      	b.n	8001770 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <HAL_RCC_ClockConfig+0x23c>)
 80018dc:	6925      	ldr	r5, [r4, #16]
 80018de:	6988      	ldr	r0, [r1, #24]
 80018e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80018e4:	4285      	cmp	r5, r0
 80018e6:	f4bf af46 	bcs.w	8001776 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018ea:	698a      	ldr	r2, [r1, #24]
 80018ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018f0:	432a      	orrs	r2, r5
 80018f2:	618a      	str	r2, [r1, #24]
 80018f4:	e73f      	b.n	8001776 <HAL_RCC_ClockConfig+0xb6>
 80018f6:	bf00      	nop
 80018f8:	52002000 	.word	0x52002000
 80018fc:	58024400 	.word	0x58024400
 8001900:	08007308 	.word	0x08007308
 8001904:	20000010 	.word	0x20000010
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001912:	f7ff fe33 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_RCC_GetHCLKFreq+0x34>)
 8001918:	490b      	ldr	r1, [pc, #44]	; (8001948 <HAL_RCC_GetHCLKFreq+0x38>)
 800191a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800191c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800191e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001922:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001930:	5c88      	ldrb	r0, [r1, r2]
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_RCC_GetHCLKFreq+0x3c>)
 8001934:	f000 001f 	and.w	r0, r0, #31
 8001938:	fa23 f000 	lsr.w	r0, r3, r0
 800193c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_RCC_GetHCLKFreq+0x40>)
 8001940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001942:	bd08      	pop	{r3, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	08007308 	.word	0x08007308
 800194c:	20000010 	.word	0x20000010
 8001950:	2000000c 	.word	0x2000000c

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001956:	f7ff ffdb 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800196a:	40d8      	lsrs	r0, r3
 800196c:	bd08      	pop	{r3, pc}
 800196e:	bf00      	nop
 8001970:	58024400 	.word	0x58024400
 8001974:	08007308 	.word	0x08007308

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800197a:	f7ff ffc9 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800198e:	40d8      	lsrs	r0, r3
 8001990:	bd08      	pop	{r3, pc}
 8001992:	bf00      	nop
 8001994:	58024400 	.word	0x58024400
 8001998:	08007308 	.word	0x08007308

0800199c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800199e:	4c3a      	ldr	r4, [pc, #232]	; (8001a88 <RCCEx_PLL2_Config+0xec>)
{
 80019a0:	4606      	mov	r6, r0
 80019a2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80019a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d069      	beq.n	8001a82 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80019b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b6:	f7fe fe7f 	bl	80006b8 <HAL_GetTick>
 80019ba:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	011a      	lsls	r2, r3, #4
 80019c0:	d44b      	bmi.n	8001a5a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80019c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019c4:	6832      	ldr	r2, [r6, #0]
 80019c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019ca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80019ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80019d0:	68b3      	ldr	r3, [r6, #8]
 80019d2:	68f2      	ldr	r2, [r6, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	3a01      	subs	r2, #1
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	0412      	lsls	r2, r2, #16
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80019e2:	4313      	orrs	r3, r2
 80019e4:	6872      	ldr	r2, [r6, #4]
 80019e6:	3a01      	subs	r2, #1
 80019e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019ec:	4313      	orrs	r3, r2
 80019ee:	6932      	ldr	r2, [r6, #16]
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0612      	lsls	r2, r2, #24
 80019f4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80019f8:	4313      	orrs	r3, r2
 80019fa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80019fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019fe:	6972      	ldr	r2, [r6, #20]
 8001a00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a04:	4313      	orrs	r3, r2
 8001a06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a0a:	69b2      	ldr	r2, [r6, #24]
 8001a0c:	f023 0320 	bic.w	r3, r3, #32
 8001a10:	4313      	orrs	r3, r2
 8001a12:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001a14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a16:	f023 0310 	bic.w	r3, r3, #16
 8001a1a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a1e:	69f2      	ldr	r2, [r6, #28]
 8001a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a2c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001a38:	b9b5      	cbnz	r5, 8001a68 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001a40:	4c11      	ldr	r4, [pc, #68]	; (8001a88 <RCCEx_PLL2_Config+0xec>)
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a4a:	f7fe fe35 	bl	80006b8 <HAL_GetTick>
 8001a4e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	d50f      	bpl.n	8001a76 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001a56:	2000      	movs	r0, #0
 8001a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001a5a:	f7fe fe2d 	bl	80006b8 <HAL_GetTick>
 8001a5e:	1bc0      	subs	r0, r0, r7
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9ab      	bls.n	80019bc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001a68:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001a6a:	bf0c      	ite	eq
 8001a6c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001a70:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001a74:	e7e3      	b.n	8001a3e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001a76:	f7fe fe1f 	bl	80006b8 <HAL_GetTick>
 8001a7a:	1b40      	subs	r0, r0, r5
 8001a7c:	2802      	cmp	r0, #2
 8001a7e:	d9e7      	bls.n	8001a50 <RCCEx_PLL2_Config+0xb4>
 8001a80:	e7f0      	b.n	8001a64 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
}
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400

08001a8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a8e:	4c3a      	ldr	r4, [pc, #232]	; (8001b78 <RCCEx_PLL3_Config+0xec>)
{
 8001a90:	4606      	mov	r6, r0
 8001a92:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d069      	beq.n	8001b72 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa6:	f7fe fe07 	bl	80006b8 <HAL_GetTick>
 8001aaa:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	009a      	lsls	r2, r3, #2
 8001ab0:	d44b      	bmi.n	8001b4a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ab4:	6832      	ldr	r2, [r6, #0]
 8001ab6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001aba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001abe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ac0:	68b3      	ldr	r3, [r6, #8]
 8001ac2:	68f2      	ldr	r2, [r6, #12]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	025b      	lsls	r3, r3, #9
 8001aca:	0412      	lsls	r2, r2, #16
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	6872      	ldr	r2, [r6, #4]
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001adc:	4313      	orrs	r3, r2
 8001ade:	6932      	ldr	r2, [r6, #16]
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0612      	lsls	r2, r2, #24
 8001ae4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aee:	6972      	ldr	r2, [r6, #20]
 8001af0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001af4:	4313      	orrs	r3, r2
 8001af6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001afa:	69b2      	ldr	r2, [r6, #24]
 8001afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b00:	4313      	orrs	r3, r2
 8001b02:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b0a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001b0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b0e:	69f2      	ldr	r2, [r6, #28]
 8001b10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b1c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001b28:	b9b5      	cbnz	r5, 8001b58 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001b2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001b30:	4c11      	ldr	r4, [pc, #68]	; (8001b78 <RCCEx_PLL3_Config+0xec>)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fdbd 	bl	80006b8 <HAL_GetTick>
 8001b3e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	d50f      	bpl.n	8001b66 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001b46:	2000      	movs	r0, #0
 8001b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001b4a:	f7fe fdb5 	bl	80006b8 <HAL_GetTick>
 8001b4e:	1bc0      	subs	r0, r0, r7
 8001b50:	2802      	cmp	r0, #2
 8001b52:	d9ab      	bls.n	8001aac <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001b54:	2003      	movs	r0, #3
 8001b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001b58:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001b5a:	bf0c      	ite	eq
 8001b5c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001b60:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001b64:	e7e3      	b.n	8001b2e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001b66:	f7fe fda7 	bl	80006b8 <HAL_GetTick>
 8001b6a:	1b40      	subs	r0, r0, r5
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d9e7      	bls.n	8001b40 <RCCEx_PLL3_Config+0xb4>
 8001b70:	e7f0      	b.n	8001b54 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
}
 8001b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	58024400 	.word	0x58024400

08001b7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b80:	6806      	ldr	r6, [r0, #0]
{
 8001b82:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b84:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001b88:	d023      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b8a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b90:	d018      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001b92:	d802      	bhi.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b94:	b183      	cbz	r3, 8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001b96:	2601      	movs	r6, #1
 8001b98:	e01b      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b9e:	d023      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ba4:	d1f7      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001ba6:	4a9f      	ldr	r2, [pc, #636]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ba8:	2600      	movs	r6, #0
 8001baa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001bac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001bae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8001bb6:	e00c      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bb8:	4a9a      	ldr	r2, [pc, #616]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001bba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001bc2:	e7f0      	b.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	3004      	adds	r0, #4
 8001bc8:	f7ff fee8 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001bcc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d0e9      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	05dd      	lsls	r5, r3, #23
 8001bd6:	d534      	bpl.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001bd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d830      	bhi.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001bde:	e8df f003 	tbb	[pc, r3]
 8001be2:	0f08      	.short	0x0f08
 8001be4:	0d29      	.short	0x0d29
 8001be6:	0d          	.byte	0x0d
 8001be7:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001be8:	2102      	movs	r1, #2
 8001bea:	3024      	adds	r0, #36	; 0x24
 8001bec:	f7ff ff4e 	bl	8001a8c <RCCEx_PLL3_Config>
 8001bf0:	e7ec      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bf2:	4a8c      	ldr	r2, [pc, #560]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001bf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001bfc:	4635      	mov	r5, r6
 8001bfe:	e004      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c00:	2100      	movs	r1, #0
 8001c02:	1d20      	adds	r0, r4, #4
 8001c04:	f7ff feca 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001c0a:	b9e5      	cbnz	r5, 8001c46 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c0c:	4a85      	ldr	r2, [pc, #532]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c0e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001c10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001c12:	f023 0307 	bic.w	r3, r3, #7
 8001c16:	430b      	orrs	r3, r1
 8001c18:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	0598      	lsls	r0, r3, #22
 8001c1e:	d521      	bpl.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c22:	2b80      	cmp	r3, #128	; 0x80
 8001c24:	d03b      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001c26:	d810      	bhi.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001c28:	b36b      	cbz	r3, 8001c86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d031      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8001c2e:	2601      	movs	r6, #1
 8001c30:	4635      	mov	r5, r6
 8001c32:	e017      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c34:	2100      	movs	r1, #0
 8001c36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c3a:	f7ff ff27 	bl	8001a8c <RCCEx_PLL3_Config>
 8001c3e:	e7e3      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8001c40:	2601      	movs	r6, #1
 8001c42:	4635      	mov	r5, r6
 8001c44:	e7e9      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c46:	462e      	mov	r6, r5
 8001c48:	e7e7      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8001c54:	bb4d      	cbnz	r5, 8001caa <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001c56:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c58:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001c5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001c5c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	0559      	lsls	r1, r3, #21
 8001c68:	d530      	bpl.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001c6a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c72:	d047      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001c74:	d81b      	bhi.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d038      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c7e:	d03b      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8001c80:	2601      	movs	r6, #1
 8001c82:	4635      	mov	r5, r6
 8001c84:	e022      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c86:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c90:	e7e0      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c92:	2100      	movs	r1, #0
 8001c94:	1d20      	adds	r0, r4, #4
 8001c96:	f7ff fe81 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c9a:	4605      	mov	r5, r0
      break;
 8001c9c:	e7da      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ca4:	f7ff fef2 	bl	8001a8c <RCCEx_PLL3_Config>
 8001ca8:	e7f7      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001caa:	462e      	mov	r6, r5
 8001cac:	e7da      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001cae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001cb2:	d002      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cb8:	d1e2      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8001cba:	bb4d      	cbnz	r5, 8001d10 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001cbc:	4a59      	ldr	r2, [pc, #356]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cbe:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001cc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cc4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	051a      	lsls	r2, r3, #20
 8001cd0:	d52f      	bpl.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001cd2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cda:	d041      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001cdc:	d81a      	bhi.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001cde:	b39b      	cbz	r3, 8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce4:	d036      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8001ce6:	2601      	movs	r6, #1
 8001ce8:	4635      	mov	r5, r6
 8001cea:	e022      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cec:	4a4d      	ldr	r2, [pc, #308]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001cf6:	e7e0      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	1d20      	adds	r0, r4, #4
 8001cfc:	f7ff fe4e 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d00:	4605      	mov	r5, r0
      break;
 8001d02:	e7da      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d04:	2100      	movs	r1, #0
 8001d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d0a:	f7ff febf 	bl	8001a8c <RCCEx_PLL3_Config>
 8001d0e:	e7f7      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8001d10:	462e      	mov	r6, r5
 8001d12:	e7db      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001d14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d18:	d002      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d1e:	d1e2      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8001d20:	bb25      	cbnz	r5, 8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d24:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001d28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	d527      	bpl.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8001d38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d033      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001d3e:	d817      	bhi.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001d40:	b1d3      	cbz	r3, 8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8001d42:	2601      	movs	r6, #1
 8001d44:	4635      	mov	r5, r6
 8001d46:	e01f      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d48:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d52:	e7e5      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d54:	2100      	movs	r1, #0
 8001d56:	1d20      	adds	r0, r4, #4
 8001d58:	f7ff fe20 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d5c:	4605      	mov	r5, r0
      break;
 8001d5e:	e7df      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d60:	2100      	movs	r1, #0
 8001d62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d66:	f7ff fe91 	bl	8001a8c <RCCEx_PLL3_Config>
 8001d6a:	e7f7      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001d6c:	462e      	mov	r6, r5
 8001d6e:	e7e0      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d01e      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001d74:	2b30      	cmp	r3, #48	; 0x30
 8001d76:	d1e4      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8001d78:	bb0d      	cbnz	r5, 8001dbe <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001d7a:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d7e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d80:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d84:	430b      	orrs	r3, r1
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	04df      	lsls	r7, r3, #19
 8001d8c:	d527      	bpl.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d03e      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001d96:	d814      	bhi.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001d98:	b383      	cbz	r3, 8001dfc <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9e:	d033      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8001da0:	2601      	movs	r6, #1
 8001da2:	4635      	mov	r5, r6
 8001da4:	e01b      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001da8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dae:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001db0:	e7e2      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001db2:	2102      	movs	r1, #2
 8001db4:	1d20      	adds	r0, r4, #4
 8001db6:	f7ff fdf1 	bl	800199c <RCCEx_PLL2_Config>
 8001dba:	4605      	mov	r5, r0
      break;
 8001dbc:	e7dc      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001dbe:	462e      	mov	r6, r5
 8001dc0:	e7e2      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dc6:	d002      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dcc:	d1e8      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8001dce:	bb3d      	cbnz	r5, 8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001dd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001dd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	0498      	lsls	r0, r3, #18
 8001de2:	d532      	bpl.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001de4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dea:	d044      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8001dec:	d81c      	bhi.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001dee:	b323      	cbz	r3, 8001e3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d039      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8001df6:	2601      	movs	r6, #1
 8001df8:	4635      	mov	r5, r6
 8001dfa:	e026      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfc:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001dfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001e06:	e7e2      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	1d20      	adds	r0, r4, #4
 8001e0c:	f7ff fdc6 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e10:	4605      	mov	r5, r0
      break;
 8001e12:	e7dc      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e14:	2100      	movs	r1, #0
 8001e16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e1a:	f7ff fe37 	bl	8001a8c <RCCEx_PLL3_Config>
 8001e1e:	e7f7      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001e20:	462e      	mov	r6, r5
 8001e22:	e7dc      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x262>
 8001e24:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e32:	d002      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e38:	d1dd      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 8001e3a:	bb15      	cbnz	r5, 8001e82 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001e3c:	4aa0      	ldr	r2, [pc, #640]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001e3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001e40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e42:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001e46:	430b      	orrs	r3, r1
 8001e48:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	0459      	lsls	r1, r3, #17
 8001e4e:	d52d      	bpl.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e50:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e58:	d04b      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001e5a:	d814      	bhi.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001e5c:	b1e3      	cbz	r3, 8001e98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e62:	d040      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8001e64:	2601      	movs	r6, #1
 8001e66:	4635      	mov	r5, r6
 8001e68:	e020      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	1d20      	adds	r0, r4, #4
 8001e6e:	f7ff fd95 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e72:	4605      	mov	r5, r0
      break;
 8001e74:	e7e1      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e76:	2101      	movs	r1, #1
 8001e78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e7c:	f7ff fe06 	bl	8001a8c <RCCEx_PLL3_Config>
 8001e80:	e7f7      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8001e82:	462e      	mov	r6, r5
 8001e84:	e7e1      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e90:	d002      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e96:	d1e5      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8001e98:	2d00      	cmp	r5, #0
 8001e9a:	d130      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001e9c:	4a88      	ldr	r2, [pc, #544]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001e9e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8001ea2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ea4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	041a      	lsls	r2, r3, #16
 8001eb0:	d50f      	bpl.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8001eb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ebe:	d026      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001ec0:	bb5b      	cbnz	r3, 8001f1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8001ec2:	bb6d      	cbnz	r5, 8001f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ec4:	4a7e      	ldr	r2, [pc, #504]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001ec6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001ec8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001eca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	d533      	bpl.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8001ed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d87d      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8001ede:	e8df f003 	tbb	[pc, r3]
 8001ee2:	2126      	.short	0x2126
 8001ee4:	2676      	.short	0x2676
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	1d20      	adds	r0, r4, #4
 8001eea:	f7ff fd57 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001eee:	4605      	mov	r5, r0
      break;
 8001ef0:	e7d2      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ef8:	f7ff fdc8 	bl	8001a8c <RCCEx_PLL3_Config>
 8001efc:	e7f7      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001efe:	462e      	mov	r6, r5
 8001f00:	e7d4      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f02:	4a6f      	ldr	r2, [pc, #444]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f0c:	e7d9      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	1d20      	adds	r0, r4, #4
 8001f12:	f7ff fd43 	bl	800199c <RCCEx_PLL2_Config>
 8001f16:	4605      	mov	r5, r0
      break;
 8001f18:	e7d3      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8001f1a:	2601      	movs	r6, #1
 8001f1c:	4635      	mov	r5, r6
 8001f1e:	e7d8      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001f20:	462e      	mov	r6, r5
 8001f22:	e7d6      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f24:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	d156      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001f32:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001f36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001f38:	f023 0303 	bic.w	r3, r3, #3
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	025f      	lsls	r7, r3, #9
 8001f44:	d556      	bpl.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f46:	4f5f      	ldr	r7, [pc, #380]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001f50:	f7fe fbb2 	bl	80006b8 <HAL_GetTick>
 8001f54:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	05d8      	lsls	r0, r3, #23
 8001f5a:	d543      	bpl.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    if(ret == HAL_OK)
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	d161      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f68:	4042      	eors	r2, r0
 8001f6a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001f6e:	d00b      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001f7c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001f84:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001f86:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001f88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x424>
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fb93 	bl	80006b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f92:	4f4b      	ldr	r7, [pc, #300]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8001f94:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f9c:	0799      	lsls	r1, r3, #30
 8001f9e:	d536      	bpl.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001fa4:	4946      	ldr	r1, [pc, #280]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001fa6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001faa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001fae:	d135      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8001fb0:	6908      	ldr	r0, [r1, #16]
 8001fb2:	4a45      	ldr	r2, [pc, #276]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8001fb4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001fb8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001fbc:	4302      	orrs	r2, r0
 8001fbe:	610a      	str	r2, [r1, #16]
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001fc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	e012      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001fce:	2102      	movs	r1, #2
 8001fd0:	1d20      	adds	r0, r4, #4
 8001fd2:	f7ff fce3 	bl	800199c <RCCEx_PLL2_Config>
 8001fd6:	4605      	mov	r5, r0
      break;
 8001fd8:	e7a9      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8001fda:	2601      	movs	r6, #1
 8001fdc:	4635      	mov	r5, r6
 8001fde:	e7af      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001fe0:	462e      	mov	r6, r5
 8001fe2:	e7ad      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7fe fb68 	bl	80006b8 <HAL_GetTick>
 8001fe8:	eba0 0008 	sub.w	r0, r0, r8
 8001fec:	2864      	cmp	r0, #100	; 0x64
 8001fee:	d9b2      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8001ff0:	2603      	movs	r6, #3
 8001ff2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	07da      	lsls	r2, r3, #31
 8001ff8:	d524      	bpl.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001ffa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d032      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8002000:	d812      	bhi.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002002:	b1bb      	cbz	r3, 8002034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002004:	2b08      	cmp	r3, #8
 8002006:	d028      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8002008:	2601      	movs	r6, #1
 800200a:	4635      	mov	r5, r6
 800200c:	e01a      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fb53 	bl	80006b8 <HAL_GetTick>
 8002012:	eba0 0008 	sub.w	r0, r0, r8
 8002016:	4548      	cmp	r0, r9
 8002018:	d9bf      	bls.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800201a:	e7e9      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201c:	690a      	ldr	r2, [r1, #16]
 800201e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002022:	e7cc      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002024:	462e      	mov	r6, r5
 8002026:	e7e5      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002028:	2b20      	cmp	r3, #32
 800202a:	d003      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800202c:	2b28      	cmp	r3, #40	; 0x28
 800202e:	d001      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002030:	2b18      	cmp	r3, #24
 8002032:	d1e9      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    if(ret == HAL_OK)
 8002034:	b9ed      	cbnz	r5, 8002072 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002038:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800203a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800203c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002040:	430b      	orrs	r3, r1
 8002042:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	079b      	lsls	r3, r3, #30
 8002048:	d522      	bpl.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800204a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800204c:	2b05      	cmp	r3, #5
 800204e:	d831      	bhi.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002050:	e8df f003 	tbb	[pc, r3]
 8002054:	162a1116 	.word	0x162a1116
 8002058:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800205a:	2101      	movs	r1, #1
 800205c:	1d20      	adds	r0, r4, #4
 800205e:	f7ff fc9d 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002062:	4605      	mov	r5, r0
      break;
 8002064:	e7e6      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002066:	2101      	movs	r1, #1
 8002068:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800206c:	f7ff fd0e 	bl	8001a8c <RCCEx_PLL3_Config>
 8002070:	e7f7      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002072:	462e      	mov	r6, r5
 8002074:	e7e6      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002076:	2101      	movs	r1, #1
 8002078:	1d20      	adds	r0, r4, #4
 800207a:	f7ff fc8f 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800207e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002080:	b9dd      	cbnz	r5, 80020ba <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002082:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002084:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002086:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002088:	f023 0307 	bic.w	r3, r3, #7
 800208c:	430b      	orrs	r3, r1
 800208e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	075f      	lsls	r7, r3, #29
 8002094:	d528      	bpl.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002096:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800209a:	2b05      	cmp	r3, #5
 800209c:	d83a      	bhi.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800209e:	e8df f003 	tbb	[pc, r3]
 80020a2:	151a      	.short	0x151a
 80020a4:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020a8:	2101      	movs	r1, #1
 80020aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020ae:	f7ff fced 	bl	8001a8c <RCCEx_PLL3_Config>
 80020b2:	e7e4      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 80020b4:	2601      	movs	r6, #1
 80020b6:	4635      	mov	r5, r6
 80020b8:	e7ea      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80020ba:	462e      	mov	r6, r5
 80020bc:	e7e8      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80020be:	bf00      	nop
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58024800 	.word	0x58024800
 80020c8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020cc:	2101      	movs	r1, #1
 80020ce:	1d20      	adds	r0, r4, #4
 80020d0:	f7ff fc64 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020d6:	bb05      	cbnz	r5, 800211a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d8:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80020da:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80020de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020e0:	f023 0307 	bic.w	r3, r3, #7
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	0698      	lsls	r0, r3, #26
 80020ec:	d529      	bpl.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80020ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80020f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f6:	d03a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80020f8:	d811      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80020fa:	b1cb      	cbz	r3, 8002130 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80020fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002100:	d02f      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8002102:	2601      	movs	r6, #1
 8002104:	4635      	mov	r5, r6
 8002106:	e01c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002108:	2101      	movs	r1, #1
 800210a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800210e:	f7ff fcbd 	bl	8001a8c <RCCEx_PLL3_Config>
 8002112:	e7df      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8002114:	2601      	movs	r6, #1
 8002116:	4635      	mov	r5, r6
 8002118:	e7e6      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800211a:	462e      	mov	r6, r5
 800211c:	e7e4      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d005      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002128:	d002      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800212a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800212e:	d1e8      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8002130:	bb1d      	cbnz	r5, 800217a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002132:	4a82      	ldr	r2, [pc, #520]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002134:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002138:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800213a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800213e:	430b      	orrs	r3, r1
 8002140:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	0659      	lsls	r1, r3, #25
 8002146:	d52c      	bpl.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002148:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800214c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002150:	d03f      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8002152:	d814      	bhi.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8002154:	b1e3      	cbz	r3, 8002190 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215a:	d034      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 800215c:	2601      	movs	r6, #1
 800215e:	4635      	mov	r5, r6
 8002160:	e01f      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002162:	2100      	movs	r1, #0
 8002164:	1d20      	adds	r0, r4, #4
 8002166:	f7ff fc19 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800216a:	4605      	mov	r5, r0
      break;
 800216c:	e7e0      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800216e:	2102      	movs	r1, #2
 8002170:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002174:	f7ff fc8a 	bl	8001a8c <RCCEx_PLL3_Config>
 8002178:	e7f7      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800217a:	462e      	mov	r6, r5
 800217c:	e7e1      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	d005      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002184:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002188:	d002      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800218a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800218e:	d1e5      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 8002190:	bb2d      	cbnz	r5, 80021de <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002192:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002194:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002198:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800219a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800219e:	430b      	orrs	r3, r1
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	061a      	lsls	r2, r3, #24
 80021a6:	d530      	bpl.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80021a8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80021ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b0:	f000 80a4 	beq.w	80022fc <HAL_RCCEx_PeriphCLKConfig+0x780>
 80021b4:	d815      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 80021b6:	b1eb      	cbz	r3, 80021f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80021b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021bc:	f000 8098 	beq.w	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 80021c0:	2601      	movs	r6, #1
 80021c2:	4635      	mov	r5, r6
 80021c4:	e021      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021c6:	2100      	movs	r1, #0
 80021c8:	1d20      	adds	r0, r4, #4
 80021ca:	f7ff fbe7 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021ce:	4605      	mov	r5, r0
      break;
 80021d0:	e7de      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021d2:	2102      	movs	r1, #2
 80021d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021d8:	f7ff fc58 	bl	8001a8c <RCCEx_PLL3_Config>
 80021dc:	e7f7      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x652>
 80021de:	462e      	mov	r6, r5
 80021e0:	e7df      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	d005      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80021e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80021ec:	d002      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80021ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80021f2:	d1e5      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 80021f4:	2d00      	cmp	r5, #0
 80021f6:	f040 8087 	bne.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80021fa:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80021fc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002200:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002202:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002206:	430b      	orrs	r3, r1
 8002208:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	d514      	bpl.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002210:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002218:	d107      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800221a:	2102      	movs	r1, #2
 800221c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002220:	f7ff fc34 	bl	8001a8c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002224:	2800      	cmp	r0, #0
 8002226:	bf18      	it	ne
 8002228:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800222a:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800222c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002230:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002236:	430b      	orrs	r3, r1
 8002238:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	06df      	lsls	r7, r3, #27
 800223e:	d514      	bpl.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002240:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002248:	d107      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800224a:	2102      	movs	r1, #2
 800224c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002250:	f7ff fc1c 	bl	8001a8c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8002254:	2800      	cmp	r0, #0
 8002256:	bf18      	it	ne
 8002258:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800225c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002260:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002266:	430b      	orrs	r3, r1
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	0318      	lsls	r0, r3, #12
 800226e:	d517      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 8002270:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002274:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002278:	d048      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x790>
 800227a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800227e:	d005      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002280:	2900      	cmp	r1, #0
 8002282:	d149      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002284:	1d20      	adds	r0, r4, #4
 8002286:	f7ff fb89 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800228a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800228c:	2d00      	cmp	r5, #0
 800228e:	d146      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002290:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002292:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002296:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002298:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800229c:	430b      	orrs	r3, r1
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	0359      	lsls	r1, r3, #13
 80022a4:	d518      	bpl.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 80022a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80022aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ae:	d038      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80022b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022b4:	d007      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80022b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ba:	d139      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80022be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80022c6:	bbb5      	cbnz	r5, 8002336 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80022ca:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80022ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	03da      	lsls	r2, r3, #15
 80022dc:	d53e      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80022de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022e0:	b373      	cbz	r3, 8002340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	f000 8082 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = HAL_ERROR;
 80022ea:	2601      	movs	r6, #1
 80022ec:	4635      	mov	r5, r6
 80022ee:	e035      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022f0:	2100      	movs	r1, #0
 80022f2:	1d20      	adds	r0, r4, #4
 80022f4:	f7ff fb52 	bl	800199c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022f8:	4605      	mov	r5, r0
      break;
 80022fa:	e77b      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022fc:	2102      	movs	r1, #2
 80022fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002302:	f7ff fbc3 	bl	8001a8c <RCCEx_PLL3_Config>
 8002306:	e7f7      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002308:	462e      	mov	r6, r5
 800230a:	e77e      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800230c:	2102      	movs	r1, #2
 800230e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002312:	f7ff fbbb 	bl	8001a8c <RCCEx_PLL3_Config>
 8002316:	e7b8      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8002318:	2601      	movs	r6, #1
 800231a:	4635      	mov	r5, r6
 800231c:	e7c0      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
 800231e:	462e      	mov	r6, r5
 8002320:	e7be      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002322:	2101      	movs	r1, #1
 8002324:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002328:	f7ff fbb0 	bl	8001a8c <RCCEx_PLL3_Config>
 800232c:	4605      	mov	r5, r0
      break;
 800232e:	e7ca      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8002330:	2601      	movs	r6, #1
 8002332:	4635      	mov	r5, r6
 8002334:	e7d0      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002336:	462e      	mov	r6, r5
 8002338:	e7ce      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800233a:	bf00      	nop
 800233c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002340:	4a37      	ldr	r2, [pc, #220]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002342:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800234a:	2d00      	cmp	r5, #0
 800234c:	d155      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800234e:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002350:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002352:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002358:	430b      	orrs	r3, r1
 800235a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	d507      	bpl.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002362:	2102      	movs	r1, #2
 8002364:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002368:	f7ff fb90 	bl	8001a8c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800236c:	2800      	cmp	r0, #0
 800236e:	bf18      	it	ne
 8002370:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	039f      	lsls	r7, r3, #14
 8002376:	d50e      	bpl.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8002378:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800237a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800237e:	d046      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8002380:	d83d      	bhi.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x882>
 8002382:	2900      	cmp	r1, #0
 8002384:	d141      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    if(ret == HAL_OK)
 8002386:	2d00      	cmp	r5, #0
 8002388:	d147      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800238a:	4825      	ldr	r0, [pc, #148]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800238c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800238e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002392:	430a      	orrs	r2, r1
 8002394:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002396:	02d8      	lsls	r0, r3, #11
 8002398:	d506      	bpl.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800239a:	4921      	ldr	r1, [pc, #132]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800239c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800239e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80023a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a4:	4302      	orrs	r2, r0
 80023a6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a8:	0299      	lsls	r1, r3, #10
 80023aa:	d506      	bpl.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ac:	491c      	ldr	r1, [pc, #112]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80023ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80023b0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80023b2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80023b6:	4302      	orrs	r2, r0
 80023b8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80023ba:	005a      	lsls	r2, r3, #1
 80023bc:	d509      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80023c6:	6111      	str	r1, [r2, #16]
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80023ce:	4301      	orrs	r1, r0
 80023d0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da06      	bge.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80023d8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80023da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023e0:	430b      	orrs	r3, r1
 80023e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e4:	1c30      	adds	r0, r6, #0
 80023e6:	bf18      	it	ne
 80023e8:	2001      	movne	r0, #1
}
 80023ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023ee:	2102      	movs	r1, #2
 80023f0:	1d20      	adds	r0, r4, #4
 80023f2:	f7ff fad3 	bl	800199c <RCCEx_PLL2_Config>
 80023f6:	4605      	mov	r5, r0
      break;
 80023f8:	e7a7      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80023fa:	462e      	mov	r6, r5
 80023fc:	e7ae      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 80023fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002402:	d0c0      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002404:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002408:	d0bd      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800240a:	2601      	movs	r6, #1
 800240c:	e7c3      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800240e:	4804      	ldr	r0, [pc, #16]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002410:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002412:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002416:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002418:	e7b5      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800241a:	462e      	mov	r6, r5
 800241c:	e7bb      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400

08002424 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002424:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002426:	f7ff fa73 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	f003 031f 	and.w	r3, r3, #31
}
 800243a:	40d8      	lsrs	r0, r3
 800243c:	bd08      	pop	{r3, pc}
 800243e:	bf00      	nop
 8002440:	58024400 	.word	0x58024400
 8002444:	08007308 	.word	0x08007308

08002448 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002448:	494e      	ldr	r1, [pc, #312]	; (8002584 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800244a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800244c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800244e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002450:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002452:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002456:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 808e 	beq.w	800257a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800245e:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002462:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002466:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002588 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 800246a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800246e:	436a      	muls	r2, r5
 8002470:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002474:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002478:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 800247c:	2a01      	cmp	r2, #1
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002486:	d002      	beq.n	800248e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002488:	d30f      	bcc.n	80024aa <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 800248a:	2a02      	cmp	r2, #2
 800248c:	d067      	beq.n	800255e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800248e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249c:	eee6 7a05 	vfma.f32	s15, s12, s10
 80024a0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800258c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80024a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80024a8:	e056      	b.n	8002558 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024aa:	680b      	ldr	r3, [r1, #0]
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	d546      	bpl.n	800253e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024b0:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024b2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024b4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80024b8:	4a35      	ldr	r2, [pc, #212]	; (8002590 <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024be:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024c0:	ee07 2a90 	vmov	s15, r2
 80024c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80024d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024de:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80024e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80024e8:	ee07 3a10 	vmov	s14, r3
 80024ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80024f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024f8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80024fc:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002500:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002502:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002506:	ee07 3a10 	vmov	s14, r3
 800250a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800250e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002512:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002516:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800251a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800251e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002520:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002524:	ee07 3a10 	vmov	s14, r3
 8002528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800252c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002530:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002534:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002538:	ed80 7a02 	vstr	s14, [r0, #8]
 800253c:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800253e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002550:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002594 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002554:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002558:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800255c:	e7be      	b.n	80024dc <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800255e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002570:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002598 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002574:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002578:	e7ee      	b.n	8002558 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800257a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800257c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800257e:	6083      	str	r3, [r0, #8]
 8002580:	bd30      	pop	{r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	58024400 	.word	0x58024400
 8002588:	39000000 	.word	0x39000000
 800258c:	4a742400 	.word	0x4a742400
 8002590:	03d09000 	.word	0x03d09000
 8002594:	4c742400 	.word	0x4c742400
 8002598:	4af42400 	.word	0x4af42400

0800259c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800259c:	494e      	ldr	r1, [pc, #312]	; (80026d8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 800259e:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80025a2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80025a4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80025a6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025aa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 808e 	beq.w	80026ce <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80025b2:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025b6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80025ba:	ed9f 5a48 	vldr	s10, [pc, #288]	; 80026dc <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 80025be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80025c2:	436a      	muls	r2, r5
 80025c4:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025c8:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 80025d0:	2a01      	cmp	r2, #1
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025da:	d002      	beq.n	80025e2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80025dc:	d30f      	bcc.n	80025fe <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 80025de:	2a02      	cmp	r2, #2
 80025e0:	d067      	beq.n	80026b2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80025f4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80026e0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80025f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80025fc:	e056      	b.n	80026ac <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025fe:	680b      	ldr	r3, [r1, #0]
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	d546      	bpl.n	8002692 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002604:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002606:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002608:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800260c:	4a35      	ldr	r2, [pc, #212]	; (80026e4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002612:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002614:	ee07 2a90 	vmov	s15, r2
 8002618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002628:	eee6 7a05 	vfma.f32	s15, s12, s10
 800262c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002630:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002636:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002638:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800263c:	ee07 3a10 	vmov	s14, r3
 8002640:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002644:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002648:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800264c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002650:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002654:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002656:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800265a:	ee07 3a10 	vmov	s14, r3
 800265e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002662:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002666:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800266a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800266e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002672:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002674:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002678:	ee07 3a10 	vmov	s14, r3
 800267c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002680:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002684:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002688:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800268c:	ed80 7a02 	vstr	s14, [r0, #8]
 8002690:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002692:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80026a4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80026e8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80026a8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80026b0:	e7be      	b.n	8002630 <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80026c4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80026ec <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80026c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80026cc:	e7ee      	b.n	80026ac <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80026ce:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80026d0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80026d2:	6083      	str	r3, [r0, #8]
 80026d4:	bd30      	pop	{r4, r5, pc}
 80026d6:	bf00      	nop
 80026d8:	58024400 	.word	0x58024400
 80026dc:	39000000 	.word	0x39000000
 80026e0:	4a742400 	.word	0x4a742400
 80026e4:	03d09000 	.word	0x03d09000
 80026e8:	4c742400 	.word	0x4c742400
 80026ec:	4af42400 	.word	0x4af42400

080026f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026f0:	494e      	ldr	r1, [pc, #312]	; (800282c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 80026f2:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80026f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80026f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80026fa:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026fe:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 808e 	beq.w	8002822 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002706:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800270a:	f002 0201 	and.w	r2, r2, #1
 800270e:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002830 <HAL_RCCEx_GetPLL1ClockFreq+0x140>
 8002712:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002716:	436a      	muls	r2, r5
 8002718:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800271c:	f004 0203 	and.w	r2, r4, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002720:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 8002724:	2a01      	cmp	r2, #1
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800272e:	d002      	beq.n	8002736 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8002730:	d30f      	bcc.n	8002752 <HAL_RCCEx_GetPLL1ClockFreq+0x62>
 8002732:	2a02      	cmp	r2, #2
 8002734:	d067      	beq.n	8002806 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002736:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002748:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8002834 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800274c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002750:	e056      	b.n	8002800 <HAL_RCCEx_GetPLL1ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002752:	680b      	ldr	r3, [r1, #0]
 8002754:	069b      	lsls	r3, r3, #26
 8002756:	d546      	bpl.n	80027e6 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002758:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800275a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800275c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002760:	4a35      	ldr	r2, [pc, #212]	; (8002838 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002766:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002768:	ee07 2a90 	vmov	s15, r2
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002780:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002784:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002786:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800278a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800278c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002790:	ee07 3a10 	vmov	s14, r3
 8002794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002798:	ee37 7a25 	vadd.f32	s14, s14, s11
 800279c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027a4:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80027a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027aa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80027ae:	ee07 3a10 	vmov	s14, r3
 80027b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027b6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80027ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80027c2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80027c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80027cc:	ee07 3a10 	vmov	s14, r3
 80027d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027d4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80027d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80027dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80027e0:	ed80 7a02 	vstr	s14, [r0, #8]
 80027e4:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80027e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80027f8:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800283c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80027fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002800:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002804:	e7be      	b.n	8002784 <HAL_RCCEx_GetPLL1ClockFreq+0x94>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002806:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002818:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002840 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800281c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002820:	e7ee      	b.n	8002800 <HAL_RCCEx_GetPLL1ClockFreq+0x110>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8002822:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002824:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8002826:	6083      	str	r3, [r0, #8]
 8002828:	bd30      	pop	{r4, r5, pc}
 800282a:	bf00      	nop
 800282c:	58024400 	.word	0x58024400
 8002830:	39000000 	.word	0x39000000
 8002834:	4a742400 	.word	0x4a742400
 8002838:	03d09000 	.word	0x03d09000
 800283c:	4c742400 	.word	0x4c742400
 8002840:	4af42400 	.word	0x4af42400

08002844 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002844:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8002848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800284a:	d119      	bne.n	8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800284e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002850:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 8002854:	2a04      	cmp	r2, #4
 8002856:	d821      	bhi.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8002858:	e8df f002 	tbb	[pc, r2]
 800285c:	c96d809a 	.word	0xc96d809a
 8002860:	03          	.byte	0x03
 8002861:	00          	.byte	0x00
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002864:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8002868:	f000 80b6 	beq.w	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800286c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002870:	f000 80bf 	beq.w	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 8002874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002878:	4860      	ldr	r0, [pc, #384]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800287a:	bf18      	it	ne
 800287c:	2000      	movne	r0, #0
 800287e:	e071      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002880:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002884:	d114      	bne.n	80028b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002888:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800288a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d051      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002892:	d805      	bhi.n	80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d07b      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002898:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 800289a:	d05f      	beq.n	800295c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
      frequency = 0;
 800289c:	2000      	movs	r0, #0
 800289e:	e061      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      switch (saiclocksource)
 80028a0:	2bc0      	cmp	r3, #192	; 0xc0
 80028a2:	f000 80a4 	beq.w	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 80028aa:	d1f7      	bne.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80028ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80028ae:	e7d9      	b.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80028b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80028b4:	d113      	bne.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80028b6:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80028b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c2:	d038      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80028c4:	d804      	bhi.n	80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d062      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80028ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ce:	e7e4      	b.n	800289a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80028d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028d4:	f000 808b 	beq.w	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80028d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028dc:	e7e5      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80028de:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80028e2:	d112      	bne.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80028e4:	4a44      	ldr	r2, [pc, #272]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80028e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028e8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80028ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f0:	d021      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80028f2:	d804      	bhi.n	80028fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04b      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	e7cd      	b.n	800289a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80028fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002902:	d074      	beq.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8002904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002908:	e7cf      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800290a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800290e:	d116      	bne.n	800293e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002910:	4a39      	ldr	r2, [pc, #228]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002912:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002914:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8002918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291c:	d00b      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800291e:	d804      	bhi.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d035      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	e7b7      	b.n	800289a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800292a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800292e:	d05e      	beq.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002934:	e7b9      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002936:	a801      	add	r0, sp, #4
 8002938:	f7ff fe30 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
 800293c:	e011      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800293e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002942:	d117      	bne.n	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002946:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d00b      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002956:	d0a9      	beq.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d19f      	bne.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800295c:	a801      	add	r0, sp, #4
 800295e:	f7ff fd73 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002962:	9801      	ldr	r0, [sp, #4]
}
 8002964:	b005      	add	sp, #20
 8002966:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800296a:	a801      	add	r0, sp, #4
 800296c:	f7ff fe16 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002970:	9803      	ldr	r0, [sp, #12]
          break;
 8002972:	e7f7      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002974:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002978:	d10f      	bne.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800297e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8002982:	d005      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d089      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002988:	a801      	add	r0, sp, #4
 800298a:	f7ff fd5d 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
 800298e:	e7ef      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002990:	a801      	add	r0, sp, #4
 8002992:	f7ff fead 	bl	80026f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8002996:	9802      	ldr	r0, [sp, #8]
          break;
 8002998:	e7e4      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800299a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800299e:	f47f af7d 	bne.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80029aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ae:	d018      	beq.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80029b0:	d808      	bhi.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 80029b2:	b19b      	cbz	r3, 80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80029b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b8:	f47f af70 	bne.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80029bc:	a801      	add	r0, sp, #4
 80029be:	f7ff fd43 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
 80029c2:	e7e8      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      switch (srcclk)
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d013      	beq.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80029ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ce:	d00c      	beq.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80029d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029d4:	f47f af62 	bne.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = HSI_VALUE;
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
  return frequency;
 80029da:	e7c3      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80029dc:	f7ff fd22 	bl	8002424 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80029e0:	e7c0      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80029e2:	a801      	add	r0, sp, #4
 80029e4:	f7ff fdda 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
 80029e8:	e7d5      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
          frequency = HSE_VALUE;
 80029ea:	4804      	ldr	r0, [pc, #16]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 80029ec:	e7ba      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          frequency = EXTERNAL_CLOCK_VALUE;
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80029f0:	e7b8      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
            frequency = CSI_VALUE;
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80029f4:	e7b6      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80029f6:	bf00      	nop
 80029f8:	58024400 	.word	0x58024400
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	03d09000 	.word	0x03d09000
 8002a04:	00bb8000 	.word	0x00bb8000
 8002a08:	003d0900 	.word	0x003d0900

08002a0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a10:	4606      	mov	r6, r0
 8002a12:	b087      	sub	sp, #28
 8002a14:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a16:	f7fd fe4f 	bl	80006b8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002a1a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002a1e:	6830      	ldr	r0, [r6, #0]
 8002a20:	f002 fa8a 	bl	8004f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a24:	4604      	mov	r4, r0
 8002a26:	bb40      	cbnz	r0, 8002a7a <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002a28:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8002a2a:	6830      	ldr	r0, [r6, #0]
 8002a2c:	0409      	lsls	r1, r1, #16
 8002a2e:	f002 fbaf 	bl	8005190 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a32:	4604      	mov	r4, r0
 8002a34:	bb08      	cbnz	r0, 8002a7a <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	2302      	movs	r3, #2
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002a40:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002a42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a46:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002a48:	4669      	mov	r1, sp
 8002a4a:	6830      	ldr	r0, [r6, #0]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002a4e:	f002 fa60 	bl	8004f12 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002a52:	6830      	ldr	r0, [r6, #0]
 8002a54:	f002 fbcb 	bl	80051ee <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a58:	4604      	mov	r4, r0
 8002a5a:	b970      	cbnz	r0, 8002a7a <SD_FindSCR+0x6e>
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	4607      	mov	r7, r0
 8002a60:	4683      	mov	fp, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8002a62:	f240 592a 	movw	r9, #1322	; 0x52a
 8002a66:	6830      	ldr	r0, [r6, #0]
 8002a68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a6a:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002a6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8002a70:	d007      	beq.n	8002a82 <SD_FindSCR+0x76>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002a72:	0719      	lsls	r1, r3, #28
 8002a74:	d51c      	bpl.n	8002ab0 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8002a76:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8002a78:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	b007      	add	sp, #28
 8002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002a82:	031b      	lsls	r3, r3, #12
 8002a84:	d40b      	bmi.n	8002a9e <SD_FindSCR+0x92>
 8002a86:	f1bb 0f00 	cmp.w	fp, #0
 8002a8a:	d108      	bne.n	8002a9e <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8002a8c:	f002 fa18 	bl	8004ec0 <SDMMC_ReadFIFO>
 8002a90:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8002a92:	6830      	ldr	r0, [r6, #0]
      index++;
 8002a94:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8002a98:	f002 fa12 	bl	8004ec0 <SDMMC_ReadFIFO>
 8002a9c:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002a9e:	f7fd fe0b 	bl	80006b8 <HAL_GetTick>
 8002aa2:	eba0 000a 	sub.w	r0, r0, sl
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d1dd      	bne.n	8002a66 <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8002aaa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002aae:	e7e4      	b.n	8002a7a <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ab2:	079a      	lsls	r2, r3, #30
 8002ab4:	d501      	bpl.n	8002aba <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8002ab6:	2402      	movs	r4, #2
 8002ab8:	e7de      	b.n	8002a78 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	d501      	bpl.n	8002ac4 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8002ac0:	2420      	movs	r4, #32
 8002ac2:	e7d9      	b.n	8002a78 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SD_FindSCR+0xcc>)
 8002ac6:	ba2d      	rev	r5, r5
 8002ac8:	ba3f      	rev	r7, r7
 8002aca:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002acc:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002ad0:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 8002ad4:	e7d1      	b.n	8002a7a <SD_FindSCR+0x6e>
 8002ad6:	bf00      	nop
 8002ad8:	18000f3a 	.word	0x18000f3a

08002adc <HAL_SD_ReadBlocks>:
{
 8002adc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002ae0:	460f      	mov	r7, r1
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	4616      	mov	r6, r2
 8002ae8:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8002aea:	f7fd fde5 	bl	80006b8 <HAL_GetTick>
 8002aee:	4681      	mov	r9, r0
  if(NULL == pData)
 8002af0:	b92f      	cbnz	r7, 8002afe <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002af8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
 8002afc:	e010      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8002afe:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002b02:	b2c0      	uxtb	r0, r0
 8002b04:	2801      	cmp	r0, #1
 8002b06:	f040 80bd 	bne.w	8002c84 <HAL_SD_ReadBlocks+0x1a8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b0a:	eb06 0308 	add.w	r3, r6, r8
 8002b0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b10:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b12:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b14:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b16:	d906      	bls.n	8002b26 <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002b20:	b006      	add	sp, #24
 8002b22:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002b26:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8002b28:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002b2a:	2502      	movs	r5, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8002b2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8002b32:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002b34:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002b36:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002b3c:	9503      	str	r5, [sp, #12]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b3e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002b40:	ea4f 2348 	mov.w	r3, r8, lsl #9
      add *= 512U;
 8002b44:	bf18      	it	ne
 8002b46:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002b48:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002b4a:	2390      	movs	r3, #144	; 0x90
 8002b4c:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002b52:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002b54:	f002 f9dd 	bl	8004f12 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8002b58:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8002b5a:	f1b8 0f01 	cmp.w	r8, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8002b5e:	68c3      	ldr	r3, [r0, #12]
 8002b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b64:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8002b66:	d910      	bls.n	8002b8a <HAL_SD_ReadBlocks+0xae>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002b68:	6325      	str	r5, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002b6a:	4631      	mov	r1, r6
 8002b6c:	f002 fa16 	bl	8004f9c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b70:	b188      	cbz	r0, 8002b96 <HAL_SD_ReadBlocks+0xba>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	4a45      	ldr	r2, [pc, #276]	; (8002c8c <HAL_SD_ReadBlocks+0x1b0>)
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b7a:	4318      	orrs	r0, r3
 8002b7c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b7e:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002b80:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8002b82:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b86:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002b88:	e7ca      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b8a:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b8c:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b8e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b90:	f002 f9eb 	bl	8004f6a <SDMMC_CmdReadSingleBlock>
 8002b94:	e7ec      	b.n	8002b70 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 8002b96:	9d01      	ldr	r5, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b9c:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8002ba0:	d01c      	beq.n	8002bdc <HAL_SD_ReadBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8002ba2:	68c3      	ldr	r3, [r0, #12]
 8002ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba8:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002baa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	d509      	bpl.n	8002bc4 <HAL_SD_ReadBlocks+0xe8>
 8002bb0:	f1b8 0f01 	cmp.w	r8, #1
 8002bb4:	d906      	bls.n	8002bc4 <HAL_SD_ReadBlocks+0xe8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002bb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <HAL_SD_ReadBlocks+0xe8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002bbc:	f002 fa3a 	bl	8005034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d1d6      	bne.n	8002b72 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc8:	f011 0108 	ands.w	r1, r1, #8
 8002bcc:	d036      	beq.n	8002c3c <HAL_SD_ReadBlocks+0x160>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bce:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <HAL_SD_ReadBlocks+0x1b0>)
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002bda:	e7d0      	b.n	8002b7e <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8002bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	d517      	bpl.n	8002c12 <HAL_SD_ReadBlocks+0x136>
 8002be2:	2d1f      	cmp	r5, #31
 8002be4:	d915      	bls.n	8002c12 <HAL_SD_ReadBlocks+0x136>
 8002be6:	1d3e      	adds	r6, r7, #4
 8002be8:	f107 0b24 	add.w	fp, r7, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	3604      	adds	r6, #4
 8002bf0:	f002 f966 	bl	8004ec0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002bf4:	f806 0c08 	strb.w	r0, [r6, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bf8:	0a03      	lsrs	r3, r0, #8
 8002bfa:	f806 3c07 	strb.w	r3, [r6, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002bfe:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002c00:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002c02:	f806 3c06 	strb.w	r3, [r6, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002c06:	f806 0c05 	strb.w	r0, [r6, #-5]
        for(count = 0U; count < 8U; count++)
 8002c0a:	45b3      	cmp	fp, r6
 8002c0c:	d1ee      	bne.n	8002bec <HAL_SD_ReadBlocks+0x110>
 8002c0e:	3720      	adds	r7, #32
        dataremaining -= 32U;
 8002c10:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c12:	f7fd fd51 	bl	80006b8 <HAL_GetTick>
 8002c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c18:	eba0 0009 	sub.w	r0, r0, r9
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d3bb      	bcc.n	8002b98 <HAL_SD_ReadBlocks+0xbc>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c20:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_SD_ReadBlocks+0x1b0>)
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002c3a:	e771      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3e:	f012 0202 	ands.w	r2, r2, #2
 8002c42:	d00a      	beq.n	8002c5a <HAL_SD_ReadBlocks+0x17e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_SD_ReadBlocks+0x1b0>)
      hsd->State = HAL_SD_STATE_READY;
 8002c46:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c52:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c56:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002c58:	e762      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002c5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c5c:	f010 0020 	ands.w	r0, r0, #32
 8002c60:	d00a      	beq.n	8002c78 <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_SD_ReadBlocks+0x1b0>)
      hsd->State = HAL_SD_STATE_READY;
 8002c64:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c66:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c70:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c74:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002c76:	e753      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <HAL_SD_ReadBlocks+0x1b4>)
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002c82:	e74d      	b.n	8002b20 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c8a:	e735      	b.n	8002af8 <HAL_SD_ReadBlocks+0x1c>
 8002c8c:	1fe00fff 	.word	0x1fe00fff
 8002c90:	18000f3a 	.word	0x18000f3a

08002c94 <HAL_SD_WriteBlocks>:
{
 8002c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c98:	460e      	mov	r6, r1
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	4691      	mov	r9, r2
 8002ca0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002ca2:	f7fd fd09 	bl	80006b8 <HAL_GetTick>
 8002ca6:	4680      	mov	r8, r0
  if(NULL == pData)
 8002ca8:	b92e      	cbnz	r6, 8002cb6 <HAL_SD_WriteBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002cb0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e010      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8002cb6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002cba:	b2c0      	uxtb	r0, r0
 8002cbc:	2801      	cmp	r0, #1
 8002cbe:	f040 80b0 	bne.w	8002e22 <HAL_SD_WriteBlocks+0x18e>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cc2:	eb09 0307 	add.w	r3, r9, r7
 8002cc6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cc8:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cca:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ccc:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cce:	d906      	bls.n	8002cde <HAL_SD_WriteBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002cd8:	b008      	add	sp, #32
 8002cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002cde:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8002ce0:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8002ce2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ce6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8002ce8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002cea:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cec:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002cf4:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8002cf8:	bf18      	it	ne
 8002cfa:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002cfe:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002d00:	2390      	movs	r3, #144	; 0x90
 8002d02:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002d04:	2300      	movs	r3, #0
 8002d06:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002d08:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002d0a:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002d0c:	f002 f901 	bl	8004f12 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8002d10:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8002d12:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8002d14:	68c3      	ldr	r3, [r0, #12]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8002d1c:	d911      	bls.n	8002d42 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d1e:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d20:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d22:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d24:	f002 f96c 	bl	8005000 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d28:	b188      	cbz	r0, 8002d4e <HAL_SD_WriteBlocks+0xba>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_SD_WriteBlocks+0x198>)
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d32:	4318      	orrs	r0, r3
 8002d34:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d36:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002d38:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8002d3a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d3e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002d40:	e7ca      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d42:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d44:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d46:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d48:	f002 f941 	bl	8004fce <SDMMC_CmdWriteSingleBlock>
 8002d4c:	e7ec      	b.n	8002d28 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 8002d4e:	9d03      	ldr	r5, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002d50:	6820      	ldr	r0, [r4, #0]
 8002d52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d54:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8002d58:	d01b      	beq.n	8002d92 <HAL_SD_WriteBlocks+0xfe>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8002d5a:	68c3      	ldr	r3, [r0, #12]
 8002d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d60:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	d508      	bpl.n	8002d7a <HAL_SD_WriteBlocks+0xe6>
 8002d68:	2f01      	cmp	r7, #1
 8002d6a:	d906      	bls.n	8002d7a <HAL_SD_WriteBlocks+0xe6>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d003      	beq.n	8002d7a <HAL_SD_WriteBlocks+0xe6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d72:	f002 f95f 	bl	8005034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d1d7      	bne.n	8002d2a <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d7e:	f011 0108 	ands.w	r1, r1, #8
 8002d82:	d02a      	beq.n	8002dda <HAL_SD_WriteBlocks+0x146>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_SD_WriteBlocks+0x198>)
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d90:	e7d1      	b.n	8002d36 <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8002d92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d94:	045a      	lsls	r2, r3, #17
 8002d96:	d50d      	bpl.n	8002db4 <HAL_SD_WriteBlocks+0x120>
 8002d98:	2d1f      	cmp	r5, #31
 8002d9a:	d90b      	bls.n	8002db4 <HAL_SD_WriteBlocks+0x120>
 8002d9c:	f106 0a20 	add.w	sl, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002da0:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002da4:	a901      	add	r1, sp, #4
 8002da6:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002da8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002daa:	f002 f88c 	bl	8004ec6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002dae:	45b2      	cmp	sl, r6
 8002db0:	d1f6      	bne.n	8002da0 <HAL_SD_WriteBlocks+0x10c>
        dataremaining -= 32U;
 8002db2:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002db4:	f7fd fc80 	bl	80006b8 <HAL_GetTick>
 8002db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002dba:	eba0 0008 	sub.w	r0, r0, r8
 8002dbe:	4298      	cmp	r0, r3
 8002dc0:	d3c6      	bcc.n	8002d50 <HAL_SD_WriteBlocks+0xbc>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002dc2:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002dc4:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_SD_WriteBlocks+0x198>)
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002dd8:	e77e      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	f012 0202 	ands.w	r2, r2, #2
 8002de0:	d00a      	beq.n	8002df8 <HAL_SD_WriteBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <HAL_SD_WriteBlocks+0x198>)
      hsd->State = HAL_SD_STATE_READY;
 8002de4:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002df0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002df4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002df6:	e76f      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8002df8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002dfa:	f010 0010 	ands.w	r0, r0, #16
 8002dfe:	d00a      	beq.n	8002e16 <HAL_SD_WriteBlocks+0x182>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e00:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_SD_WriteBlocks+0x198>)
      hsd->State = HAL_SD_STATE_READY;
 8002e02:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e04:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002e06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e12:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002e14:	e760      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002e16:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_SD_WriteBlocks+0x19c>)
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002e20:	e75a      	b.n	8002cd8 <HAL_SD_WriteBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e28:	e742      	b.n	8002cb0 <HAL_SD_WriteBlocks+0x1c>
 8002e2a:	bf00      	nop
 8002e2c:	1fe00fff 	.word	0x1fe00fff
 8002e30:	18000f3a 	.word	0x18000f3a

08002e34 <HAL_SD_ErrorCallback>:
 8002e34:	4770      	bx	lr

08002e36 <HAL_SD_DriveTransceiver_1_8V_Callback>:
{
 8002e36:	4770      	bx	lr

08002e38 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002e38:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002e3a:	0f9a      	lsrs	r2, r3, #30
 8002e3c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002e3e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8002e42:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002e44:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8002e48:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002e4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002e4e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e50:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e54:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e56:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e58:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002e5a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002e5c:	0d1a      	lsrs	r2, r3, #20
 8002e5e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002e60:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8002e64:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002e66:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002e6a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002e6c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002e70:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e72:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002e76:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e78:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002e7c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e7e:	2200      	movs	r2, #0
 8002e80:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 8002e84:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d16b      	bne.n	8002f62 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e8a:	f640 74fc 	movw	r4, #4092	; 0xffc
 8002e8e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002e90:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8002e94:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002e98:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e9a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8002e9e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ea0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8002ea4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ea6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8002eaa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002eac:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002eb0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002eb4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002eb6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002eb8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002eba:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002ebc:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ebe:	f002 0207 	and.w	r2, r2, #7
 8002ec2:	3202      	adds	r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002ec8:	7a0a      	ldrb	r2, [r1, #8]
 8002eca:	f002 040f 	and.w	r4, r2, #15
 8002ece:	2201      	movs	r2, #1
 8002ed0:	40a2      	lsls	r2, r4
 8002ed2:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002ed4:	0a52      	lsrs	r2, r2, #9
 8002ed6:	4353      	muls	r3, r2
 8002ed8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002ede:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002ee0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002ee2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002ee6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002ee8:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002ef0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002ef2:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ef4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 8002ef6:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ef8:	0fda      	lsrs	r2, r3, #31
 8002efa:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002efc:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8002f00:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f02:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002f06:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f08:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8002f0c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f0e:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8002f12:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f16:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8002f1a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f1e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f22:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002f26:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f2a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002f2e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f32:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002f36:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f3a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002f3e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f42:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8002f46:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f4a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002f4e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f52:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002f56:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8002f60:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f62:	2a01      	cmp	r2, #1
 8002f64:	d10f      	bne.n	8002f86 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8002f6c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002f70:	4313      	orrs	r3, r2
 8002f72:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f74:	690b      	ldr	r3, [r1, #16]
 8002f76:	3301      	adds	r3, #1
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f7c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8002f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f82:	6503      	str	r3, [r0, #80]	; 0x50
 8002f84:	e7ab      	b.n	8002ede <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_SD_GetCardCSD+0x168>)
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	bf00      	nop
 8002fa0:	1fe00fff 	.word	0x1fe00fff

08002fa4 <HAL_SD_InitCard>:
{
 8002fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002fa8:	2300      	movs	r3, #0
{
 8002faa:	b098      	sub	sp, #96	; 0x60
 8002fac:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002fae:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002fb0:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002fb2:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fb4:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002fb6:	23fa      	movs	r3, #250	; 0xfa
 8002fb8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8002fba:	6983      	ldr	r3, [r0, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d104      	bne.n	8002fca <HAL_SD_InitCard+0x26>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8002fc0:	6802      	ldr	r2, [r0, #0]
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	6013      	str	r3, [r2, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8002fca:	ab0a      	add	r3, sp, #40	; 0x28
 8002fcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fd0:	ab07      	add	r3, sp, #28
 8002fd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fda:	f001 ff57 	bl	8004e8c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f001 ff76 	bl	8004ed0 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8002fe4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002fe8:	f7ff fc2c 	bl	8002844 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ff0:	fbb0 f0f3 	udiv	r0, r0, r3
  if(sdmmc_clk != 0U)
 8002ff4:	b1f8      	cbz	r0, 8003036 <HAL_SD_InitCard+0x92>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8002ff6:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_SD_InitCard+0x28c>)
 8002ff8:	fbb3 f0f0 	udiv	r0, r3, r0
 8002ffc:	3001      	adds	r0, #1
    HAL_Delay(2U);
 8002ffe:	f7fd fb61 	bl	80006c4 <HAL_Delay>
  __IO uint32_t count = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7fd fb57 	bl	80006b8 <HAL_GetTick>
 800300a:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	f002 f855 	bl	80050bc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003012:	4605      	mov	r5, r0
 8003014:	b940      	cbnz	r0, 8003028 <HAL_SD_InitCard+0x84>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	f002 f87a 	bl	8005110 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800301c:	b168      	cbz	r0, 800303a <HAL_SD_InitCard+0x96>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800301e:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	f002 f84b 	bl	80050bc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003026:	b150      	cbz	r0, 800303e <HAL_SD_InitCard+0x9a>
    hsd->State = HAL_SD_STATE_READY;
 8003028:	2501      	movs	r5, #1
 800302a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800302e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003030:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8003032:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003034:	e0ca      	b.n	80031cc <HAL_SD_InitCard+0x228>
    HAL_Delay(2U);
 8003036:	2002      	movs	r0, #2
 8003038:	e7e1      	b.n	8002ffe <HAL_SD_InitCard+0x5a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800303a:	2301      	movs	r3, #1
 800303c:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800303e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003040:	2b01      	cmp	r3, #1
 8003042:	d04c      	beq.n	80030de <HAL_SD_InitCard+0x13a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003044:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 8003048:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800304a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8003238 <HAL_SD_InitCard+0x294>
 800304e:	46c1      	mov	r9, r8
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003050:	9b06      	ldr	r3, [sp, #24]
 8003052:	4543      	cmp	r3, r8
 8003054:	d94c      	bls.n	80030f0 <HAL_SD_InitCard+0x14c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003056:	9b06      	ldr	r3, [sp, #24]
 8003058:	454b      	cmp	r3, r9
 800305a:	d861      	bhi.n	8003120 <HAL_SD_InitCard+0x17c>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800305c:	006b      	lsls	r3, r5, #1
 800305e:	d533      	bpl.n	80030c8 <HAL_SD_InitCard+0x124>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003060:	2301      	movs	r3, #1
 8003062:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003064:	69a3      	ldr	r3, [r4, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d12e      	bne.n	80030c8 <HAL_SD_InitCard+0x124>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800306a:	01ee      	lsls	r6, r5, #7
 800306c:	d52c      	bpl.n	80030c8 <HAL_SD_InitCard+0x124>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800306e:	f44f 7300 	mov.w	r3, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8003072:	6820      	ldr	r0, [r4, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003074:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8003076:	6803      	ldr	r3, [r0, #0]
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800307e:	f002 f99c 	bl	80053ba <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003082:	2800      	cmp	r0, #0
 8003084:	d1d0      	bne.n	8003028 <HAL_SD_InitCard+0x84>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308a:	0155      	lsls	r5, r2, #5
 800308c:	d54b      	bpl.n	8003126 <HAL_SD_InitCard+0x182>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800308e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	02d8      	lsls	r0, r3, #11
 8003098:	d527      	bpl.n	80030ea <HAL_SD_InitCard+0x146>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff fecb 	bl	8002e36 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	0191      	lsls	r1, r2, #6
 80030b0:	d541      	bpl.n	8003136 <HAL_SD_InitCard+0x192>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80030b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80030b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ba:	02d2      	lsls	r2, r2, #11
 80030bc:	d430      	bmi.n	8003120 <HAL_SD_InitCard+0x17c>
          hsd->Instance->POWER = 0x13U;
 80030be:	2213      	movs	r2, #19
 80030c0:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 80030c8:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80030ca:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80030cc:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80030d0:	f001 ff04 	bl	8004edc <SDMMC_GetPowerState>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d134      	bne.n	8003142 <HAL_SD_InitCard+0x19e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80030dc:	e081      	b.n	80031e2 <HAL_SD_InitCard+0x23e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80030de:	2100      	movs	r1, #0
 80030e0:	6820      	ldr	r0, [r4, #0]
 80030e2:	f002 f855 	bl	8005190 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d0ac      	beq.n	8003044 <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80030ee:	e79b      	b.n	8003028 <HAL_SD_InitCard+0x84>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	d1b0      	bne.n	8003056 <HAL_SD_InitCard+0xb2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80030f4:	4631      	mov	r1, r6
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	f002 f84a 	bl	8005190 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d193      	bne.n	8003028 <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003100:	4651      	mov	r1, sl
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f002 f85d 	bl	80051c2 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003108:	2800      	cmp	r0, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_SD_InitCard+0x146>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800310c:	4631      	mov	r1, r6
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f001 fefc 	bl	8004f0c <SDMMC_GetResponse>
    count++;
 8003114:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003116:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003118:	0fc6      	lsrs	r6, r0, #31
    count++;
 800311a:	3301      	adds	r3, #1
 800311c:	9306      	str	r3, [sp, #24]
 800311e:	e797      	b.n	8003050 <HAL_SD_InitCard+0xac>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003120:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003124:	e780      	b.n	8003028 <HAL_SD_InitCard+0x84>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003126:	f7fd fac7 	bl	80006b8 <HAL_GetTick>
 800312a:	1bc0      	subs	r0, r0, r7
 800312c:	3001      	adds	r0, #1
 800312e:	d1aa      	bne.n	8003086 <HAL_SD_InitCard+0xe2>
            return HAL_SD_ERROR_TIMEOUT;
 8003130:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003134:	e778      	b.n	8003028 <HAL_SD_InitCard+0x84>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003136:	f7fd fabf 	bl	80006b8 <HAL_GetTick>
 800313a:	1bc0      	subs	r0, r0, r7
 800313c:	3001      	adds	r0, #1
 800313e:	d1b4      	bne.n	80030aa <HAL_SD_InitCard+0x106>
 8003140:	e7f6      	b.n	8003130 <HAL_SD_InitCard+0x18c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003144:	2b03      	cmp	r3, #3
 8003146:	d018      	beq.n	800317a <HAL_SD_InitCard+0x1d6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	f002 f869 	bl	8005220 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800314e:	2800      	cmp	r0, #0
 8003150:	d147      	bne.n	80031e2 <HAL_SD_InitCard+0x23e>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003152:	4601      	mov	r1, r0
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	f001 fed9 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800315a:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800315c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	f001 fed4 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003164:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003166:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	f001 fecf 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800316e:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003170:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	f001 feca 	bl	8004f0c <SDMMC_GetResponse>
 8003178:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800317a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800317c:	2b03      	cmp	r3, #3
 800317e:	d129      	bne.n	80031d4 <HAL_SD_InitCard+0x230>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003182:	2b03      	cmp	r3, #3
 8003184:	d133      	bne.n	80031ee <HAL_SD_InitCard+0x24a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003186:	2104      	movs	r1, #4
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	f001 febf 	bl	8004f0c <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800318e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003190:	0d00      	lsrs	r0, r0, #20
 8003192:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff fe4f 	bl	8002e38 <HAL_SD_GetCardCSD>
 800319a:	4605      	mov	r5, r0
 800319c:	2800      	cmp	r0, #0
 800319e:	d144      	bne.n	800322a <HAL_SD_InitCard+0x286>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80031a2:	4603      	mov	r3, r0
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	0412      	lsls	r2, r2, #16
 80031a8:	f001 ff6e 	bl	8005088 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031ac:	b9c8      	cbnz	r0, 80031e2 <HAL_SD_InitCard+0x23e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	f001 fec0 	bl	8004f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031b8:	b140      	cbz	r0, 80031cc <HAL_SD_InitCard+0x228>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031ba:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80031bc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_SD_InitCard+0x290>)
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031c4:	4318      	orrs	r0, r3
 80031c6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031c8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 80031cc:	4628      	mov	r0, r5
 80031ce:	b018      	add	sp, #96	; 0x60
 80031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80031d4:	f10d 0116 	add.w	r1, sp, #22
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	f002 f84d 	bl	8005278 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031de:	2800      	cmp	r0, #0
 80031e0:	d0ce      	beq.n	8003180 <HAL_SD_InitCard+0x1dc>
    hsd->State = HAL_SD_STATE_READY;
 80031e2:	2501      	movs	r5, #1
 80031e4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80031e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031ea:	4308      	orrs	r0, r1
 80031ec:	e721      	b.n	8003032 <HAL_SD_InitCard+0x8e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80031ee:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031f2:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80031f4:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031f6:	0409      	lsls	r1, r1, #16
 80031f8:	f002 f828 	bl	800524c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_SD_InitCard+0x23e>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003200:	4601      	mov	r1, r0
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	f001 fe82 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003208:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800320a:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f001 fe7d 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003212:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003214:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	f001 fe78 	bl	8004f0c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800321c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800321e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	f001 fe73 	bl	8004f0c <SDMMC_GetResponse>
 8003226:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003228:	e7ad      	b.n	8003186 <HAL_SD_InitCard+0x1e2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800322a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800322e:	e7d8      	b.n	80031e2 <HAL_SD_InitCard+0x23e>
 8003230:	00012110 	.word	0x00012110
 8003234:	1fe00fff 	.word	0x1fe00fff
 8003238:	c1100000 	.word	0xc1100000

0800323c <HAL_SD_GetCardStatus>:
{
 800323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003240:	4604      	mov	r4, r0
 8003242:	b096      	sub	sp, #88	; 0x58
 8003244:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8003246:	f7fd fa37 	bl	80006b8 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800324a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800324c:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f001 fe5c 	bl	8004f0c <SDMMC_GetResponse>
 8003254:	0183      	lsls	r3, r0, #6
 8003256:	f100 80a3 	bmi.w	80033a0 <HAL_SD_GetCardStatus+0x164>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	f001 fe6b 	bl	8004f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003262:	b158      	cbz	r0, 800327c <HAL_SD_GetCardStatus+0x40>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8003264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003266:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003268:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800326a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_SD_GetCardStatus+0x178>)
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003272:	4318      	orrs	r0, r3
 8003274:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003276:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800327a:	e060      	b.n	800333e <HAL_SD_GetCardStatus+0x102>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800327c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	0409      	lsls	r1, r1, #16
 8003282:	f001 ff85 	bl	8005190 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003286:	2800      	cmp	r0, #0
 8003288:	d1ec      	bne.n	8003264 <HAL_SD_GetCardStatus+0x28>
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	f04f 0e02 	mov.w	lr, #2
 8003292:	2540      	movs	r5, #64	; 0x40
 8003294:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003296:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003298:	4669      	mov	r1, sp
 800329a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800329c:	e88d 40a8 	stmia.w	sp, {r3, r5, r7, lr}
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80032a4:	f001 fe35 	bl	8004f12 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	f002 f852 	bl	8005352 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d1d8      	bne.n	8003264 <HAL_SD_GetCardStatus+0x28>
 80032b2:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	f412 7f95 	tst.w	r2, #298	; 0x12a
 80032bc:	d050      	beq.n	8003360 <HAL_SD_GetCardStatus+0x124>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	0711      	lsls	r1, r2, #28
 80032c2:	d470      	bmi.n	80033a6 <HAL_SD_GetCardStatus+0x16a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	0792      	lsls	r2, r2, #30
 80032c8:	d46f      	bmi.n	80033aa <HAL_SD_GetCardStatus+0x16e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	d46e      	bmi.n	80033ae <HAL_SD_GetCardStatus+0x172>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80032d4:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 80032d8:	d157      	bne.n	800338a <HAL_SD_GetCardStatus+0x14e>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80032da:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_SD_GetCardStatus+0x17c>)
 80032de:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80032e0:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80032e4:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80032e6:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80032ea:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80032ec:	0a13      	lsrs	r3, r2, #8
 80032ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8073      	strh	r3, [r6, #2]
 80032fa:	9b07      	ldr	r3, [sp, #28]
 80032fc:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80032fe:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8003300:	9b08      	ldr	r3, [sp, #32]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8003306:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800330a:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800330c:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003310:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8003312:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331a:	b2d1      	uxtb	r1, r2
 800331c:	430b      	orrs	r3, r1
 800331e:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8003320:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8003324:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8003326:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800332a:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800332c:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8003330:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8003334:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8003336:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800333a:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800333c:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800333e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	f001 fdf8 	bl	8004f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003348:	b130      	cbz	r0, 8003358 <HAL_SD_GetCardStatus+0x11c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800334a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800334c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800334e:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <HAL_SD_GetCardStatus+0x178>)
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8003352:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003354:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 8003358:	4628      	mov	r0, r5
 800335a:	b016      	add	sp, #88	; 0x58
 800335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	0418      	lsls	r0, r3, #16
 8003364:	d508      	bpl.n	8003378 <HAL_SD_GetCardStatus+0x13c>
 8003366:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	f001 fda8 	bl	8004ec0 <SDMMC_ReadFIFO>
 8003370:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8003374:	42af      	cmp	r7, r5
 8003376:	d1f8      	bne.n	800336a <HAL_SD_GetCardStatus+0x12e>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003378:	f7fd f99e 	bl	80006b8 <HAL_GetTick>
 800337c:	eba0 0008 	sub.w	r0, r0, r8
 8003380:	3001      	adds	r0, #1
 8003382:	d197      	bne.n	80032b4 <HAL_SD_GetCardStatus+0x78>
      return HAL_SD_ERROR_TIMEOUT;
 8003384:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003388:	e76e      	b.n	8003268 <HAL_SD_GetCardStatus+0x2c>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800338a:	f001 fd99 	bl	8004ec0 <SDMMC_ReadFIFO>
 800338e:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003392:	f7fd f991 	bl	80006b8 <HAL_GetTick>
 8003396:	eba0 0008 	sub.w	r0, r0, r8
 800339a:	3001      	adds	r0, #1
 800339c:	d198      	bne.n	80032d0 <HAL_SD_GetCardStatus+0x94>
 800339e:	e7f1      	b.n	8003384 <HAL_SD_GetCardStatus+0x148>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80033a4:	e760      	b.n	8003268 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80033a6:	2008      	movs	r0, #8
 80033a8:	e75e      	b.n	8003268 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80033aa:	2002      	movs	r0, #2
 80033ac:	e75c      	b.n	8003268 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 80033ae:	2020      	movs	r0, #32
 80033b0:	e75a      	b.n	8003268 <HAL_SD_GetCardStatus+0x2c>
 80033b2:	bf00      	nop
 80033b4:	1fe00fff 	.word	0x1fe00fff
 80033b8:	18000f3a 	.word	0x18000f3a

080033bc <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80033bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80033be:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80033c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033c2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80033c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033c6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80033c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80033ca:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80033cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80033ce:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80033d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033d2:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80033d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80033d6:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80033d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80033da:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80033dc:	61cb      	str	r3, [r1, #28]
}
 80033de:	4770      	bx	lr

080033e0 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80033e0:	2303      	movs	r3, #3
{
 80033e2:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80033e4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 80033e8:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 80033ec:	4604      	mov	r4, r0
 80033ee:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d002      	beq.n	80033fa <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80033f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80033f8:	d103      	bne.n	8003402 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	e065      	b.n	80034ce <HAL_SD_ConfigWideBusOperation+0xee>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003402:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003406:	d13c      	bne.n	8003482 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 8003408:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800340a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800340c:	9104      	str	r1, [sp, #16]
 800340e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003410:	f001 fd7c 	bl	8004f0c <SDMMC_GetResponse>
 8003414:	0180      	lsls	r0, r0, #6
 8003416:	d42e      	bmi.n	8003476 <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 8003418:	a904      	add	r1, sp, #16
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff faf6 	bl	8002a0c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003420:	b960      	cbnz	r0, 800343c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003422:	9b05      	ldr	r3, [sp, #20]
 8003424:	0359      	lsls	r1, r3, #13
 8003426:	d529      	bpl.n	800347c <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003428:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	0409      	lsls	r1, r1, #16
 800342e:	f001 feaf 	bl	8005190 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003432:	b918      	cbnz	r0, 800343c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003434:	2102      	movs	r1, #2
 8003436:	6820      	ldr	r0, [r4, #0]
 8003438:	f001 ffbd 	bl	80053b6 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800343c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800343e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8003440:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d044      	beq.n	80034d2 <HAL_SD_ConfigWideBusOperation+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003448:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800344a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800344c:	4a31      	ldr	r2, [pc, #196]	; (8003514 <HAL_SD_ConfigWideBusOperation+0x134>)
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f001 fd6f 	bl	8004f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800345a:	b130      	cbz	r0, 800346a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800345c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800345e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003460:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <HAL_SD_ConfigWideBusOperation+0x134>)
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003466:	4318      	orrs	r0, r3
 8003468:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800346e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003472:	b00b      	add	sp, #44	; 0x2c
 8003474:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003476:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800347a:	e7df      	b.n	800343c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800347c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003480:	e7dc      	b.n	800343c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003482:	bb09      	cbnz	r1, 80034c8 <HAL_SD_ConfigWideBusOperation+0xe8>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003484:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003486:	9104      	str	r1, [sp, #16]
 8003488:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800348a:	f001 fd3f 	bl	8004f0c <SDMMC_GetResponse>
 800348e:	0182      	lsls	r2, r0, #6
 8003490:	d414      	bmi.n	80034bc <HAL_SD_ConfigWideBusOperation+0xdc>
  errorstate = SD_FindSCR(hsd, scr);
 8003492:	a904      	add	r1, sp, #16
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff fab9 	bl	8002a0c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800349a:	b960      	cbnz	r0, 80034b6 <HAL_SD_ConfigWideBusOperation+0xd6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800349c:	9b05      	ldr	r3, [sp, #20]
 800349e:	03db      	lsls	r3, r3, #15
 80034a0:	d50f      	bpl.n	80034c2 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	0409      	lsls	r1, r1, #16
 80034a8:	f001 fe72 	bl	8005190 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ac:	b918      	cbnz	r0, 80034b6 <HAL_SD_ConfigWideBusOperation+0xd6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034ae:	4601      	mov	r1, r0
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	f001 ff80 	bl	80053b6 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80034b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034b8:	4308      	orrs	r0, r1
 80034ba:	e7c1      	b.n	8003440 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034c0:	e7f9      	b.n	80034b6 <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034c6:	e7f6      	b.n	80034b6 <HAL_SD_ConfigWideBusOperation+0xd6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80034c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80034d0:	e7b7      	b.n	8003442 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80034d2:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80034d4:	9506      	str	r5, [sp, #24]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80034d6:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80034d8:	68a3      	ldr	r3, [r4, #8]
 80034da:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80034dc:	6923      	ldr	r3, [r4, #16]
 80034de:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d90c      	bls.n	8003500 <HAL_SD_ConfigWideBusOperation+0x120>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80034e6:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80034e8:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 80034ec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80034f0:	ab04      	add	r3, sp, #16
 80034f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fa:	f001 fcc7 	bl	8004e8c <SDMMC_Init>
 80034fe:	e7a7      	b.n	8003450 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8003500:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003502:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003506:	d0ee      	beq.n	80034e6 <HAL_SD_ConfigWideBusOperation+0x106>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8003508:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800350c:	bf0c      	ite	eq
 800350e:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8003510:	2304      	movne	r3, #4
 8003512:	e7e8      	b.n	80034e6 <HAL_SD_ConfigWideBusOperation+0x106>
 8003514:	1fe00fff 	.word	0x1fe00fff

08003518 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003518:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800351a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800351c:	0409      	lsls	r1, r1, #16
{
 800351e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003520:	6800      	ldr	r0, [r0, #0]
 8003522:	f001 fefd 	bl	8005320 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003526:	4601      	mov	r1, r0
 8003528:	b928      	cbnz	r0, 8003536 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f001 fcee 	bl	8004f0c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003530:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8003534:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003538:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800353a:	4319      	orrs	r1, r3
 800353c:	63a1      	str	r1, [r4, #56]	; 0x38
 800353e:	e7f7      	b.n	8003530 <HAL_SD_GetCardState+0x18>

08003540 <HAL_SD_Init>:
{
 8003540:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 8003542:	4604      	mov	r4, r0
{
 8003544:	b086      	sub	sp, #24
  if(hsd == NULL)
 8003546:	b918      	cbnz	r0, 8003550 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8003548:	2501      	movs	r5, #1
}
 800354a:	4628      	mov	r0, r5
 800354c:	b006      	add	sp, #24
 800354e:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8003550:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003554:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003558:	b93b      	cbnz	r3, 800356a <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800355a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800355c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800355e:	b90b      	cbnz	r3, 8003564 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8003560:	2302      	movs	r3, #2
 8003562:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8003564:	4620      	mov	r0, r4
 8003566:	f003 fc97 	bl	8006e98 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800356a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800356c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800356e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003572:	f7ff fd17 	bl	8002fa4 <HAL_SD_InitCard>
 8003576:	2800      	cmp	r0, #0
 8003578:	d1e6      	bne.n	8003548 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800357a:	a901      	add	r1, sp, #4
 800357c:	4620      	mov	r0, r4
 800357e:	f7ff fe5d 	bl	800323c <HAL_SD_GetCardStatus>
 8003582:	2800      	cmp	r0, #0
 8003584:	d1e0      	bne.n	8003548 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003586:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8003588:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800358c:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800358e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8003592:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003594:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003596:	d11d      	bne.n	80035d4 <HAL_SD_Init+0x94>
 8003598:	b902      	cbnz	r2, 800359c <HAL_SD_Init+0x5c>
 800359a:	b1c3      	cbz	r3, 80035ce <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800359c:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80035a0:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80035a2:	68e1      	ldr	r1, [r4, #12]
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff ff1b 	bl	80033e0 <HAL_SD_ConfigWideBusOperation>
 80035aa:	4605      	mov	r5, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d1cb      	bne.n	8003548 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 80035b0:	f7fd f882 	bl	80006b8 <HAL_GetTick>
 80035b4:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ffae 	bl	8003518 <HAL_SD_GetCardState>
 80035bc:	2804      	cmp	r0, #4
 80035be:	d10b      	bne.n	80035d8 <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80035c4:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80035cc:	e7bd      	b.n	800354a <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	e7e5      	b.n	80035a0 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80035d4:	65e0      	str	r0, [r4, #92]	; 0x5c
 80035d6:	e7e4      	b.n	80035a2 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80035d8:	f7fd f86e 	bl	80006b8 <HAL_GetTick>
 80035dc:	1b80      	subs	r0, r0, r6
 80035de:	3001      	adds	r0, #1
 80035e0:	d1e9      	bne.n	80035b6 <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80035e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 80035e6:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80035e8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80035f0:	e7ab      	b.n	800354a <HAL_SD_Init+0xa>

080035f2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
 80035f2:	4770      	bx	lr

080035f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 80035f4:	4770      	bx	lr

080035f6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 80035f6:	4770      	bx	lr

080035f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_SD_IRQHandler>:
{
 80035fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 80035fe:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8003600:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003606:	0419      	lsls	r1, r3, #16
 8003608:	d520      	bpl.n	800364c <HAL_SD_IRQHandler+0x50>
 800360a:	072a      	lsls	r2, r5, #28
 800360c:	d51e      	bpl.n	800364c <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800360e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003610:	2b1f      	cmp	r3, #31
 8003612:	d919      	bls.n	8003648 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 8003614:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003616:	1d35      	adds	r5, r6, #4
 8003618:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	3504      	adds	r5, #4
 8003620:	f001 fc4e 	bl	8004ec0 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8003624:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003628:	0a03      	lsrs	r3, r0, #8
 800362a:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800362e:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003630:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003632:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003636:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800363a:	42af      	cmp	r7, r5
 800363c:	d1ee      	bne.n	800361c <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800363e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 8003640:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 8003642:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 8003644:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8003646:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003648:	b003      	add	sp, #12
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800364c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800364e:	05db      	lsls	r3, r3, #23
 8003650:	d553      	bpl.n	80036fa <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003658:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800365a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800365e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003662:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8003664:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800366c:	68c3      	ldr	r3, [r0, #12]
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8003674:	f015 0308 	ands.w	r3, r5, #8
 8003678:	d01f      	beq.n	80036ba <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800367a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800367e:	d008      	beq.n	8003692 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003680:	f001 fcd8 	bl	8005034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003684:	b128      	cbz	r0, 8003692 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 8003686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003688:	4318      	orrs	r0, r3
 800368a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff fbd1 	bl	8002e34 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003692:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003694:	07af      	lsls	r7, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003696:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_SD_IRQHandler+0x244>)
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800369a:	f04f 0301 	mov.w	r3, #1
 800369e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036a8:	d003      	beq.n	80036b2 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f003 f880 	bl	80067b0 <HAL_SD_RxCpltCallback>
 80036b0:	e7ca      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 80036b2:	4620      	mov	r0, r4
 80036b4:	f003 f877 	bl	80067a6 <HAL_SD_TxCpltCallback>
 80036b8:	e7c6      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80036ba:	062e      	lsls	r6, r5, #24
 80036bc:	d5c4      	bpl.n	8003648 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036be:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 80036c2:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80036c4:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80036c6:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036c8:	d008      	beq.n	80036dc <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80036ca:	f001 fcb3 	bl	8005034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80036ce:	b128      	cbz	r0, 80036dc <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 80036d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036d2:	4318      	orrs	r0, r3
 80036d4:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fbac 	bl	8002e34 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80036dc:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036de:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 80036e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036ec:	d002      	beq.n	80036f4 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f003 f859 	bl	80067a6 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036f4:	07a8      	lsls	r0, r5, #30
 80036f6:	d0a7      	beq.n	8003648 <HAL_SD_IRQHandler+0x4c>
 80036f8:	e7d7      	b.n	80036aa <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036fc:	0459      	lsls	r1, r3, #17
 80036fe:	d527      	bpl.n	8003750 <HAL_SD_IRQHandler+0x154>
 8003700:	072a      	lsls	r2, r5, #28
 8003702:	d525      	bpl.n	8003750 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 8003704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003706:	2b1f      	cmp	r3, #31
 8003708:	d99e      	bls.n	8003648 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800370a:	6a26      	ldr	r6, [r4, #32]
 800370c:	1d35      	adds	r5, r6, #4
 800370e:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 8003712:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8003716:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003718:	a901      	add	r1, sp, #4
 800371a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800371c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800371e:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 8003722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003726:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8003728:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800372c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003730:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8003732:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8003736:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800373a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800373c:	f001 fbc3 	bl	8004ec6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003740:	42af      	cmp	r7, r5
 8003742:	d1e6      	bne.n	8003712 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 8003744:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 8003746:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 8003748:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800374a:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800374c:	6263      	str	r3, [r4, #36]	; 0x24
 800374e:	e77b      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003750:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003752:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003756:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003758:	d056      	beq.n	8003808 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d503      	bpl.n	8003766 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800375e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003766:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003768:	071f      	lsls	r7, r3, #28
 800376a:	d503      	bpl.n	8003774 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800376c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003774:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003776:	069e      	lsls	r6, r3, #26
 8003778:	d503      	bpl.n	8003782 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800377a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800377c:	f043 0320 	orr.w	r3, r3, #32
 8003780:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003782:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003784:	06d9      	lsls	r1, r3, #27
 8003786:	d503      	bpl.n	8003790 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378a:	f043 0310 	orr.w	r3, r3, #16
 800378e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_SD_IRQHandler+0x244>)
 8003792:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003794:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003796:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800379a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800379c:	68c3      	ldr	r3, [r0, #12]
 800379e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a2:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80037a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80037ac:	68c3      	ldr	r3, [r0, #12]
 80037ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b2:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037b4:	f001 fc3e 	bl	8005034 <SDMMC_CmdStopTransfer>
 80037b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037ba:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037be:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80037c2:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037c4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037cc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037d4:	d008      	beq.n	80037e8 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fb27 	bl	8002e34 <HAL_SD_ErrorCallback>
 80037e6:	e72f      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037e8:	062a      	lsls	r2, r5, #24
 80037ea:	f57f af2d 	bpl.w	8003648 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	f43f af29 	beq.w	8003648 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80037f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80037fe:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8003800:	2301      	movs	r3, #1
 8003802:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003806:	e7eb      	b.n	80037e0 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f57f af1d 	bpl.w	8003648 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800380e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003812:	f005 0520 	and.w	r5, r5, #32
 8003816:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8003818:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800381a:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800381c:	f013 0f04 	tst.w	r3, #4
 8003820:	d106      	bne.n	8003830 <HAL_SD_IRQHandler+0x234>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003822:	b115      	cbz	r5, 800382a <HAL_SD_IRQHandler+0x22e>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8003824:	f7ff fee8 	bl	80035f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8003828:	e70e      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800382a:	f7ff fee3 	bl	80035f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800382e:	e70b      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003830:	b115      	cbz	r5, 8003838 <HAL_SD_IRQHandler+0x23c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8003832:	f7ff fee0 	bl	80035f6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8003836:	e707      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8003838:	f7ff fedb 	bl	80035f2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800383c:	e704      	b.n	8003648 <HAL_SD_IRQHandler+0x4c>
 800383e:	bf00      	nop
 8003840:	18000f3a 	.word	0x18000f3a
 8003844:	00000000 	.word	0x00000000

08003848 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003848:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800384a:	69c2      	ldr	r2, [r0, #28]
 800384c:	6881      	ldr	r1, [r0, #8]
{
 800384e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003852:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003856:	681c      	ldr	r4, [r3, #0]
{
 8003858:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800385a:	4301      	orrs	r1, r0
 800385c:	6968      	ldr	r0, [r5, #20]
 800385e:	4301      	orrs	r1, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003860:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003862:	4311      	orrs	r1, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8003864:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003866:	48bb      	ldr	r0, [pc, #748]	; (8003b54 <UART_SetConfig+0x30c>)
 8003868:	4020      	ands	r0, r4
 800386a:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800386c:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003876:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003878:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387a:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800387c:	49b6      	ldr	r1, [pc, #728]	; (8003b58 <UART_SetConfig+0x310>)
 800387e:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003880:	bf1c      	itt	ne
 8003882:	6a29      	ldrne	r1, [r5, #32]
 8003884:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003886:	6899      	ldr	r1, [r3, #8]
 8003888:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800388c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003890:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003892:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003894:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003898:	f021 010f 	bic.w	r1, r1, #15
 800389c:	4301      	orrs	r1, r0
 800389e:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a0:	49ae      	ldr	r1, [pc, #696]	; (8003b5c <UART_SetConfig+0x314>)
 80038a2:	428b      	cmp	r3, r1
 80038a4:	d11d      	bne.n	80038e2 <UART_SetConfig+0x9a>
 80038a6:	4bae      	ldr	r3, [pc, #696]	; (8003b60 <UART_SetConfig+0x318>)
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ae:	2b28      	cmp	r3, #40	; 0x28
 80038b0:	f200 875e 	bhi.w	8004770 <UART_SetConfig+0xf28>
 80038b4:	49ab      	ldr	r1, [pc, #684]	; (8003b64 <UART_SetConfig+0x31c>)
 80038b6:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80038bc:	f040 875f 	bne.w	800477e <UART_SetConfig+0xf36>
  {
    switch (clocksource)
 80038c0:	2c08      	cmp	r4, #8
 80038c2:	f000 84de 	beq.w	8004282 <UART_SetConfig+0xa3a>
 80038c6:	f200 83ba 	bhi.w	800403e <UART_SetConfig+0x7f6>
 80038ca:	2c01      	cmp	r4, #1
 80038cc:	f000 8432 	beq.w	8004134 <UART_SetConfig+0x8ec>
 80038d0:	f0c0 83f4 	bcc.w	80040bc <UART_SetConfig+0x874>
 80038d4:	2c04      	cmp	r4, #4
 80038d6:	f000 84af 	beq.w	8004238 <UART_SetConfig+0x9f0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 80038da:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f000 bc50 	b.w	8004182 <UART_SetConfig+0x93a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e2:	49a1      	ldr	r1, [pc, #644]	; (8003b68 <UART_SetConfig+0x320>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d108      	bne.n	80038fa <UART_SetConfig+0xb2>
 80038e8:	4b9d      	ldr	r3, [pc, #628]	; (8003b60 <UART_SetConfig+0x318>)
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	f200 873a 	bhi.w	800476a <UART_SetConfig+0xf22>
 80038f6:	499d      	ldr	r1, [pc, #628]	; (8003b6c <UART_SetConfig+0x324>)
 80038f8:	e7dd      	b.n	80038b6 <UART_SetConfig+0x6e>
 80038fa:	499d      	ldr	r1, [pc, #628]	; (8003b70 <UART_SetConfig+0x328>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d108      	bne.n	8003912 <UART_SetConfig+0xca>
 8003900:	4b97      	ldr	r3, [pc, #604]	; (8003b60 <UART_SetConfig+0x318>)
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	2b05      	cmp	r3, #5
 800390a:	f200 872e 	bhi.w	800476a <UART_SetConfig+0xf22>
 800390e:	4999      	ldr	r1, [pc, #612]	; (8003b74 <UART_SetConfig+0x32c>)
 8003910:	e7d1      	b.n	80038b6 <UART_SetConfig+0x6e>
 8003912:	4999      	ldr	r1, [pc, #612]	; (8003b78 <UART_SetConfig+0x330>)
 8003914:	428b      	cmp	r3, r1
 8003916:	d108      	bne.n	800392a <UART_SetConfig+0xe2>
 8003918:	4b91      	ldr	r3, [pc, #580]	; (8003b60 <UART_SetConfig+0x318>)
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	2b05      	cmp	r3, #5
 8003922:	f200 8722 	bhi.w	800476a <UART_SetConfig+0xf22>
 8003926:	4995      	ldr	r1, [pc, #596]	; (8003b7c <UART_SetConfig+0x334>)
 8003928:	e7c5      	b.n	80038b6 <UART_SetConfig+0x6e>
 800392a:	4995      	ldr	r1, [pc, #596]	; (8003b80 <UART_SetConfig+0x338>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d108      	bne.n	8003942 <UART_SetConfig+0xfa>
 8003930:	4b8b      	ldr	r3, [pc, #556]	; (8003b60 <UART_SetConfig+0x318>)
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	2b05      	cmp	r3, #5
 800393a:	f200 8716 	bhi.w	800476a <UART_SetConfig+0xf22>
 800393e:	4991      	ldr	r1, [pc, #580]	; (8003b84 <UART_SetConfig+0x33c>)
 8003940:	e7b9      	b.n	80038b6 <UART_SetConfig+0x6e>
 8003942:	4991      	ldr	r1, [pc, #580]	; (8003b88 <UART_SetConfig+0x340>)
 8003944:	428b      	cmp	r3, r1
 8003946:	d108      	bne.n	800395a <UART_SetConfig+0x112>
 8003948:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <UART_SetConfig+0x318>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003950:	2b28      	cmp	r3, #40	; 0x28
 8003952:	f200 870a 	bhi.w	800476a <UART_SetConfig+0xf22>
 8003956:	498d      	ldr	r1, [pc, #564]	; (8003b8c <UART_SetConfig+0x344>)
 8003958:	e7ad      	b.n	80038b6 <UART_SetConfig+0x6e>
 800395a:	498d      	ldr	r1, [pc, #564]	; (8003b90 <UART_SetConfig+0x348>)
 800395c:	428b      	cmp	r3, r1
 800395e:	d108      	bne.n	8003972 <UART_SetConfig+0x12a>
 8003960:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <UART_SetConfig+0x318>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	2b05      	cmp	r3, #5
 800396a:	f200 86fe 	bhi.w	800476a <UART_SetConfig+0xf22>
 800396e:	4989      	ldr	r1, [pc, #548]	; (8003b94 <UART_SetConfig+0x34c>)
 8003970:	e7a1      	b.n	80038b6 <UART_SetConfig+0x6e>
 8003972:	4989      	ldr	r1, [pc, #548]	; (8003b98 <UART_SetConfig+0x350>)
 8003974:	428b      	cmp	r3, r1
 8003976:	d108      	bne.n	800398a <UART_SetConfig+0x142>
 8003978:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <UART_SetConfig+0x318>)
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	2b05      	cmp	r3, #5
 8003982:	f200 86f2 	bhi.w	800476a <UART_SetConfig+0xf22>
 8003986:	4985      	ldr	r1, [pc, #532]	; (8003b9c <UART_SetConfig+0x354>)
 8003988:	e795      	b.n	80038b6 <UART_SetConfig+0x6e>
 800398a:	4973      	ldr	r1, [pc, #460]	; (8003b58 <UART_SetConfig+0x310>)
 800398c:	428b      	cmp	r3, r1
 800398e:	f040 86ec 	bne.w	800476a <UART_SetConfig+0xf22>
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <UART_SetConfig+0x318>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	2b05      	cmp	r3, #5
 800399c:	d901      	bls.n	80039a2 <UART_SetConfig+0x15a>
        ret = HAL_ERROR;
 800399e:	2201      	movs	r2, #1
 80039a0:	e0a6      	b.n	8003af0 <UART_SetConfig+0x2a8>
 80039a2:	4a7f      	ldr	r2, [pc, #508]	; (8003ba0 <UART_SetConfig+0x358>)
 80039a4:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 80039a6:	2c08      	cmp	r4, #8
 80039a8:	f000 80c8 	beq.w	8003b3c <UART_SetConfig+0x2f4>
 80039ac:	d82f      	bhi.n	8003a0e <UART_SetConfig+0x1c6>
 80039ae:	2c02      	cmp	r4, #2
 80039b0:	d07d      	beq.n	8003aae <UART_SetConfig+0x266>
 80039b2:	2c04      	cmp	r4, #4
 80039b4:	d1f3      	bne.n	800399e <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039b6:	4668      	mov	r0, sp
 80039b8:	f7fe fd46 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80039bc:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80039be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80c0 	beq.w	8003b46 <UART_SetConfig+0x2fe>
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f000 80bf 	beq.w	8003b4a <UART_SetConfig+0x302>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	f000 80be 	beq.w	8003b4e <UART_SetConfig+0x306>
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	f000 80e8 	beq.w	8003ba8 <UART_SetConfig+0x360>
 80039d8:	2b04      	cmp	r3, #4
 80039da:	f000 80ab 	beq.w	8003b34 <UART_SetConfig+0x2ec>
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f000 80e4 	beq.w	8003bac <UART_SetConfig+0x364>
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	f000 80e3 	beq.w	8003bb0 <UART_SetConfig+0x368>
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	f000 80e2 	beq.w	8003bb4 <UART_SetConfig+0x36c>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	f000 80e1 	beq.w	8003bb8 <UART_SetConfig+0x370>
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	f000 80e0 	beq.w	8003bbc <UART_SetConfig+0x374>
 80039fc:	2b0a      	cmp	r3, #10
 80039fe:	f000 80df 	beq.w	8003bc0 <UART_SetConfig+0x378>
 8003a02:	2b0b      	cmp	r3, #11
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003a0c:	e093      	b.n	8003b36 <UART_SetConfig+0x2ee>
    switch (clocksource)
 8003a0e:	2c20      	cmp	r4, #32
 8003a10:	f000 810a 	beq.w	8003c28 <UART_SetConfig+0x3e0>
 8003a14:	2c40      	cmp	r4, #64	; 0x40
 8003a16:	f000 8121 	beq.w	8003c5c <UART_SetConfig+0x414>
 8003a1a:	2c10      	cmp	r4, #16
 8003a1c:	d1bf      	bne.n	800399e <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <UART_SetConfig+0x318>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	0692      	lsls	r2, r2, #26
 8003a24:	f140 80e4 	bpl.w	8003bf0 <UART_SetConfig+0x3a8>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <UART_SetConfig+0x35c>)
 8003a2c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a30:	40d3      	lsrs	r3, r2
 8003a32:	2800      	cmp	r0, #0
 8003a34:	f000 80c6 	beq.w	8003bc4 <UART_SetConfig+0x37c>
 8003a38:	2801      	cmp	r0, #1
 8003a3a:	f000 80c5 	beq.w	8003bc8 <UART_SetConfig+0x380>
 8003a3e:	2802      	cmp	r0, #2
 8003a40:	f000 80c4 	beq.w	8003bcc <UART_SetConfig+0x384>
 8003a44:	2803      	cmp	r0, #3
 8003a46:	f000 80c3 	beq.w	8003bd0 <UART_SetConfig+0x388>
 8003a4a:	2804      	cmp	r0, #4
 8003a4c:	f000 80c2 	beq.w	8003bd4 <UART_SetConfig+0x38c>
 8003a50:	2805      	cmp	r0, #5
 8003a52:	f000 80c1 	beq.w	8003bd8 <UART_SetConfig+0x390>
 8003a56:	2806      	cmp	r0, #6
 8003a58:	f000 80c0 	beq.w	8003bdc <UART_SetConfig+0x394>
 8003a5c:	2807      	cmp	r0, #7
 8003a5e:	f000 80bf 	beq.w	8003be0 <UART_SetConfig+0x398>
 8003a62:	2808      	cmp	r0, #8
 8003a64:	f000 80be 	beq.w	8003be4 <UART_SetConfig+0x39c>
 8003a68:	2809      	cmp	r0, #9
 8003a6a:	f000 80bd 	beq.w	8003be8 <UART_SetConfig+0x3a0>
 8003a6e:	280a      	cmp	r0, #10
 8003a70:	f000 80bc 	beq.w	8003bec <UART_SetConfig+0x3a4>
 8003a74:	280b      	cmp	r0, #11
 8003a76:	bf14      	ite	ne
 8003a78:	2001      	movne	r0, #1
 8003a7a:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8003a7e:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a82:	686e      	ldr	r6, [r5, #4]
 8003a84:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d888      	bhi.n	800399e <UART_SetConfig+0x156>
 8003a8c:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8003a90:	d885      	bhi.n	800399e <UART_SetConfig+0x156>
        switch (clocksource)
 8003a92:	2c08      	cmp	r4, #8
 8003a94:	f000 81d2 	beq.w	8003e3c <UART_SetConfig+0x5f4>
 8003a98:	f200 8143 	bhi.w	8003d22 <UART_SetConfig+0x4da>
 8003a9c:	2c02      	cmp	r4, #2
 8003a9e:	f000 818d 	beq.w	8003dbc <UART_SetConfig+0x574>
 8003aa2:	2c04      	cmp	r4, #4
 8003aa4:	f000 81c5 	beq.w	8003e32 <UART_SetConfig+0x5ea>
            ret = HAL_ERROR;
 8003aa8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e1b8      	b.n	8003e20 <UART_SetConfig+0x5d8>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003aae:	f7fe fcb9 	bl	8002424 <HAL_RCCEx_GetD3PCLK1Freq>
 8003ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ab4:	b343      	cbz	r3, 8003b08 <UART_SetConfig+0x2c0>
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d028      	beq.n	8003b0c <UART_SetConfig+0x2c4>
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d028      	beq.n	8003b10 <UART_SetConfig+0x2c8>
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d028      	beq.n	8003b14 <UART_SetConfig+0x2cc>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d028      	beq.n	8003b18 <UART_SetConfig+0x2d0>
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d028      	beq.n	8003b1c <UART_SetConfig+0x2d4>
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d028      	beq.n	8003b20 <UART_SetConfig+0x2d8>
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	d028      	beq.n	8003b24 <UART_SetConfig+0x2dc>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d028      	beq.n	8003b28 <UART_SetConfig+0x2e0>
 8003ad6:	2b09      	cmp	r3, #9
 8003ad8:	d028      	beq.n	8003b2c <UART_SetConfig+0x2e4>
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d028      	beq.n	8003b30 <UART_SetConfig+0x2e8>
 8003ade:	2b0b      	cmp	r3, #11
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003ae8:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d1c8      	bne.n	8003a82 <UART_SetConfig+0x23a>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003af0:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 8003af2:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 8003af4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003af8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 8003b00:	672b      	str	r3, [r5, #112]	; 0x70
}
 8003b02:	b007      	add	sp, #28
 8003b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e7ed      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	e7eb      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e7e9      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b14:	2306      	movs	r3, #6
 8003b16:	e7e7      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	e7e5      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b1c:	230a      	movs	r3, #10
 8003b1e:	e7e3      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b20:	230c      	movs	r3, #12
 8003b22:	e7e1      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b24:	2310      	movs	r3, #16
 8003b26:	e7df      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e7dd      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	e7db      	b.n	8003ae8 <UART_SetConfig+0x2a0>
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	e7d9      	b.n	8003ae8 <UART_SetConfig+0x2a0>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b34:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b36:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 8003b3a:	e7d7      	b.n	8003aec <UART_SetConfig+0x2a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b3c:	a803      	add	r0, sp, #12
 8003b3e:	f7fe fd2d 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b42:	9a04      	ldr	r2, [sp, #16]
 8003b44:	e73b      	b.n	80039be <UART_SetConfig+0x176>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e7f5      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e7f3      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e7f1      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003b52:	bf00      	nop
 8003b54:	cfff69f3 	.word	0xcfff69f3
 8003b58:	58000c00 	.word	0x58000c00
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	58024400 	.word	0x58024400
 8003b64:	080071a4 	.word	0x080071a4
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	080071cd 	.word	0x080071cd
 8003b70:	40004800 	.word	0x40004800
 8003b74:	080071cd 	.word	0x080071cd
 8003b78:	40004c00 	.word	0x40004c00
 8003b7c:	080071cd 	.word	0x080071cd
 8003b80:	40005000 	.word	0x40005000
 8003b84:	080071cd 	.word	0x080071cd
 8003b88:	40011400 	.word	0x40011400
 8003b8c:	080071a4 	.word	0x080071a4
 8003b90:	40007800 	.word	0x40007800
 8003b94:	080071cd 	.word	0x080071cd
 8003b98:	40007c00 	.word	0x40007c00
 8003b9c:	080071cd 	.word	0x080071cd
 8003ba0:	080071d3 	.word	0x080071d3
 8003ba4:	03d09000 	.word	0x03d09000
 8003ba8:	2306      	movs	r3, #6
 8003baa:	e7c4      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bac:	230a      	movs	r3, #10
 8003bae:	e7c2      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	e7c0      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	e7be      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e7bc      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	e7ba      	b.n	8003b36 <UART_SetConfig+0x2ee>
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	e7b8      	b.n	8003b36 <UART_SetConfig+0x2ee>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	e75a      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bc8:	2002      	movs	r0, #2
 8003bca:	e758      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bcc:	2004      	movs	r0, #4
 8003bce:	e756      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bd0:	2006      	movs	r0, #6
 8003bd2:	e754      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bd4:	2008      	movs	r0, #8
 8003bd6:	e752      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bd8:	200a      	movs	r0, #10
 8003bda:	e750      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bdc:	200c      	movs	r0, #12
 8003bde:	e74e      	b.n	8003a7e <UART_SetConfig+0x236>
 8003be0:	2010      	movs	r0, #16
 8003be2:	e74c      	b.n	8003a7e <UART_SetConfig+0x236>
 8003be4:	2020      	movs	r0, #32
 8003be6:	e74a      	b.n	8003a7e <UART_SetConfig+0x236>
 8003be8:	2040      	movs	r0, #64	; 0x40
 8003bea:	e748      	b.n	8003a7e <UART_SetConfig+0x236>
 8003bec:	2080      	movs	r0, #128	; 0x80
 8003bee:	e746      	b.n	8003a7e <UART_SetConfig+0x236>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d04f      	beq.n	8003c94 <UART_SetConfig+0x44c>
 8003bf4:	2801      	cmp	r0, #1
 8003bf6:	d04f      	beq.n	8003c98 <UART_SetConfig+0x450>
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	d04f      	beq.n	8003c9c <UART_SetConfig+0x454>
 8003bfc:	2803      	cmp	r0, #3
 8003bfe:	d04f      	beq.n	8003ca0 <UART_SetConfig+0x458>
 8003c00:	2804      	cmp	r0, #4
 8003c02:	d04f      	beq.n	8003ca4 <UART_SetConfig+0x45c>
 8003c04:	2805      	cmp	r0, #5
 8003c06:	d04f      	beq.n	8003ca8 <UART_SetConfig+0x460>
 8003c08:	2806      	cmp	r0, #6
 8003c0a:	d04f      	beq.n	8003cac <UART_SetConfig+0x464>
 8003c0c:	2807      	cmp	r0, #7
 8003c0e:	d04f      	beq.n	8003cb0 <UART_SetConfig+0x468>
 8003c10:	2808      	cmp	r0, #8
 8003c12:	d04f      	beq.n	8003cb4 <UART_SetConfig+0x46c>
 8003c14:	2809      	cmp	r0, #9
 8003c16:	d04f      	beq.n	8003cb8 <UART_SetConfig+0x470>
 8003c18:	280a      	cmp	r0, #10
 8003c1a:	d051      	beq.n	8003cc0 <UART_SetConfig+0x478>
 8003c1c:	4aad      	ldr	r2, [pc, #692]	; (8003ed4 <UART_SetConfig+0x68c>)
 8003c1e:	4bae      	ldr	r3, [pc, #696]	; (8003ed8 <UART_SetConfig+0x690>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c20:	280b      	cmp	r0, #11
 8003c22:	bf18      	it	ne
 8003c24:	461a      	movne	r2, r3
 8003c26:	e72c      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d041      	beq.n	8003cb0 <UART_SetConfig+0x468>
 8003c2c:	2801      	cmp	r0, #1
 8003c2e:	d041      	beq.n	8003cb4 <UART_SetConfig+0x46c>
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d041      	beq.n	8003cb8 <UART_SetConfig+0x470>
 8003c34:	2803      	cmp	r0, #3
 8003c36:	d041      	beq.n	8003cbc <UART_SetConfig+0x474>
 8003c38:	2804      	cmp	r0, #4
 8003c3a:	d041      	beq.n	8003cc0 <UART_SetConfig+0x478>
 8003c3c:	2805      	cmp	r0, #5
 8003c3e:	d041      	beq.n	8003cc4 <UART_SetConfig+0x47c>
 8003c40:	2806      	cmp	r0, #6
 8003c42:	d041      	beq.n	8003cc8 <UART_SetConfig+0x480>
 8003c44:	2807      	cmp	r0, #7
 8003c46:	d041      	beq.n	8003ccc <UART_SetConfig+0x484>
 8003c48:	2808      	cmp	r0, #8
 8003c4a:	d041      	beq.n	8003cd0 <UART_SetConfig+0x488>
 8003c4c:	2809      	cmp	r0, #9
 8003c4e:	d041      	beq.n	8003cd4 <UART_SetConfig+0x48c>
 8003c50:	280a      	cmp	r0, #10
 8003c52:	d042      	beq.n	8003cda <UART_SetConfig+0x492>
 8003c54:	f643 5209 	movw	r2, #15625	; 0x3d09
 8003c58:	4ba0      	ldr	r3, [pc, #640]	; (8003edc <UART_SetConfig+0x694>)
 8003c5a:	e7e1      	b.n	8003c20 <UART_SetConfig+0x3d8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d03f      	beq.n	8003ce0 <UART_SetConfig+0x498>
 8003c60:	2801      	cmp	r0, #1
 8003c62:	d040      	beq.n	8003ce6 <UART_SetConfig+0x49e>
 8003c64:	2802      	cmp	r0, #2
 8003c66:	d041      	beq.n	8003cec <UART_SetConfig+0x4a4>
 8003c68:	2803      	cmp	r0, #3
 8003c6a:	d042      	beq.n	8003cf2 <UART_SetConfig+0x4aa>
 8003c6c:	2804      	cmp	r0, #4
 8003c6e:	d043      	beq.n	8003cf8 <UART_SetConfig+0x4b0>
 8003c70:	2805      	cmp	r0, #5
 8003c72:	d044      	beq.n	8003cfe <UART_SetConfig+0x4b6>
 8003c74:	2806      	cmp	r0, #6
 8003c76:	d045      	beq.n	8003d04 <UART_SetConfig+0x4bc>
 8003c78:	2807      	cmp	r0, #7
 8003c7a:	d046      	beq.n	8003d0a <UART_SetConfig+0x4c2>
 8003c7c:	2808      	cmp	r0, #8
 8003c7e:	d047      	beq.n	8003d10 <UART_SetConfig+0x4c8>
 8003c80:	2809      	cmp	r0, #9
 8003c82:	d048      	beq.n	8003d16 <UART_SetConfig+0x4ce>
 8003c84:	280a      	cmp	r0, #10
 8003c86:	d049      	beq.n	8003d1c <UART_SetConfig+0x4d4>
 8003c88:	280b      	cmp	r0, #11
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2280      	moveq	r2, #128	; 0x80
 8003c8e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8003c92:	e6f6      	b.n	8003a82 <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c94:	4a90      	ldr	r2, [pc, #576]	; (8003ed8 <UART_SetConfig+0x690>)
 8003c96:	e6f4      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003c98:	4a91      	ldr	r2, [pc, #580]	; (8003ee0 <UART_SetConfig+0x698>)
 8003c9a:	e6f2      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003c9c:	4a91      	ldr	r2, [pc, #580]	; (8003ee4 <UART_SetConfig+0x69c>)
 8003c9e:	e6f0      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003ca0:	4a91      	ldr	r2, [pc, #580]	; (8003ee8 <UART_SetConfig+0x6a0>)
 8003ca2:	e6ee      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003ca4:	4a91      	ldr	r2, [pc, #580]	; (8003eec <UART_SetConfig+0x6a4>)
 8003ca6:	e6ec      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003ca8:	4a91      	ldr	r2, [pc, #580]	; (8003ef0 <UART_SetConfig+0x6a8>)
 8003caa:	e6ea      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cac:	4a91      	ldr	r2, [pc, #580]	; (8003ef4 <UART_SetConfig+0x6ac>)
 8003cae:	e6e8      	b.n	8003a82 <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cb0:	4a8a      	ldr	r2, [pc, #552]	; (8003edc <UART_SetConfig+0x694>)
 8003cb2:	e6e6      	b.n	8003a82 <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cb4:	4a90      	ldr	r2, [pc, #576]	; (8003ef8 <UART_SetConfig+0x6b0>)
 8003cb6:	e6e4      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cb8:	4a90      	ldr	r2, [pc, #576]	; (8003efc <UART_SetConfig+0x6b4>)
 8003cba:	e6e2      	b.n	8003a82 <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cbc:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <UART_SetConfig+0x6b8>)
 8003cbe:	e6e0      	b.n	8003a82 <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cc0:	4a90      	ldr	r2, [pc, #576]	; (8003f04 <UART_SetConfig+0x6bc>)
 8003cc2:	e6de      	b.n	8003a82 <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cc4:	4a90      	ldr	r2, [pc, #576]	; (8003f08 <UART_SetConfig+0x6c0>)
 8003cc6:	e6dc      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cc8:	4a90      	ldr	r2, [pc, #576]	; (8003f0c <UART_SetConfig+0x6c4>)
 8003cca:	e6da      	b.n	8003a82 <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ccc:	4a81      	ldr	r2, [pc, #516]	; (8003ed4 <UART_SetConfig+0x68c>)
 8003cce:	e6d8      	b.n	8003a82 <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cd0:	4a8f      	ldr	r2, [pc, #572]	; (8003f10 <UART_SetConfig+0x6c8>)
 8003cd2:	e6d6      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cd4:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003cd8:	e6d3      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cda:	f647 2212 	movw	r2, #31250	; 0x7a12
 8003cde:	e6d0      	b.n	8003a82 <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ce4:	e6cd      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cea:	e6ca      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf0:	e6c7      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cf2:	f241 5255 	movw	r2, #5461	; 0x1555
 8003cf6:	e6c4      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cfc:	e6c1      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003cfe:	f640 42cc 	movw	r2, #3276	; 0xccc
 8003d02:	e6be      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003d04:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8003d08:	e6bb      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d0e:	e6b8      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d14:	e6b5      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1a:	e6b2      	b.n	8003a82 <UART_SetConfig+0x23a>
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	e6af      	b.n	8003a82 <UART_SetConfig+0x23a>
        switch (clocksource)
 8003d22:	2c20      	cmp	r4, #32
 8003d24:	f000 811c 	beq.w	8003f60 <UART_SetConfig+0x718>
 8003d28:	2c40      	cmp	r4, #64	; 0x40
 8003d2a:	f000 814f 	beq.w	8003fcc <UART_SetConfig+0x784>
 8003d2e:	2c10      	cmp	r4, #16
 8003d30:	f47f aeba 	bne.w	8003aa8 <UART_SetConfig+0x260>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4a77      	ldr	r2, [pc, #476]	; (8003f14 <UART_SetConfig+0x6cc>)
 8003d36:	0874      	lsrs	r4, r6, #1
 8003d38:	6813      	ldr	r3, [r2, #0]
 8003d3a:	f013 0f20 	tst.w	r3, #32
 8003d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d40:	f000 80ad 	beq.w	8003e9e <UART_SetConfig+0x656>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4864      	ldr	r0, [pc, #400]	; (8003ed8 <UART_SetConfig+0x690>)
 8003d48:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003d4c:	40d0      	lsrs	r0, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a3 	beq.w	8003e9a <UART_SetConfig+0x652>
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f000 808c 	beq.w	8003e72 <UART_SetConfig+0x62a>
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	f000 808b 	beq.w	8003e76 <UART_SetConfig+0x62e>
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	f000 808a 	beq.w	8003e7a <UART_SetConfig+0x632>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	f000 8089 	beq.w	8003e7e <UART_SetConfig+0x636>
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	f000 8088 	beq.w	8003e82 <UART_SetConfig+0x63a>
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	f000 8087 	beq.w	8003e86 <UART_SetConfig+0x63e>
 8003d78:	2b07      	cmp	r3, #7
 8003d7a:	f000 8086 	beq.w	8003e8a <UART_SetConfig+0x642>
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	f000 8085 	beq.w	8003e8e <UART_SetConfig+0x646>
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	f000 8084 	beq.w	8003e92 <UART_SetConfig+0x64a>
 8003d8a:	2b0a      	cmp	r3, #10
 8003d8c:	f000 8083 	beq.w	8003e96 <UART_SetConfig+0x64e>
 8003d90:	2b0b      	cmp	r3, #11
 8003d92:	f040 8082 	bne.w	8003e9a <UART_SetConfig+0x652>
 8003d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	f7fc faa3 	bl	80002e8 <__aeabi_uldivmod>
 8003da2:	4632      	mov	r2, r6
 8003da4:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003da8:	2300      	movs	r3, #0
 8003daa:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003dae:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003db2:	eb18 0004 	adds.w	r0, r8, r4
 8003db6:	f149 0100 	adc.w	r1, r9, #0
 8003dba:	e02e      	b.n	8003e1a <UART_SetConfig+0x5d2>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003dbc:	f7fe fb32 	bl	8002424 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d053      	beq.n	8003e6e <UART_SetConfig+0x626>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d03d      	beq.n	8003e46 <UART_SetConfig+0x5fe>
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d03d      	beq.n	8003e4a <UART_SetConfig+0x602>
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d03d      	beq.n	8003e4e <UART_SetConfig+0x606>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d03d      	beq.n	8003e52 <UART_SetConfig+0x60a>
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d03d      	beq.n	8003e56 <UART_SetConfig+0x60e>
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d03d      	beq.n	8003e5a <UART_SetConfig+0x612>
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	d03d      	beq.n	8003e5e <UART_SetConfig+0x616>
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d03d      	beq.n	8003e62 <UART_SetConfig+0x61a>
 8003de6:	2b09      	cmp	r3, #9
 8003de8:	d03d      	beq.n	8003e66 <UART_SetConfig+0x61e>
 8003dea:	2b0a      	cmp	r3, #10
 8003dec:	d03d      	beq.n	8003e6a <UART_SetConfig+0x622>
 8003dee:	2b0b      	cmp	r3, #11
 8003df0:	d13d      	bne.n	8003e6e <UART_SetConfig+0x626>
 8003df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df6:	2300      	movs	r3, #0
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f7fc fa75 	bl	80002e8 <__aeabi_uldivmod>
 8003dfe:	686c      	ldr	r4, [r5, #4]
 8003e00:	020f      	lsls	r7, r1, #8
 8003e02:	2300      	movs	r3, #0
 8003e04:	0206      	lsls	r6, r0, #8
 8003e06:	4622      	mov	r2, r4
 8003e08:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003e0c:	0860      	lsrs	r0, r4, #1
 8003e0e:	eb16 0800 	adds.w	r8, r6, r0
 8003e12:	f147 0900 	adc.w	r9, r7, #0
 8003e16:	4640      	mov	r0, r8
 8003e18:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e1a:	f7fc fa65 	bl	80002e8 <__aeabi_uldivmod>
            break;
 8003e1e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e20:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <UART_SetConfig+0x6d0>)
 8003e26:	4299      	cmp	r1, r3
 8003e28:	f63f adb9 	bhi.w	800399e <UART_SetConfig+0x156>
          huart->Instance->BRR = usartdiv;
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	60d8      	str	r0, [r3, #12]
 8003e30:	e65e      	b.n	8003af0 <UART_SetConfig+0x2a8>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e32:	4668      	mov	r0, sp
 8003e34:	f7fe fb08 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e38:	9801      	ldr	r0, [sp, #4]
 8003e3a:	e7c1      	b.n	8003dc0 <UART_SetConfig+0x578>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e3c:	a803      	add	r0, sp, #12
 8003e3e:	f7fe fbad 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e42:	9804      	ldr	r0, [sp, #16]
 8003e44:	e7bc      	b.n	8003dc0 <UART_SetConfig+0x578>
 8003e46:	2202      	movs	r2, #2
 8003e48:	e7d5      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	e7d3      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e4e:	2206      	movs	r2, #6
 8003e50:	e7d1      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e52:	2208      	movs	r2, #8
 8003e54:	e7cf      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e56:	220a      	movs	r2, #10
 8003e58:	e7cd      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	e7cb      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e5e:	2210      	movs	r2, #16
 8003e60:	e7c9      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e62:	2220      	movs	r2, #32
 8003e64:	e7c7      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	e7c5      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	e7c3      	b.n	8003df6 <UART_SetConfig+0x5ae>
 8003e6e:	2201      	movs	r2, #1
 8003e70:	e7c1      	b.n	8003df6 <UART_SetConfig+0x5ae>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e72:	2202      	movs	r2, #2
 8003e74:	e791      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e76:	2204      	movs	r2, #4
 8003e78:	e78f      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e7a:	2206      	movs	r2, #6
 8003e7c:	e78d      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e7e:	2208      	movs	r2, #8
 8003e80:	e78b      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e82:	220a      	movs	r2, #10
 8003e84:	e789      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e86:	220c      	movs	r2, #12
 8003e88:	e787      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	e785      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e8e:	2220      	movs	r2, #32
 8003e90:	e783      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	e781      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	e77f      	b.n	8003d9a <UART_SetConfig+0x552>
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	e77d      	b.n	8003d9a <UART_SetConfig+0x552>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d05b      	beq.n	8003f5a <UART_SetConfig+0x712>
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d03a      	beq.n	8003f1c <UART_SetConfig+0x6d4>
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d041      	beq.n	8003f2e <UART_SetConfig+0x6e6>
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d041      	beq.n	8003f32 <UART_SetConfig+0x6ea>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d043      	beq.n	8003f3a <UART_SetConfig+0x6f2>
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d043      	beq.n	8003f3e <UART_SetConfig+0x6f6>
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d043      	beq.n	8003f42 <UART_SetConfig+0x6fa>
 8003eba:	2b07      	cmp	r3, #7
 8003ebc:	d045      	beq.n	8003f4a <UART_SetConfig+0x702>
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d045      	beq.n	8003f4e <UART_SetConfig+0x706>
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	d045      	beq.n	8003f52 <UART_SetConfig+0x70a>
 8003ec6:	2b0a      	cmp	r3, #10
 8003ec8:	d045      	beq.n	8003f56 <UART_SetConfig+0x70e>
 8003eca:	2b0b      	cmp	r3, #11
 8003ecc:	d145      	bne.n	8003f5a <UART_SetConfig+0x712>
 8003ece:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <UART_SetConfig+0x690>)
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	e025      	b.n	8003f20 <UART_SetConfig+0x6d8>
 8003ed4:	0003d090 	.word	0x0003d090
 8003ed8:	03d09000 	.word	0x03d09000
 8003edc:	003d0900 	.word	0x003d0900
 8003ee0:	01e84800 	.word	0x01e84800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	00a2c2aa 	.word	0x00a2c2aa
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	0061a800 	.word	0x0061a800
 8003ef4:	00516155 	.word	0x00516155
 8003ef8:	001e8480 	.word	0x001e8480
 8003efc:	000f4240 	.word	0x000f4240
 8003f00:	000a2c2a 	.word	0x000a2c2a
 8003f04:	0007a120 	.word	0x0007a120
 8003f08:	00061a80 	.word	0x00061a80
 8003f0c:	00051615 	.word	0x00051615
 8003f10:	0001e848 	.word	0x0001e848
 8003f14:	58024400 	.word	0x58024400
 8003f18:	000ffcff 	.word	0x000ffcff
 8003f1c:	48ae      	ldr	r0, [pc, #696]	; (80041d8 <UART_SetConfig+0x990>)
 8003f1e:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f20:	1900      	adds	r0, r0, r4
 8003f22:	4632      	mov	r2, r6
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	f141 0100 	adc.w	r1, r1, #0
 8003f2c:	e775      	b.n	8003e1a <UART_SetConfig+0x5d2>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f2e:	48ab      	ldr	r0, [pc, #684]	; (80041dc <UART_SetConfig+0x994>)
 8003f30:	e7ce      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f32:	a1a1      	add	r1, pc, #644	; (adr r1, 80041b8 <UART_SetConfig+0x970>)
 8003f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f38:	e7f2      	b.n	8003f20 <UART_SetConfig+0x6d8>
 8003f3a:	48a9      	ldr	r0, [pc, #676]	; (80041e0 <UART_SetConfig+0x998>)
 8003f3c:	e7c8      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f3e:	48a9      	ldr	r0, [pc, #676]	; (80041e4 <UART_SetConfig+0x99c>)
 8003f40:	e7c6      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f42:	a19f      	add	r1, pc, #636	; (adr r1, 80041c0 <UART_SetConfig+0x978>)
 8003f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f48:	e7ea      	b.n	8003f20 <UART_SetConfig+0x6d8>
 8003f4a:	48a7      	ldr	r0, [pc, #668]	; (80041e8 <UART_SetConfig+0x9a0>)
 8003f4c:	e7c0      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f4e:	48a7      	ldr	r0, [pc, #668]	; (80041ec <UART_SetConfig+0x9a4>)
 8003f50:	e7be      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f52:	48a7      	ldr	r0, [pc, #668]	; (80041f0 <UART_SetConfig+0x9a8>)
 8003f54:	e7bc      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f56:	48a7      	ldr	r0, [pc, #668]	; (80041f4 <UART_SetConfig+0x9ac>)
 8003f58:	e7ba      	b.n	8003ed0 <UART_SetConfig+0x688>
 8003f5a:	48a7      	ldr	r0, [pc, #668]	; (80041f8 <UART_SetConfig+0x9b0>)
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	e7df      	b.n	8003f20 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f62:	b38b      	cbz	r3, 8003fc8 <UART_SetConfig+0x780>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d016      	beq.n	8003f96 <UART_SetConfig+0x74e>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d016      	beq.n	8003f9a <UART_SetConfig+0x752>
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d016      	beq.n	8003f9e <UART_SetConfig+0x756>
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d019      	beq.n	8003fa8 <UART_SetConfig+0x760>
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d019      	beq.n	8003fac <UART_SetConfig+0x764>
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d019      	beq.n	8003fb0 <UART_SetConfig+0x768>
 8003f7c:	2b07      	cmp	r3, #7
 8003f7e:	d01b      	beq.n	8003fb8 <UART_SetConfig+0x770>
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d01b      	beq.n	8003fbc <UART_SetConfig+0x774>
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d01b      	beq.n	8003fc0 <UART_SetConfig+0x778>
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d01b      	beq.n	8003fc4 <UART_SetConfig+0x77c>
 8003f8c:	2b0b      	cmp	r3, #11
 8003f8e:	d11b      	bne.n	8003fc8 <UART_SetConfig+0x780>
 8003f90:	489a      	ldr	r0, [pc, #616]	; (80041fc <UART_SetConfig+0x9b4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f92:	2100      	movs	r1, #0
 8003f94:	e006      	b.n	8003fa4 <UART_SetConfig+0x75c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f96:	4895      	ldr	r0, [pc, #596]	; (80041ec <UART_SetConfig+0x9a4>)
 8003f98:	e7fb      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003f9a:	4895      	ldr	r0, [pc, #596]	; (80041f0 <UART_SetConfig+0x9a8>)
 8003f9c:	e7f9      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003f9e:	a18a      	add	r1, pc, #552	; (adr r1, 80041c8 <UART_SetConfig+0x980>)
 8003fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa4:	0874      	lsrs	r4, r6, #1
 8003fa6:	e7bb      	b.n	8003f20 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa8:	4892      	ldr	r0, [pc, #584]	; (80041f4 <UART_SetConfig+0x9ac>)
 8003faa:	e7f2      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fac:	4894      	ldr	r0, [pc, #592]	; (8004200 <UART_SetConfig+0x9b8>)
 8003fae:	e7f0      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fb0:	a187      	add	r1, pc, #540	; (adr r1, 80041d0 <UART_SetConfig+0x988>)
 8003fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fb6:	e7f5      	b.n	8003fa4 <UART_SetConfig+0x75c>
 8003fb8:	4892      	ldr	r0, [pc, #584]	; (8004204 <UART_SetConfig+0x9bc>)
 8003fba:	e7ea      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fbc:	4892      	ldr	r0, [pc, #584]	; (8004208 <UART_SetConfig+0x9c0>)
 8003fbe:	e7e8      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fc0:	4892      	ldr	r0, [pc, #584]	; (800420c <UART_SetConfig+0x9c4>)
 8003fc2:	e7e6      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fc4:	4892      	ldr	r0, [pc, #584]	; (8004210 <UART_SetConfig+0x9c8>)
 8003fc6:	e7e4      	b.n	8003f92 <UART_SetConfig+0x74a>
 8003fc8:	4887      	ldr	r0, [pc, #540]	; (80041e8 <UART_SetConfig+0x9a0>)
 8003fca:	e7e2      	b.n	8003f92 <UART_SetConfig+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fce:	b39b      	cbz	r3, 8004038 <UART_SetConfig+0x7f0>
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d016      	beq.n	8004002 <UART_SetConfig+0x7ba>
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d017      	beq.n	8004008 <UART_SetConfig+0x7c0>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d018      	beq.n	800400e <UART_SetConfig+0x7c6>
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d018      	beq.n	8004012 <UART_SetConfig+0x7ca>
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d019      	beq.n	8004018 <UART_SetConfig+0x7d0>
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d019      	beq.n	800401c <UART_SetConfig+0x7d4>
 8003fe8:	2b07      	cmp	r3, #7
 8003fea:	d019      	beq.n	8004020 <UART_SetConfig+0x7d8>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d01a      	beq.n	8004026 <UART_SetConfig+0x7de>
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d01b      	beq.n	800402c <UART_SetConfig+0x7e4>
 8003ff4:	2b0a      	cmp	r3, #10
 8003ff6:	d01c      	beq.n	8004032 <UART_SetConfig+0x7ea>
 8003ff8:	2b0b      	cmp	r3, #11
 8003ffa:	d11d      	bne.n	8004038 <UART_SetConfig+0x7f0>
 8003ffc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004000:	e7c7      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004002:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004006:	e7c4      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004008:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800400c:	e7c1      	b.n	8003f92 <UART_SetConfig+0x74a>
 800400e:	4881      	ldr	r0, [pc, #516]	; (8004214 <UART_SetConfig+0x9cc>)
 8004010:	e7bf      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004012:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004016:	e7bc      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004018:	487f      	ldr	r0, [pc, #508]	; (8004218 <UART_SetConfig+0x9d0>)
 800401a:	e7ba      	b.n	8003f92 <UART_SetConfig+0x74a>
 800401c:	487f      	ldr	r0, [pc, #508]	; (800421c <UART_SetConfig+0x9d4>)
 800401e:	e7b8      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004020:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004024:	e7b5      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004026:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800402a:	e7b2      	b.n	8003f92 <UART_SetConfig+0x74a>
 800402c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004030:	e7af      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004032:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004036:	e7ac      	b.n	8003f92 <UART_SetConfig+0x74a>
 8004038:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800403c:	e7a9      	b.n	8003f92 <UART_SetConfig+0x74a>
    switch (clocksource)
 800403e:	2c20      	cmp	r4, #32
 8004040:	f000 818e 	beq.w	8004360 <UART_SetConfig+0xb18>
 8004044:	2c40      	cmp	r4, #64	; 0x40
 8004046:	f000 81c4 	beq.w	80043d2 <UART_SetConfig+0xb8a>
 800404a:	2c10      	cmp	r4, #16
 800404c:	f47f ac45 	bne.w	80038da <UART_SetConfig+0x92>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004050:	4b73      	ldr	r3, [pc, #460]	; (8004220 <UART_SetConfig+0x9d8>)
 8004052:	6869      	ldr	r1, [r5, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	f012 0f20 	tst.w	r2, #32
 800405a:	f000 814b 	beq.w	80042f4 <UART_SetConfig+0xaac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a68      	ldr	r2, [pc, #416]	; (8004204 <UART_SetConfig+0x9bc>)
 8004062:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	2800      	cmp	r0, #0
 800406c:	f000 812c 	beq.w	80042c8 <UART_SetConfig+0xa80>
 8004070:	2801      	cmp	r0, #1
 8004072:	f000 812b 	beq.w	80042cc <UART_SetConfig+0xa84>
 8004076:	2802      	cmp	r0, #2
 8004078:	f000 812a 	beq.w	80042d0 <UART_SetConfig+0xa88>
 800407c:	2803      	cmp	r0, #3
 800407e:	f000 8129 	beq.w	80042d4 <UART_SetConfig+0xa8c>
 8004082:	2804      	cmp	r0, #4
 8004084:	f000 8128 	beq.w	80042d8 <UART_SetConfig+0xa90>
 8004088:	2805      	cmp	r0, #5
 800408a:	f000 8127 	beq.w	80042dc <UART_SetConfig+0xa94>
 800408e:	2806      	cmp	r0, #6
 8004090:	f000 8126 	beq.w	80042e0 <UART_SetConfig+0xa98>
 8004094:	2807      	cmp	r0, #7
 8004096:	f000 8125 	beq.w	80042e4 <UART_SetConfig+0xa9c>
 800409a:	2808      	cmp	r0, #8
 800409c:	f000 8124 	beq.w	80042e8 <UART_SetConfig+0xaa0>
 80040a0:	2809      	cmp	r0, #9
 80040a2:	f000 8123 	beq.w	80042ec <UART_SetConfig+0xaa4>
 80040a6:	280a      	cmp	r0, #10
 80040a8:	f000 8122 	beq.w	80042f0 <UART_SetConfig+0xaa8>
 80040ac:	280b      	cmp	r0, #11
 80040ae:	bf14      	ite	ne
 80040b0:	2201      	movne	r2, #1
 80040b2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80040b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040ba:	e01f      	b.n	80040fc <UART_SetConfig+0x8b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fd fc4a 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80040c2:	b309      	cbz	r1, 8004108 <UART_SetConfig+0x8c0>
 80040c4:	2901      	cmp	r1, #1
 80040c6:	d021      	beq.n	800410c <UART_SetConfig+0x8c4>
 80040c8:	2902      	cmp	r1, #2
 80040ca:	d021      	beq.n	8004110 <UART_SetConfig+0x8c8>
 80040cc:	2903      	cmp	r1, #3
 80040ce:	d021      	beq.n	8004114 <UART_SetConfig+0x8cc>
 80040d0:	2904      	cmp	r1, #4
 80040d2:	d021      	beq.n	8004118 <UART_SetConfig+0x8d0>
 80040d4:	2905      	cmp	r1, #5
 80040d6:	d021      	beq.n	800411c <UART_SetConfig+0x8d4>
 80040d8:	2906      	cmp	r1, #6
 80040da:	d021      	beq.n	8004120 <UART_SetConfig+0x8d8>
 80040dc:	2907      	cmp	r1, #7
 80040de:	d021      	beq.n	8004124 <UART_SetConfig+0x8dc>
 80040e0:	2908      	cmp	r1, #8
 80040e2:	d021      	beq.n	8004128 <UART_SetConfig+0x8e0>
 80040e4:	2909      	cmp	r1, #9
 80040e6:	d021      	beq.n	800412c <UART_SetConfig+0x8e4>
 80040e8:	290a      	cmp	r1, #10
 80040ea:	d021      	beq.n	8004130 <UART_SetConfig+0x8e8>
 80040ec:	290b      	cmp	r1, #11
 80040ee:	bf14      	ite	ne
 80040f0:	2201      	movne	r2, #1
 80040f2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80040f6:	6869      	ldr	r1, [r5, #4]
 80040f8:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040fc:	084b      	lsrs	r3, r1, #1
 80040fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004102:	fbb3 f3f1 	udiv	r3, r3, r1
 8004106:	e03a      	b.n	800417e <UART_SetConfig+0x936>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004108:	2201      	movs	r2, #1
 800410a:	e7f4      	b.n	80040f6 <UART_SetConfig+0x8ae>
 800410c:	2202      	movs	r2, #2
 800410e:	e7f2      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004110:	2204      	movs	r2, #4
 8004112:	e7f0      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004114:	2206      	movs	r2, #6
 8004116:	e7ee      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004118:	2208      	movs	r2, #8
 800411a:	e7ec      	b.n	80040f6 <UART_SetConfig+0x8ae>
 800411c:	220a      	movs	r2, #10
 800411e:	e7ea      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004120:	220c      	movs	r2, #12
 8004122:	e7e8      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004124:	2210      	movs	r2, #16
 8004126:	e7e6      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004128:	2220      	movs	r2, #32
 800412a:	e7e4      	b.n	80040f6 <UART_SetConfig+0x8ae>
 800412c:	2240      	movs	r2, #64	; 0x40
 800412e:	e7e2      	b.n	80040f6 <UART_SetConfig+0x8ae>
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	e7e0      	b.n	80040f6 <UART_SetConfig+0x8ae>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004134:	f7fd fc20 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004138:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800413a:	b1c2      	cbz	r2, 800416e <UART_SetConfig+0x926>
 800413c:	2a01      	cmp	r2, #1
 800413e:	d02f      	beq.n	80041a0 <UART_SetConfig+0x958>
 8004140:	2a02      	cmp	r2, #2
 8004142:	d02f      	beq.n	80041a4 <UART_SetConfig+0x95c>
 8004144:	2a03      	cmp	r2, #3
 8004146:	d02f      	beq.n	80041a8 <UART_SetConfig+0x960>
 8004148:	2a04      	cmp	r2, #4
 800414a:	d02f      	beq.n	80041ac <UART_SetConfig+0x964>
 800414c:	2a05      	cmp	r2, #5
 800414e:	d02f      	beq.n	80041b0 <UART_SetConfig+0x968>
 8004150:	2a06      	cmp	r2, #6
 8004152:	d067      	beq.n	8004224 <UART_SetConfig+0x9dc>
 8004154:	2a07      	cmp	r2, #7
 8004156:	d067      	beq.n	8004228 <UART_SetConfig+0x9e0>
 8004158:	2a08      	cmp	r2, #8
 800415a:	d067      	beq.n	800422c <UART_SetConfig+0x9e4>
 800415c:	2a09      	cmp	r2, #9
 800415e:	d067      	beq.n	8004230 <UART_SetConfig+0x9e8>
 8004160:	2a0a      	cmp	r2, #10
 8004162:	d067      	beq.n	8004234 <UART_SetConfig+0x9ec>
 8004164:	2a0b      	cmp	r2, #11
 8004166:	bf14      	ite	ne
 8004168:	2401      	movne	r4, #1
 800416a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800416e:	686a      	ldr	r2, [r5, #4]
 8004170:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004174:	0853      	lsrs	r3, r2, #1
 8004176:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800417a:	fbb3 f3f2 	udiv	r3, r3, r2
 800417e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004180:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004182:	f1a3 0010 	sub.w	r0, r3, #16
 8004186:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800418a:	4288      	cmp	r0, r1
 800418c:	f63f ac07 	bhi.w	800399e <UART_SetConfig+0x156>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004190:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004194:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8004198:	6828      	ldr	r0, [r5, #0]
 800419a:	430b      	orrs	r3, r1
 800419c:	60c3      	str	r3, [r0, #12]
 800419e:	e4a7      	b.n	8003af0 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041a0:	2402      	movs	r4, #2
 80041a2:	e7e4      	b.n	800416e <UART_SetConfig+0x926>
 80041a4:	2404      	movs	r4, #4
 80041a6:	e7e2      	b.n	800416e <UART_SetConfig+0x926>
 80041a8:	2406      	movs	r4, #6
 80041aa:	e7e0      	b.n	800416e <UART_SetConfig+0x926>
 80041ac:	2408      	movs	r4, #8
 80041ae:	e7de      	b.n	800416e <UART_SetConfig+0x926>
 80041b0:	240a      	movs	r4, #10
 80041b2:	e7dc      	b.n	800416e <UART_SetConfig+0x926>
 80041b4:	f3af 8000 	nop.w
 80041b8:	a2c2aa00 	.word	0xa2c2aa00
 80041bc:	00000000 	.word	0x00000000
 80041c0:	51615500 	.word	0x51615500
 80041c4:	00000000 	.word	0x00000000
 80041c8:	0a2c2a00 	.word	0x0a2c2a00
 80041cc:	00000000 	.word	0x00000000
 80041d0:	05161500 	.word	0x05161500
 80041d4:	00000000 	.word	0x00000000
 80041d8:	e8480000 	.word	0xe8480000
 80041dc:	f4240000 	.word	0xf4240000
 80041e0:	7a120000 	.word	0x7a120000
 80041e4:	61a80000 	.word	0x61a80000
 80041e8:	3d090000 	.word	0x3d090000
 80041ec:	1e848000 	.word	0x1e848000
 80041f0:	0f424000 	.word	0x0f424000
 80041f4:	07a12000 	.word	0x07a12000
 80041f8:	d0900000 	.word	0xd0900000
 80041fc:	003d0900 	.word	0x003d0900
 8004200:	061a8000 	.word	0x061a8000
 8004204:	03d09000 	.word	0x03d09000
 8004208:	01e84800 	.word	0x01e84800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200
 8004214:	00155500 	.word	0x00155500
 8004218:	000ccc00 	.word	0x000ccc00
 800421c:	000aaa00 	.word	0x000aaa00
 8004220:	58024400 	.word	0x58024400
 8004224:	240c      	movs	r4, #12
 8004226:	e7a2      	b.n	800416e <UART_SetConfig+0x926>
 8004228:	2410      	movs	r4, #16
 800422a:	e7a0      	b.n	800416e <UART_SetConfig+0x926>
 800422c:	2420      	movs	r4, #32
 800422e:	e79e      	b.n	800416e <UART_SetConfig+0x926>
 8004230:	2440      	movs	r4, #64	; 0x40
 8004232:	e79c      	b.n	800416e <UART_SetConfig+0x926>
 8004234:	2480      	movs	r4, #128	; 0x80
 8004236:	e79a      	b.n	800416e <UART_SetConfig+0x926>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004238:	4668      	mov	r0, sp
 800423a:	f7fe f905 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	b36a      	cbz	r2, 80042a0 <UART_SetConfig+0xa58>
 8004244:	2a01      	cmp	r2, #1
 8004246:	d02d      	beq.n	80042a4 <UART_SetConfig+0xa5c>
 8004248:	2a02      	cmp	r2, #2
 800424a:	d016      	beq.n	800427a <UART_SetConfig+0xa32>
 800424c:	2a03      	cmp	r2, #3
 800424e:	d02d      	beq.n	80042ac <UART_SetConfig+0xa64>
 8004250:	2a04      	cmp	r2, #4
 8004252:	d011      	beq.n	8004278 <UART_SetConfig+0xa30>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004254:	2a05      	cmp	r2, #5
 8004256:	d02b      	beq.n	80042b0 <UART_SetConfig+0xa68>
 8004258:	2a06      	cmp	r2, #6
 800425a:	d02b      	beq.n	80042b4 <UART_SetConfig+0xa6c>
 800425c:	2a07      	cmp	r2, #7
 800425e:	d02b      	beq.n	80042b8 <UART_SetConfig+0xa70>
 8004260:	2a08      	cmp	r2, #8
 8004262:	d02b      	beq.n	80042bc <UART_SetConfig+0xa74>
 8004264:	2a09      	cmp	r2, #9
 8004266:	d02b      	beq.n	80042c0 <UART_SetConfig+0xa78>
 8004268:	2a0a      	cmp	r2, #10
 800426a:	d02b      	beq.n	80042c4 <UART_SetConfig+0xa7c>
 800426c:	2a0b      	cmp	r2, #11
 800426e:	bf14      	ite	ne
 8004270:	2401      	movne	r4, #1
 8004272:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8004276:	e000      	b.n	800427a <UART_SetConfig+0xa32>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004278:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427a:	686a      	ldr	r2, [r5, #4]
 800427c:	fbb3 f4f4 	udiv	r4, r3, r4
 8004280:	e778      	b.n	8004174 <UART_SetConfig+0x92c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004282:	a803      	add	r0, sp, #12
 8004284:	f7fe f98a 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004288:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	b142      	cbz	r2, 80042a0 <UART_SetConfig+0xa58>
 800428e:	2a01      	cmp	r2, #1
 8004290:	d008      	beq.n	80042a4 <UART_SetConfig+0xa5c>
 8004292:	2a02      	cmp	r2, #2
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0xa60>
 8004296:	2a03      	cmp	r2, #3
 8004298:	d008      	beq.n	80042ac <UART_SetConfig+0xa64>
 800429a:	2a04      	cmp	r2, #4
 800429c:	d1da      	bne.n	8004254 <UART_SetConfig+0xa0c>
 800429e:	e7ec      	b.n	800427a <UART_SetConfig+0xa32>
 80042a0:	2401      	movs	r4, #1
 80042a2:	e7ea      	b.n	800427a <UART_SetConfig+0xa32>
 80042a4:	2402      	movs	r4, #2
 80042a6:	e7e8      	b.n	800427a <UART_SetConfig+0xa32>
 80042a8:	2404      	movs	r4, #4
 80042aa:	e7e6      	b.n	800427a <UART_SetConfig+0xa32>
 80042ac:	2406      	movs	r4, #6
 80042ae:	e7e4      	b.n	800427a <UART_SetConfig+0xa32>
 80042b0:	240a      	movs	r4, #10
 80042b2:	e7e2      	b.n	800427a <UART_SetConfig+0xa32>
 80042b4:	240c      	movs	r4, #12
 80042b6:	e7e0      	b.n	800427a <UART_SetConfig+0xa32>
 80042b8:	2410      	movs	r4, #16
 80042ba:	e7de      	b.n	800427a <UART_SetConfig+0xa32>
 80042bc:	2420      	movs	r4, #32
 80042be:	e7dc      	b.n	800427a <UART_SetConfig+0xa32>
 80042c0:	2440      	movs	r4, #64	; 0x40
 80042c2:	e7da      	b.n	800427a <UART_SetConfig+0xa32>
 80042c4:	2480      	movs	r4, #128	; 0x80
 80042c6:	e7d8      	b.n	800427a <UART_SetConfig+0xa32>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c8:	2201      	movs	r2, #1
 80042ca:	e6f4      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042cc:	2202      	movs	r2, #2
 80042ce:	e6f2      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042d0:	2204      	movs	r2, #4
 80042d2:	e6f0      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042d4:	2206      	movs	r2, #6
 80042d6:	e6ee      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042d8:	2208      	movs	r2, #8
 80042da:	e6ec      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042dc:	220a      	movs	r2, #10
 80042de:	e6ea      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042e0:	220c      	movs	r2, #12
 80042e2:	e6e8      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042e4:	2210      	movs	r2, #16
 80042e6:	e6e6      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042e8:	2220      	movs	r2, #32
 80042ea:	e6e4      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042ec:	2240      	movs	r2, #64	; 0x40
 80042ee:	e6e2      	b.n	80040b6 <UART_SetConfig+0x86e>
 80042f0:	2280      	movs	r2, #128	; 0x80
 80042f2:	e6e0      	b.n	80040b6 <UART_SetConfig+0x86e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	b1f0      	cbz	r0, 8004334 <UART_SetConfig+0xaec>
 80042f6:	2801      	cmp	r0, #1
 80042f8:	d01e      	beq.n	8004338 <UART_SetConfig+0xaf0>
 80042fa:	2802      	cmp	r0, #2
 80042fc:	d01e      	beq.n	800433c <UART_SetConfig+0xaf4>
 80042fe:	2803      	cmp	r0, #3
 8004300:	d01e      	beq.n	8004340 <UART_SetConfig+0xaf8>
 8004302:	2804      	cmp	r0, #4
 8004304:	d01e      	beq.n	8004344 <UART_SetConfig+0xafc>
 8004306:	2805      	cmp	r0, #5
 8004308:	d01e      	beq.n	8004348 <UART_SetConfig+0xb00>
 800430a:	2806      	cmp	r0, #6
 800430c:	d01e      	beq.n	800434c <UART_SetConfig+0xb04>
 800430e:	2807      	cmp	r0, #7
 8004310:	d01e      	beq.n	8004350 <UART_SetConfig+0xb08>
 8004312:	2808      	cmp	r0, #8
 8004314:	d01e      	beq.n	8004354 <UART_SetConfig+0xb0c>
 8004316:	2809      	cmp	r0, #9
 8004318:	d01e      	beq.n	8004358 <UART_SetConfig+0xb10>
 800431a:	280a      	cmp	r0, #10
 800431c:	d01e      	beq.n	800435c <UART_SetConfig+0xb14>
 800431e:	4ba3      	ldr	r3, [pc, #652]	; (80045ac <UART_SetConfig+0xd64>)
 8004320:	4aa3      	ldr	r2, [pc, #652]	; (80045b0 <UART_SetConfig+0xd68>)
 8004322:	280b      	cmp	r0, #11
 8004324:	bf14      	ite	ne
 8004326:	4610      	movne	r0, r2
 8004328:	4618      	moveq	r0, r3
 800432a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 800432e:	fbb0 f3f1 	udiv	r3, r0, r1
 8004332:	e724      	b.n	800417e <UART_SetConfig+0x936>
 8004334:	489e      	ldr	r0, [pc, #632]	; (80045b0 <UART_SetConfig+0xd68>)
 8004336:	e7f8      	b.n	800432a <UART_SetConfig+0xae2>
 8004338:	489e      	ldr	r0, [pc, #632]	; (80045b4 <UART_SetConfig+0xd6c>)
 800433a:	e7f6      	b.n	800432a <UART_SetConfig+0xae2>
 800433c:	489e      	ldr	r0, [pc, #632]	; (80045b8 <UART_SetConfig+0xd70>)
 800433e:	e7f4      	b.n	800432a <UART_SetConfig+0xae2>
 8004340:	489e      	ldr	r0, [pc, #632]	; (80045bc <UART_SetConfig+0xd74>)
 8004342:	e7f2      	b.n	800432a <UART_SetConfig+0xae2>
 8004344:	489e      	ldr	r0, [pc, #632]	; (80045c0 <UART_SetConfig+0xd78>)
 8004346:	e7f0      	b.n	800432a <UART_SetConfig+0xae2>
 8004348:	489e      	ldr	r0, [pc, #632]	; (80045c4 <UART_SetConfig+0xd7c>)
 800434a:	e7ee      	b.n	800432a <UART_SetConfig+0xae2>
 800434c:	489e      	ldr	r0, [pc, #632]	; (80045c8 <UART_SetConfig+0xd80>)
 800434e:	e7ec      	b.n	800432a <UART_SetConfig+0xae2>
 8004350:	489e      	ldr	r0, [pc, #632]	; (80045cc <UART_SetConfig+0xd84>)
 8004352:	e7ea      	b.n	800432a <UART_SetConfig+0xae2>
 8004354:	489e      	ldr	r0, [pc, #632]	; (80045d0 <UART_SetConfig+0xd88>)
 8004356:	e7e8      	b.n	800432a <UART_SetConfig+0xae2>
 8004358:	489e      	ldr	r0, [pc, #632]	; (80045d4 <UART_SetConfig+0xd8c>)
 800435a:	e7e6      	b.n	800432a <UART_SetConfig+0xae2>
 800435c:	489e      	ldr	r0, [pc, #632]	; (80045d8 <UART_SetConfig+0xd90>)
 800435e:	e7e4      	b.n	800432a <UART_SetConfig+0xae2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004360:	b300      	cbz	r0, 80043a4 <UART_SetConfig+0xb5c>
 8004362:	2801      	cmp	r0, #1
 8004364:	d020      	beq.n	80043a8 <UART_SetConfig+0xb60>
 8004366:	2802      	cmp	r0, #2
 8004368:	d020      	beq.n	80043ac <UART_SetConfig+0xb64>
 800436a:	2803      	cmp	r0, #3
 800436c:	d020      	beq.n	80043b0 <UART_SetConfig+0xb68>
 800436e:	2804      	cmp	r0, #4
 8004370:	d020      	beq.n	80043b4 <UART_SetConfig+0xb6c>
 8004372:	2805      	cmp	r0, #5
 8004374:	d020      	beq.n	80043b8 <UART_SetConfig+0xb70>
 8004376:	2806      	cmp	r0, #6
 8004378:	d020      	beq.n	80043bc <UART_SetConfig+0xb74>
 800437a:	2807      	cmp	r0, #7
 800437c:	d020      	beq.n	80043c0 <UART_SetConfig+0xb78>
 800437e:	2808      	cmp	r0, #8
 8004380:	d020      	beq.n	80043c4 <UART_SetConfig+0xb7c>
 8004382:	2809      	cmp	r0, #9
 8004384:	d020      	beq.n	80043c8 <UART_SetConfig+0xb80>
 8004386:	280a      	cmp	r0, #10
 8004388:	d020      	beq.n	80043cc <UART_SetConfig+0xb84>
 800438a:	f647 2212 	movw	r2, #31250	; 0x7a12
 800438e:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <UART_SetConfig+0xd84>)
 8004390:	280b      	cmp	r0, #11
 8004392:	bf14      	ite	ne
 8004394:	4618      	movne	r0, r3
 8004396:	4610      	moveq	r0, r2
 8004398:	686b      	ldr	r3, [r5, #4]
 800439a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800439e:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a2:	e6ec      	b.n	800417e <UART_SetConfig+0x936>
 80043a4:	4889      	ldr	r0, [pc, #548]	; (80045cc <UART_SetConfig+0xd84>)
 80043a6:	e7f7      	b.n	8004398 <UART_SetConfig+0xb50>
 80043a8:	4889      	ldr	r0, [pc, #548]	; (80045d0 <UART_SetConfig+0xd88>)
 80043aa:	e7f5      	b.n	8004398 <UART_SetConfig+0xb50>
 80043ac:	4889      	ldr	r0, [pc, #548]	; (80045d4 <UART_SetConfig+0xd8c>)
 80043ae:	e7f3      	b.n	8004398 <UART_SetConfig+0xb50>
 80043b0:	488a      	ldr	r0, [pc, #552]	; (80045dc <UART_SetConfig+0xd94>)
 80043b2:	e7f1      	b.n	8004398 <UART_SetConfig+0xb50>
 80043b4:	4888      	ldr	r0, [pc, #544]	; (80045d8 <UART_SetConfig+0xd90>)
 80043b6:	e7ef      	b.n	8004398 <UART_SetConfig+0xb50>
 80043b8:	4889      	ldr	r0, [pc, #548]	; (80045e0 <UART_SetConfig+0xd98>)
 80043ba:	e7ed      	b.n	8004398 <UART_SetConfig+0xb50>
 80043bc:	4889      	ldr	r0, [pc, #548]	; (80045e4 <UART_SetConfig+0xd9c>)
 80043be:	e7eb      	b.n	8004398 <UART_SetConfig+0xb50>
 80043c0:	487a      	ldr	r0, [pc, #488]	; (80045ac <UART_SetConfig+0xd64>)
 80043c2:	e7e9      	b.n	8004398 <UART_SetConfig+0xb50>
 80043c4:	4888      	ldr	r0, [pc, #544]	; (80045e8 <UART_SetConfig+0xda0>)
 80043c6:	e7e7      	b.n	8004398 <UART_SetConfig+0xb50>
 80043c8:	4888      	ldr	r0, [pc, #544]	; (80045ec <UART_SetConfig+0xda4>)
 80043ca:	e7e5      	b.n	8004398 <UART_SetConfig+0xb50>
 80043cc:	f24f 4024 	movw	r0, #62500	; 0xf424
 80043d0:	e7e2      	b.n	8004398 <UART_SetConfig+0xb50>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d2:	b1e8      	cbz	r0, 8004410 <UART_SetConfig+0xbc8>
 80043d4:	2801      	cmp	r0, #1
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0xbc0>
 80043d8:	2802      	cmp	r0, #2
 80043da:	d01c      	beq.n	8004416 <UART_SetConfig+0xbce>
 80043dc:	2803      	cmp	r0, #3
 80043de:	d01d      	beq.n	800441c <UART_SetConfig+0xbd4>
 80043e0:	2804      	cmp	r0, #4
 80043e2:	d01e      	beq.n	8004422 <UART_SetConfig+0xbda>
 80043e4:	2805      	cmp	r0, #5
 80043e6:	d01f      	beq.n	8004428 <UART_SetConfig+0xbe0>
 80043e8:	2806      	cmp	r0, #6
 80043ea:	d020      	beq.n	800442e <UART_SetConfig+0xbe6>
 80043ec:	2807      	cmp	r0, #7
 80043ee:	d021      	beq.n	8004434 <UART_SetConfig+0xbec>
 80043f0:	2808      	cmp	r0, #8
 80043f2:	d022      	beq.n	800443a <UART_SetConfig+0xbf2>
 80043f4:	2809      	cmp	r0, #9
 80043f6:	d023      	beq.n	8004440 <UART_SetConfig+0xbf8>
 80043f8:	280a      	cmp	r0, #10
 80043fa:	d024      	beq.n	8004446 <UART_SetConfig+0xbfe>
 80043fc:	280b      	cmp	r0, #11
 80043fe:	bf14      	ite	ne
 8004400:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8004404:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004408:	6869      	ldr	r1, [r5, #4]
 800440a:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 800440e:	e678      	b.n	8004102 <UART_SetConfig+0x8ba>
 8004410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004414:	e7f8      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800441a:	e7f5      	b.n	8004408 <UART_SetConfig+0xbc0>
 800441c:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8004420:	e7f2      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004426:	e7ef      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004428:	f641 1298 	movw	r2, #6552	; 0x1998
 800442c:	e7ec      	b.n	8004408 <UART_SetConfig+0xbc0>
 800442e:	f241 5254 	movw	r2, #5460	; 0x1554
 8004432:	e7e9      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004438:	e7e6      	b.n	8004408 <UART_SetConfig+0xbc0>
 800443a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443e:	e7e3      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004444:	e7e0      	b.n	8004408 <UART_SetConfig+0xbc0>
 8004446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444a:	e7dd      	b.n	8004408 <UART_SetConfig+0xbc0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fd fa82 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004450:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004452:	b363      	cbz	r3, 80044ae <UART_SetConfig+0xc66>
 8004454:	2b01      	cmp	r3, #1
 8004456:	d02c      	beq.n	80044b2 <UART_SetConfig+0xc6a>
 8004458:	2b02      	cmp	r3, #2
 800445a:	d02c      	beq.n	80044b6 <UART_SetConfig+0xc6e>
 800445c:	2b03      	cmp	r3, #3
 800445e:	d02c      	beq.n	80044ba <UART_SetConfig+0xc72>
 8004460:	2b04      	cmp	r3, #4
 8004462:	d02c      	beq.n	80044be <UART_SetConfig+0xc76>
 8004464:	2b05      	cmp	r3, #5
 8004466:	d02c      	beq.n	80044c2 <UART_SetConfig+0xc7a>
 8004468:	2b06      	cmp	r3, #6
 800446a:	d02c      	beq.n	80044c6 <UART_SetConfig+0xc7e>
 800446c:	2b07      	cmp	r3, #7
 800446e:	d02c      	beq.n	80044ca <UART_SetConfig+0xc82>
 8004470:	2b08      	cmp	r3, #8
 8004472:	d02c      	beq.n	80044ce <UART_SetConfig+0xc86>
 8004474:	2b09      	cmp	r3, #9
 8004476:	d02c      	beq.n	80044d2 <UART_SetConfig+0xc8a>
 8004478:	2b0a      	cmp	r3, #10
 800447a:	d02c      	beq.n	80044d6 <UART_SetConfig+0xc8e>
 800447c:	2b0b      	cmp	r3, #11
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004486:	686a      	ldr	r2, [r5, #4]
 8004488:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800448c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004490:	fbb3 f3f2 	udiv	r3, r3, r2
 8004494:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004496:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004498:	f1a3 0010 	sub.w	r0, r3, #16
 800449c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80044a0:	4288      	cmp	r0, r1
 80044a2:	f63f aa7c 	bhi.w	800399e <UART_SetConfig+0x156>
      huart->Instance->BRR = usartdiv;
 80044a6:	6829      	ldr	r1, [r5, #0]
 80044a8:	60cb      	str	r3, [r1, #12]
 80044aa:	f7ff bb21 	b.w	8003af0 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7e9      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e7e7      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e7e5      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044ba:	2306      	movs	r3, #6
 80044bc:	e7e3      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044be:	2308      	movs	r3, #8
 80044c0:	e7e1      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044c2:	230a      	movs	r3, #10
 80044c4:	e7df      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044c6:	230c      	movs	r3, #12
 80044c8:	e7dd      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044ca:	2310      	movs	r3, #16
 80044cc:	e7db      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044ce:	2320      	movs	r3, #32
 80044d0:	e7d9      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044d2:	2340      	movs	r3, #64	; 0x40
 80044d4:	e7d7      	b.n	8004486 <UART_SetConfig+0xc3e>
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	e7d5      	b.n	8004486 <UART_SetConfig+0xc3e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80044da:	f7fd fa4d 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044e0:	b1c3      	cbz	r3, 8004514 <UART_SetConfig+0xccc>
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d01a      	beq.n	800451c <UART_SetConfig+0xcd4>
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d01a      	beq.n	8004520 <UART_SetConfig+0xcd8>
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d01a      	beq.n	8004524 <UART_SetConfig+0xcdc>
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d01a      	beq.n	8004528 <UART_SetConfig+0xce0>
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d01a      	beq.n	800452c <UART_SetConfig+0xce4>
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d01a      	beq.n	8004530 <UART_SetConfig+0xce8>
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	d01a      	beq.n	8004534 <UART_SetConfig+0xcec>
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d01a      	beq.n	8004538 <UART_SetConfig+0xcf0>
 8004502:	2b09      	cmp	r3, #9
 8004504:	d01a      	beq.n	800453c <UART_SetConfig+0xcf4>
 8004506:	2b0a      	cmp	r3, #10
 8004508:	d01a      	beq.n	8004540 <UART_SetConfig+0xcf8>
 800450a:	2b0b      	cmp	r3, #11
 800450c:	bf14      	ite	ne
 800450e:	2401      	movne	r4, #1
 8004510:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8004514:	686a      	ldr	r2, [r5, #4]
 8004516:	fbb0 f3f4 	udiv	r3, r0, r4
 800451a:	e7b7      	b.n	800448c <UART_SetConfig+0xc44>
 800451c:	2402      	movs	r4, #2
 800451e:	e7f9      	b.n	8004514 <UART_SetConfig+0xccc>
 8004520:	2404      	movs	r4, #4
 8004522:	e7f7      	b.n	8004514 <UART_SetConfig+0xccc>
 8004524:	2406      	movs	r4, #6
 8004526:	e7f5      	b.n	8004514 <UART_SetConfig+0xccc>
 8004528:	2408      	movs	r4, #8
 800452a:	e7f3      	b.n	8004514 <UART_SetConfig+0xccc>
 800452c:	240a      	movs	r4, #10
 800452e:	e7f1      	b.n	8004514 <UART_SetConfig+0xccc>
 8004530:	240c      	movs	r4, #12
 8004532:	e7ef      	b.n	8004514 <UART_SetConfig+0xccc>
 8004534:	2410      	movs	r4, #16
 8004536:	e7ed      	b.n	8004514 <UART_SetConfig+0xccc>
 8004538:	2420      	movs	r4, #32
 800453a:	e7eb      	b.n	8004514 <UART_SetConfig+0xccc>
 800453c:	2440      	movs	r4, #64	; 0x40
 800453e:	e7e9      	b.n	8004514 <UART_SetConfig+0xccc>
 8004540:	2480      	movs	r4, #128	; 0x80
 8004542:	e7e7      	b.n	8004514 <UART_SetConfig+0xccc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004544:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004546:	6868      	ldr	r0, [r5, #4]
 8004548:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004550:	fbb3 f3f0 	udiv	r3, r3, r0
 8004554:	e79e      	b.n	8004494 <UART_SetConfig+0xc4c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004556:	a803      	add	r0, sp, #12
 8004558:	f7fe f820 	bl	800259c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	b14a      	cbz	r2, 8004576 <UART_SetConfig+0xd2e>
 8004562:	2a01      	cmp	r2, #1
 8004564:	d009      	beq.n	800457a <UART_SetConfig+0xd32>
 8004566:	2a02      	cmp	r2, #2
 8004568:	d009      	beq.n	800457e <UART_SetConfig+0xd36>
 800456a:	2a03      	cmp	r2, #3
 800456c:	d009      	beq.n	8004582 <UART_SetConfig+0xd3a>
 800456e:	2a04      	cmp	r2, #4
 8004570:	f040 8125 	bne.w	80047be <UART_SetConfig+0xf76>
 8004574:	e7e7      	b.n	8004546 <UART_SetConfig+0xcfe>
 8004576:	2401      	movs	r4, #1
 8004578:	e7e5      	b.n	8004546 <UART_SetConfig+0xcfe>
 800457a:	2402      	movs	r4, #2
 800457c:	e7e3      	b.n	8004546 <UART_SetConfig+0xcfe>
 800457e:	2404      	movs	r4, #4
 8004580:	e7e1      	b.n	8004546 <UART_SetConfig+0xcfe>
 8004582:	2406      	movs	r4, #6
 8004584:	e7df      	b.n	8004546 <UART_SetConfig+0xcfe>
 8004586:	240a      	movs	r4, #10
 8004588:	e7dd      	b.n	8004546 <UART_SetConfig+0xcfe>
 800458a:	240c      	movs	r4, #12
 800458c:	e7db      	b.n	8004546 <UART_SetConfig+0xcfe>
 800458e:	2410      	movs	r4, #16
 8004590:	e7d9      	b.n	8004546 <UART_SetConfig+0xcfe>
 8004592:	2420      	movs	r4, #32
 8004594:	e7d7      	b.n	8004546 <UART_SetConfig+0xcfe>
 8004596:	2440      	movs	r4, #64	; 0x40
 8004598:	e7d5      	b.n	8004546 <UART_SetConfig+0xcfe>
 800459a:	2480      	movs	r4, #128	; 0x80
 800459c:	e7d3      	b.n	8004546 <UART_SetConfig+0xcfe>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800459e:	2201      	movs	r2, #1
 80045a0:	e160      	b.n	8004864 <UART_SetConfig+0x101c>
 80045a2:	2202      	movs	r2, #2
 80045a4:	e15e      	b.n	8004864 <UART_SetConfig+0x101c>
 80045a6:	2204      	movs	r2, #4
 80045a8:	e15c      	b.n	8004864 <UART_SetConfig+0x101c>
 80045aa:	bf00      	nop
 80045ac:	0007a120 	.word	0x0007a120
 80045b0:	07a12000 	.word	0x07a12000
 80045b4:	03d09000 	.word	0x03d09000
 80045b8:	01e84800 	.word	0x01e84800
 80045bc:	01458554 	.word	0x01458554
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	00c35000 	.word	0x00c35000
 80045c8:	00a2c2aa 	.word	0x00a2c2aa
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	003d0900 	.word	0x003d0900
 80045d4:	001e8480 	.word	0x001e8480
 80045d8:	000f4240 	.word	0x000f4240
 80045dc:	00145854 	.word	0x00145854
 80045e0:	000c3500 	.word	0x000c3500
 80045e4:	000a2c2a 	.word	0x000a2c2a
 80045e8:	0003d090 	.word	0x0003d090
 80045ec:	0001e848 	.word	0x0001e848
 80045f0:	2206      	movs	r2, #6
 80045f2:	e137      	b.n	8004864 <UART_SetConfig+0x101c>
 80045f4:	2208      	movs	r2, #8
 80045f6:	e135      	b.n	8004864 <UART_SetConfig+0x101c>
 80045f8:	220a      	movs	r2, #10
 80045fa:	e133      	b.n	8004864 <UART_SetConfig+0x101c>
 80045fc:	220c      	movs	r2, #12
 80045fe:	e131      	b.n	8004864 <UART_SetConfig+0x101c>
 8004600:	2210      	movs	r2, #16
 8004602:	e12f      	b.n	8004864 <UART_SetConfig+0x101c>
 8004604:	2220      	movs	r2, #32
 8004606:	e12d      	b.n	8004864 <UART_SetConfig+0x101c>
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	e12b      	b.n	8004864 <UART_SetConfig+0x101c>
 800460c:	2280      	movs	r2, #128	; 0x80
 800460e:	e129      	b.n	8004864 <UART_SetConfig+0x101c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004610:	b1f0      	cbz	r0, 8004650 <UART_SetConfig+0xe08>
 8004612:	2801      	cmp	r0, #1
 8004614:	d01e      	beq.n	8004654 <UART_SetConfig+0xe0c>
 8004616:	2802      	cmp	r0, #2
 8004618:	d01e      	beq.n	8004658 <UART_SetConfig+0xe10>
 800461a:	2803      	cmp	r0, #3
 800461c:	d01e      	beq.n	800465c <UART_SetConfig+0xe14>
 800461e:	2804      	cmp	r0, #4
 8004620:	d01e      	beq.n	8004660 <UART_SetConfig+0xe18>
 8004622:	2805      	cmp	r0, #5
 8004624:	d01e      	beq.n	8004664 <UART_SetConfig+0xe1c>
 8004626:	2806      	cmp	r0, #6
 8004628:	d01e      	beq.n	8004668 <UART_SetConfig+0xe20>
 800462a:	2807      	cmp	r0, #7
 800462c:	d01e      	beq.n	800466c <UART_SetConfig+0xe24>
 800462e:	2808      	cmp	r0, #8
 8004630:	d01e      	beq.n	8004670 <UART_SetConfig+0xe28>
 8004632:	2809      	cmp	r0, #9
 8004634:	d01e      	beq.n	8004674 <UART_SetConfig+0xe2c>
 8004636:	280a      	cmp	r0, #10
 8004638:	d01e      	beq.n	8004678 <UART_SetConfig+0xe30>
 800463a:	4b8e      	ldr	r3, [pc, #568]	; (8004874 <UART_SetConfig+0x102c>)
 800463c:	4a8e      	ldr	r2, [pc, #568]	; (8004878 <UART_SetConfig+0x1030>)
 800463e:	280b      	cmp	r0, #11
 8004640:	bf14      	ite	ne
 8004642:	4610      	movne	r0, r2
 8004644:	4618      	moveq	r0, r3
 8004646:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 800464a:	fbb0 f3f1 	udiv	r3, r0, r1
 800464e:	e721      	b.n	8004494 <UART_SetConfig+0xc4c>
 8004650:	4889      	ldr	r0, [pc, #548]	; (8004878 <UART_SetConfig+0x1030>)
 8004652:	e7f8      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004654:	4889      	ldr	r0, [pc, #548]	; (800487c <UART_SetConfig+0x1034>)
 8004656:	e7f6      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004658:	4889      	ldr	r0, [pc, #548]	; (8004880 <UART_SetConfig+0x1038>)
 800465a:	e7f4      	b.n	8004646 <UART_SetConfig+0xdfe>
 800465c:	4889      	ldr	r0, [pc, #548]	; (8004884 <UART_SetConfig+0x103c>)
 800465e:	e7f2      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004660:	4889      	ldr	r0, [pc, #548]	; (8004888 <UART_SetConfig+0x1040>)
 8004662:	e7f0      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004664:	4889      	ldr	r0, [pc, #548]	; (800488c <UART_SetConfig+0x1044>)
 8004666:	e7ee      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004668:	4889      	ldr	r0, [pc, #548]	; (8004890 <UART_SetConfig+0x1048>)
 800466a:	e7ec      	b.n	8004646 <UART_SetConfig+0xdfe>
 800466c:	4889      	ldr	r0, [pc, #548]	; (8004894 <UART_SetConfig+0x104c>)
 800466e:	e7ea      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004670:	4889      	ldr	r0, [pc, #548]	; (8004898 <UART_SetConfig+0x1050>)
 8004672:	e7e8      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004674:	4889      	ldr	r0, [pc, #548]	; (800489c <UART_SetConfig+0x1054>)
 8004676:	e7e6      	b.n	8004646 <UART_SetConfig+0xdfe>
 8004678:	4889      	ldr	r0, [pc, #548]	; (80048a0 <UART_SetConfig+0x1058>)
 800467a:	e7e4      	b.n	8004646 <UART_SetConfig+0xdfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800467c:	b300      	cbz	r0, 80046c0 <UART_SetConfig+0xe78>
 800467e:	2801      	cmp	r0, #1
 8004680:	d020      	beq.n	80046c4 <UART_SetConfig+0xe7c>
 8004682:	2802      	cmp	r0, #2
 8004684:	d020      	beq.n	80046c8 <UART_SetConfig+0xe80>
 8004686:	2803      	cmp	r0, #3
 8004688:	d020      	beq.n	80046cc <UART_SetConfig+0xe84>
 800468a:	2804      	cmp	r0, #4
 800468c:	d020      	beq.n	80046d0 <UART_SetConfig+0xe88>
 800468e:	2805      	cmp	r0, #5
 8004690:	d020      	beq.n	80046d4 <UART_SetConfig+0xe8c>
 8004692:	2806      	cmp	r0, #6
 8004694:	d020      	beq.n	80046d8 <UART_SetConfig+0xe90>
 8004696:	2807      	cmp	r0, #7
 8004698:	d020      	beq.n	80046dc <UART_SetConfig+0xe94>
 800469a:	2808      	cmp	r0, #8
 800469c:	d020      	beq.n	80046e0 <UART_SetConfig+0xe98>
 800469e:	2809      	cmp	r0, #9
 80046a0:	d020      	beq.n	80046e4 <UART_SetConfig+0xe9c>
 80046a2:	280a      	cmp	r0, #10
 80046a4:	d021      	beq.n	80046ea <UART_SetConfig+0xea2>
 80046a6:	f643 5209 	movw	r2, #15625	; 0x3d09
 80046aa:	4b7a      	ldr	r3, [pc, #488]	; (8004894 <UART_SetConfig+0x104c>)
 80046ac:	280b      	cmp	r0, #11
 80046ae:	bf14      	ite	ne
 80046b0:	4618      	movne	r0, r3
 80046b2:	4610      	moveq	r0, r2
 80046b4:	686b      	ldr	r3, [r5, #4]
 80046b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	e6e9      	b.n	8004494 <UART_SetConfig+0xc4c>
 80046c0:	4874      	ldr	r0, [pc, #464]	; (8004894 <UART_SetConfig+0x104c>)
 80046c2:	e7f7      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046c4:	4874      	ldr	r0, [pc, #464]	; (8004898 <UART_SetConfig+0x1050>)
 80046c6:	e7f5      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046c8:	4874      	ldr	r0, [pc, #464]	; (800489c <UART_SetConfig+0x1054>)
 80046ca:	e7f3      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046cc:	4875      	ldr	r0, [pc, #468]	; (80048a4 <UART_SetConfig+0x105c>)
 80046ce:	e7f1      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046d0:	4873      	ldr	r0, [pc, #460]	; (80048a0 <UART_SetConfig+0x1058>)
 80046d2:	e7ef      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046d4:	4874      	ldr	r0, [pc, #464]	; (80048a8 <UART_SetConfig+0x1060>)
 80046d6:	e7ed      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046d8:	4874      	ldr	r0, [pc, #464]	; (80048ac <UART_SetConfig+0x1064>)
 80046da:	e7eb      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046dc:	4865      	ldr	r0, [pc, #404]	; (8004874 <UART_SetConfig+0x102c>)
 80046de:	e7e9      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046e0:	4873      	ldr	r0, [pc, #460]	; (80048b0 <UART_SetConfig+0x1068>)
 80046e2:	e7e7      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046e4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80046e8:	e7e4      	b.n	80046b4 <UART_SetConfig+0xe6c>
 80046ea:	f647 2012 	movw	r0, #31250	; 0x7a12
 80046ee:	e7e1      	b.n	80046b4 <UART_SetConfig+0xe6c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f0:	b1d0      	cbz	r0, 8004728 <UART_SetConfig+0xee0>
 80046f2:	2801      	cmp	r0, #1
 80046f4:	d01b      	beq.n	800472e <UART_SetConfig+0xee6>
 80046f6:	2802      	cmp	r0, #2
 80046f8:	d01c      	beq.n	8004734 <UART_SetConfig+0xeec>
 80046fa:	2803      	cmp	r0, #3
 80046fc:	d01d      	beq.n	800473a <UART_SetConfig+0xef2>
 80046fe:	2804      	cmp	r0, #4
 8004700:	d01e      	beq.n	8004740 <UART_SetConfig+0xef8>
 8004702:	2805      	cmp	r0, #5
 8004704:	d01f      	beq.n	8004746 <UART_SetConfig+0xefe>
 8004706:	2806      	cmp	r0, #6
 8004708:	d020      	beq.n	800474c <UART_SetConfig+0xf04>
 800470a:	2807      	cmp	r0, #7
 800470c:	d021      	beq.n	8004752 <UART_SetConfig+0xf0a>
 800470e:	2808      	cmp	r0, #8
 8004710:	d022      	beq.n	8004758 <UART_SetConfig+0xf10>
 8004712:	2809      	cmp	r0, #9
 8004714:	d023      	beq.n	800475e <UART_SetConfig+0xf16>
 8004716:	280a      	cmp	r0, #10
 8004718:	d024      	beq.n	8004764 <UART_SetConfig+0xf1c>
 800471a:	280b      	cmp	r0, #11
 800471c:	bf14      	ite	ne
 800471e:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8004722:	2380      	moveq	r3, #128	; 0x80
 8004724:	6868      	ldr	r0, [r5, #4]
 8004726:	e711      	b.n	800454c <UART_SetConfig+0xd04>
 8004728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472c:	e7fa      	b.n	8004724 <UART_SetConfig+0xedc>
 800472e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004732:	e7f7      	b.n	8004724 <UART_SetConfig+0xedc>
 8004734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004738:	e7f4      	b.n	8004724 <UART_SetConfig+0xedc>
 800473a:	f241 5355 	movw	r3, #5461	; 0x1555
 800473e:	e7f1      	b.n	8004724 <UART_SetConfig+0xedc>
 8004740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004744:	e7ee      	b.n	8004724 <UART_SetConfig+0xedc>
 8004746:	f640 43cc 	movw	r3, #3276	; 0xccc
 800474a:	e7eb      	b.n	8004724 <UART_SetConfig+0xedc>
 800474c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004750:	e7e8      	b.n	8004724 <UART_SetConfig+0xedc>
 8004752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004756:	e7e5      	b.n	8004724 <UART_SetConfig+0xedc>
 8004758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475c:	e7e2      	b.n	8004724 <UART_SetConfig+0xedc>
 800475e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004762:	e7df      	b.n	8004724 <UART_SetConfig+0xedc>
 8004764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004768:	e7dc      	b.n	8004724 <UART_SetConfig+0xedc>
 800476a:	2480      	movs	r4, #128	; 0x80
 800476c:	f7ff b8a4 	b.w	80038b8 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004770:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004774:	f43f a8b1 	beq.w	80038da <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8004778:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800477a:	2300      	movs	r3, #0
 800477c:	e68c      	b.n	8004498 <UART_SetConfig+0xc50>
    switch (clocksource)
 800477e:	2c08      	cmp	r4, #8
 8004780:	f43f aee9 	beq.w	8004556 <UART_SetConfig+0xd0e>
 8004784:	d833      	bhi.n	80047ee <UART_SetConfig+0xfa6>
 8004786:	2c01      	cmp	r4, #1
 8004788:	f43f aea7 	beq.w	80044da <UART_SetConfig+0xc92>
 800478c:	f4ff ae5e 	bcc.w	800444c <UART_SetConfig+0xc04>
 8004790:	2c04      	cmp	r4, #4
 8004792:	f47f a904 	bne.w	800399e <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004796:	4668      	mov	r0, sp
 8004798:	f7fd fe56 	bl	8002448 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800479c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	f43f aee8 	beq.w	8004576 <UART_SetConfig+0xd2e>
 80047a6:	2a01      	cmp	r2, #1
 80047a8:	f43f aee7 	beq.w	800457a <UART_SetConfig+0xd32>
 80047ac:	2a02      	cmp	r2, #2
 80047ae:	f43f aeca 	beq.w	8004546 <UART_SetConfig+0xcfe>
 80047b2:	2a03      	cmp	r2, #3
 80047b4:	f43f aee5 	beq.w	8004582 <UART_SetConfig+0xd3a>
 80047b8:	2a04      	cmp	r2, #4
 80047ba:	f43f aec3 	beq.w	8004544 <UART_SetConfig+0xcfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047be:	2a05      	cmp	r2, #5
 80047c0:	f43f aee1 	beq.w	8004586 <UART_SetConfig+0xd3e>
 80047c4:	2a06      	cmp	r2, #6
 80047c6:	f43f aee0 	beq.w	800458a <UART_SetConfig+0xd42>
 80047ca:	2a07      	cmp	r2, #7
 80047cc:	f43f aedf 	beq.w	800458e <UART_SetConfig+0xd46>
 80047d0:	2a08      	cmp	r2, #8
 80047d2:	f43f aede 	beq.w	8004592 <UART_SetConfig+0xd4a>
 80047d6:	2a09      	cmp	r2, #9
 80047d8:	f43f aedd 	beq.w	8004596 <UART_SetConfig+0xd4e>
 80047dc:	2a0a      	cmp	r2, #10
 80047de:	f43f aedc 	beq.w	800459a <UART_SetConfig+0xd52>
 80047e2:	2a0b      	cmp	r2, #11
 80047e4:	bf14      	ite	ne
 80047e6:	2401      	movne	r4, #1
 80047e8:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80047ec:	e6ab      	b.n	8004546 <UART_SetConfig+0xcfe>
    switch (clocksource)
 80047ee:	2c20      	cmp	r4, #32
 80047f0:	f43f af44 	beq.w	800467c <UART_SetConfig+0xe34>
 80047f4:	2c40      	cmp	r4, #64	; 0x40
 80047f6:	f43f af7b 	beq.w	80046f0 <UART_SetConfig+0xea8>
 80047fa:	2c10      	cmp	r4, #16
 80047fc:	f47f a8cf 	bne.w	800399e <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004800:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <UART_SetConfig+0x106c>)
 8004802:	6869      	ldr	r1, [r5, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	f012 0f20 	tst.w	r2, #32
 800480a:	f43f af01 	beq.w	8004610 <UART_SetConfig+0xdc8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <UART_SetConfig+0x1030>)
 8004812:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004816:	40d3      	lsrs	r3, r2
 8004818:	2800      	cmp	r0, #0
 800481a:	f43f aec0 	beq.w	800459e <UART_SetConfig+0xd56>
 800481e:	2801      	cmp	r0, #1
 8004820:	f43f aebf 	beq.w	80045a2 <UART_SetConfig+0xd5a>
 8004824:	2802      	cmp	r0, #2
 8004826:	f43f aebe 	beq.w	80045a6 <UART_SetConfig+0xd5e>
 800482a:	2803      	cmp	r0, #3
 800482c:	f43f aee0 	beq.w	80045f0 <UART_SetConfig+0xda8>
 8004830:	2804      	cmp	r0, #4
 8004832:	f43f aedf 	beq.w	80045f4 <UART_SetConfig+0xdac>
 8004836:	2805      	cmp	r0, #5
 8004838:	f43f aede 	beq.w	80045f8 <UART_SetConfig+0xdb0>
 800483c:	2806      	cmp	r0, #6
 800483e:	f43f aedd 	beq.w	80045fc <UART_SetConfig+0xdb4>
 8004842:	2807      	cmp	r0, #7
 8004844:	f43f aedc 	beq.w	8004600 <UART_SetConfig+0xdb8>
 8004848:	2808      	cmp	r0, #8
 800484a:	f43f aedb 	beq.w	8004604 <UART_SetConfig+0xdbc>
 800484e:	2809      	cmp	r0, #9
 8004850:	f43f aeda 	beq.w	8004608 <UART_SetConfig+0xdc0>
 8004854:	280a      	cmp	r0, #10
 8004856:	f43f aed9 	beq.w	800460c <UART_SetConfig+0xdc4>
 800485a:	280b      	cmp	r0, #11
 800485c:	bf14      	ite	ne
 800485e:	2201      	movne	r2, #1
 8004860:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004864:	fbb3 f3f2 	udiv	r3, r3, r2
 8004868:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800486c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004870:	e610      	b.n	8004494 <UART_SetConfig+0xc4c>
 8004872:	bf00      	nop
 8004874:	0003d090 	.word	0x0003d090
 8004878:	03d09000 	.word	0x03d09000
 800487c:	01e84800 	.word	0x01e84800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	00a2c2aa 	.word	0x00a2c2aa
 8004888:	007a1200 	.word	0x007a1200
 800488c:	0061a800 	.word	0x0061a800
 8004890:	00516155 	.word	0x00516155
 8004894:	003d0900 	.word	0x003d0900
 8004898:	001e8480 	.word	0x001e8480
 800489c:	000f4240 	.word	0x000f4240
 80048a0:	0007a120 	.word	0x0007a120
 80048a4:	000a2c2a 	.word	0x000a2c2a
 80048a8:	00061a80 	.word	0x00061a80
 80048ac:	00051615 	.word	0x00051615
 80048b0:	0001e848 	.word	0x0001e848
 80048b4:	58024400 	.word	0x58024400

080048b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048ba:	07da      	lsls	r2, r3, #31
{
 80048bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048be:	d506      	bpl.n	80048ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c0:	6801      	ldr	r1, [r0, #0]
 80048c2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80048c4:	684a      	ldr	r2, [r1, #4]
 80048c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80048ca:	4322      	orrs	r2, r4
 80048cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ce:	079c      	lsls	r4, r3, #30
 80048d0:	d506      	bpl.n	80048e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d2:	6801      	ldr	r1, [r0, #0]
 80048d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80048d6:	684a      	ldr	r2, [r1, #4]
 80048d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048dc:	4322      	orrs	r2, r4
 80048de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e0:	0759      	lsls	r1, r3, #29
 80048e2:	d506      	bpl.n	80048f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048e4:	6801      	ldr	r1, [r0, #0]
 80048e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80048e8:	684a      	ldr	r2, [r1, #4]
 80048ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048ee:	4322      	orrs	r2, r4
 80048f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048f2:	071a      	lsls	r2, r3, #28
 80048f4:	d506      	bpl.n	8004904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f6:	6801      	ldr	r1, [r0, #0]
 80048f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80048fa:	684a      	ldr	r2, [r1, #4]
 80048fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004900:	4322      	orrs	r2, r4
 8004902:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	06dc      	lsls	r4, r3, #27
 8004906:	d506      	bpl.n	8004916 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004908:	6801      	ldr	r1, [r0, #0]
 800490a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800490c:	688a      	ldr	r2, [r1, #8]
 800490e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004912:	4322      	orrs	r2, r4
 8004914:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	0699      	lsls	r1, r3, #26
 8004918:	d506      	bpl.n	8004928 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491a:	6801      	ldr	r1, [r0, #0]
 800491c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800491e:	688a      	ldr	r2, [r1, #8]
 8004920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004924:	4322      	orrs	r2, r4
 8004926:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004928:	065a      	lsls	r2, r3, #25
 800492a:	d510      	bpl.n	800494e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800492c:	6801      	ldr	r1, [r0, #0]
 800492e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004930:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004932:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004936:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800493a:	ea42 0204 	orr.w	r2, r2, r4
 800493e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004940:	d105      	bne.n	800494e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004942:	684a      	ldr	r2, [r1, #4]
 8004944:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004946:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800494a:	4322      	orrs	r2, r4
 800494c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	d506      	bpl.n	8004960 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004952:	6802      	ldr	r2, [r0, #0]
 8004954:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004956:	6853      	ldr	r3, [r2, #4]
 8004958:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800495c:	430b      	orrs	r3, r1
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	bd10      	pop	{r4, pc}

08004962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004966:	9d06      	ldr	r5, [sp, #24]
 8004968:	4604      	mov	r4, r0
 800496a:	460f      	mov	r7, r1
 800496c:	4616      	mov	r6, r2
 800496e:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	69ca      	ldr	r2, [r1, #28]
 8004974:	ea37 0302 	bics.w	r3, r7, r2
 8004978:	bf0c      	ite	eq
 800497a:	2201      	moveq	r2, #1
 800497c:	2200      	movne	r2, #0
 800497e:	42b2      	cmp	r2, r6
 8004980:	d002      	beq.n	8004988 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004982:	2000      	movs	r0, #0
}
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004988:	1c68      	adds	r0, r5, #1
 800498a:	d0f2      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7fb fe94 	bl	80006b8 <HAL_GetTick>
 8004990:	eba0 0008 	sub.w	r0, r0, r8
 8004994:	4285      	cmp	r5, r0
 8004996:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004998:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	d300      	bcc.n	800499e <UART_WaitOnFlagUntilTimeout+0x3c>
 800499c:	b98d      	cbnz	r5, 80049c2 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800499e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a2:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	6883      	ldr	r3, [r0, #8]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80049ac:	2320      	movs	r3, #32
 80049ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80049b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80049b6:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80049b8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80049ba:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80049be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c2:	075a      	lsls	r2, r3, #29
 80049c4:	d5d4      	bpl.n	8004970 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c6:	69c3      	ldr	r3, [r0, #28]
 80049c8:	051b      	lsls	r3, r3, #20
 80049ca:	d5d1      	bpl.n	8004970 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049d0:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d8:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	6883      	ldr	r3, [r0, #8]
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80049e2:	2320      	movs	r3, #32
 80049e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80049e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80049f0:	e7e1      	b.n	80049b6 <UART_WaitOnFlagUntilTimeout+0x54>

080049f2 <HAL_UART_Transmit>:
{
 80049f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049f6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80049f8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80049fc:	4604      	mov	r4, r0
 80049fe:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004a00:	2b20      	cmp	r3, #32
{
 8004a02:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004a04:	d14e      	bne.n	8004aa4 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d04a      	beq.n	8004aa0 <HAL_UART_Transmit+0xae>
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	d048      	beq.n	8004aa0 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8004a0e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d046      	beq.n	8004aa4 <HAL_UART_Transmit+0xb2>
 8004a16:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004a1a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a24:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8004a28:	f7fb fe46 	bl	80006b8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004a2e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004a30:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8004a38:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3c:	d103      	bne.n	8004a46 <HAL_UART_Transmit+0x54>
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	b90b      	cbnz	r3, 8004a46 <HAL_UART_Transmit+0x54>
 8004a42:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004a44:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8004a46:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004a50:	b292      	uxth	r2, r2
 8004a52:	b952      	cbnz	r2, 8004a6a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff ff83 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	b958      	cbnz	r0, 8004a76 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8004a5e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004a60:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8004a64:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8004a68:	e006      	b.n	8004a78 <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff ff77 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004a74:	b118      	cbz	r0, 8004a7e <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 8004a76:	2003      	movs	r0, #3
}
 8004a78:	b003      	add	sp, #12
 8004a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a7e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004a80:	b95e      	cbnz	r6, 8004a9a <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a82:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004a8c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004a98:	e7d5      	b.n	8004a46 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a9a:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004a9e:	e7f4      	b.n	8004a8a <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e7e9      	b.n	8004a78 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	e7e7      	b.n	8004a78 <HAL_UART_Transmit+0x86>

08004aa8 <UART_CheckIdleState>:
{
 8004aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	2600      	movs	r6, #0
{
 8004aac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004ab2:	f7fb fe01 	bl	80006b8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004ab8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	071a      	lsls	r2, r3, #28
 8004abe:	d417      	bmi.n	8004af0 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	075b      	lsls	r3, r3, #29
 8004ac6:	d50a      	bpl.n	8004ade <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	f7ff ff43 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004adc:	b9a0      	cbnz	r0, 8004b08 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004ae0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004ae2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004ae6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004aee:	e00c      	b.n	8004b0a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af4:	4632      	mov	r2, r6
 8004af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4603      	mov	r3, r0
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ff2f 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0db      	beq.n	8004ac0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004b08:	2003      	movs	r0, #3
}
 8004b0a:	b002      	add	sp, #8
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}

08004b0e <HAL_UART_Init>:
{
 8004b0e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004b10:	4604      	mov	r4, r0
 8004b12:	b350      	cbz	r0, 8004b6a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b14:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004b18:	b91b      	cbnz	r3, 8004b22 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004b1e:	f002 fa19 	bl	8006f54 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004b22:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b24:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b26:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b34:	f7fe fe88 	bl	8003848 <UART_SetConfig>
 8004b38:	2801      	cmp	r0, #1
 8004b3a:	d016      	beq.n	8004b6a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b3e:	b113      	cbz	r3, 8004b46 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff feb9 	bl	80048b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b46:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004b48:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b58:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
}
 8004b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004b64:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004b66:	f7ff bf9f 	b.w	8004aa8 <UART_CheckIdleState>
}
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b70:	2203      	movs	r2, #3
 8004b72:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b74:	2104      	movs	r1, #4
 8004b76:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b78:	f88d 2003 	strb.w	r2, [sp, #3]
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	f88d 3000 	strb.w	r3, [sp]
 8004b82:	f88d 2004 	strb.w	r2, [sp, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f88d 3001 	strb.w	r3, [sp, #1]
 8004b8c:	f88d 2006 	strb.w	r2, [sp, #6]
 8004b90:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b94:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b96:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b9a:	f88d 2008 	strb.w	r2, [sp, #8]
 8004b9e:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ba2:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ba4:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004ba8:	f88d 1009 	strb.w	r1, [sp, #9]
 8004bac:	f88d 400a 	strb.w	r4, [sp, #10]
 8004bb0:	f88d 100b 	strb.w	r1, [sp, #11]
 8004bb4:	f88d 300d 	strb.w	r3, [sp, #13]
 8004bb8:	f88d 300e 	strb.w	r3, [sp, #14]
 8004bbc:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bc0:	b92a      	cbnz	r2, 8004bce <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8004bc2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bc6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bce:	6802      	ldr	r2, [r0, #0]
 8004bd0:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bd2:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bd4:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bd6:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bda:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8004bde:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8004be2:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8004be6:	00d2      	lsls	r2, r2, #3
 8004be8:	fb92 f2f1 	sdiv	r2, r2, r1
 8004bec:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bf0:	aa04      	add	r2, sp, #16
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004bf8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004bfc:	00d2      	lsls	r2, r2, #3
 8004bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c02:	e7e0      	b.n	8004bc6 <UARTEx_SetNbDataToProcess+0x58>

08004c04 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004c04:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d014      	beq.n	8004c36 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c0c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c0e:	2324      	movs	r3, #36	; 0x24
 8004c10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c14:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004c16:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c18:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c26:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8004c2a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 8004c32:	4618      	mov	r0, r3
 8004c34:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004c36:	2002      	movs	r0, #2
}
 8004c38:	4770      	bx	lr

08004c3a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004c3a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004c3c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8004c40:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d01b      	beq.n	8004c7e <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8004c46:	2301      	movs	r3, #1
 8004c48:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	2324      	movs	r3, #36	; 0x24
 8004c4e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004c64:	4311      	orrs	r1, r2
 8004c66:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004c68:	f7ff ff81 	bl	8004b6e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6c:	6803      	ldr	r3, [r0, #0]
 8004c6e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	2320      	movs	r3, #32
 8004c72:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004c7e:	2002      	movs	r0, #2
}
 8004c80:	bd38      	pop	{r3, r4, r5, pc}

08004c82 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004c82:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004c84:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8004c88:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d01b      	beq.n	8004cc6 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	2324      	movs	r3, #36	; 0x24
 8004c96:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c9a:	6803      	ldr	r3, [r0, #0]
 8004c9c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004cac:	4311      	orrs	r1, r2
 8004cae:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004cb0:	f7ff ff5d 	bl	8004b6e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cb4:	6803      	ldr	r3, [r0, #0]
 8004cb6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	2320      	movs	r3, #32
 8004cba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004cc6:	2002      	movs	r0, #2
}
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08004ccc <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <SDMMC_GetCmdResp2+0x4c>)
 8004cce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cdc:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8004cde:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004ce2:	d315      	bcc.n	8004d10 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004ce4:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ce6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004cea:	d0f8      	beq.n	8004cde <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004cec:	0492      	lsls	r2, r2, #18
 8004cee:	d4f6      	bmi.n	8004cde <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004cf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cf2:	075b      	lsls	r3, r3, #29
 8004cf4:	d503      	bpl.n	8004cfe <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004cf6:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004cf8:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004cfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d00:	f013 0301 	ands.w	r3, r3, #1
 8004d04:	d001      	beq.n	8004d0a <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d06:	2301      	movs	r3, #1
 8004d08:	e7f6      	b.n	8004cf8 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d0a:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <SDMMC_GetCmdResp2+0x50>)
 8004d0c:	6382      	str	r2, [r0, #56]	; 0x38
 8004d0e:	e7f4      	b.n	8004cfa <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8004d10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d14:	e7f1      	b.n	8004cfa <SDMMC_GetCmdResp2+0x2e>
 8004d16:	bf00      	nop
 8004d18:	2000000c 	.word	0x2000000c
 8004d1c:	002000c5 	.word	0x002000c5

08004d20 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <SDMMC_GetCmdResp3+0x40>)
 8004d22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d30:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8004d32:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004d36:	d310      	bcc.n	8004d5a <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004d38:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d3a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004d3e:	d0f8      	beq.n	8004d32 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d40:	0492      	lsls	r2, r2, #18
 8004d42:	d4f6      	bmi.n	8004d32 <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d46:	f013 0304 	ands.w	r3, r3, #4
 8004d4a:	d003      	beq.n	8004d54 <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 8004d50:	4618      	mov	r0, r3
 8004d52:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d54:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <SDMMC_GetCmdResp3+0x44>)
 8004d56:	6382      	str	r2, [r0, #56]	; 0x38
 8004d58:	e7fa      	b.n	8004d50 <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8004d5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004d5e:	4770      	bx	lr
 8004d60:	2000000c 	.word	0x2000000c
 8004d64:	002000c5 	.word	0x002000c5

08004d68 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d68:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <SDMMC_GetCmdResp1+0x114>)
{
 8004d6a:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8004d72:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8004d76:	4c42      	ldr	r4, [pc, #264]	; (8004e80 <SDMMC_GetCmdResp1+0x118>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d78:	435a      	muls	r2, r3
    if (count-- == 0U)
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	d049      	beq.n	8004e12 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8004d7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d80:	4223      	tst	r3, r4
 8004d82:	d008      	beq.n	8004d96 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8004d84:	049b      	lsls	r3, r3, #18
 8004d86:	d406      	bmi.n	8004d96 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d8a:	075b      	lsls	r3, r3, #29
 8004d8c:	d505      	bpl.n	8004d9a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d8e:	2304      	movs	r3, #4
 8004d90:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d92:	4618      	mov	r0, r3
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	3a01      	subs	r2, #1
 8004d98:	e7ef      	b.n	8004d7a <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d9c:	07dc      	lsls	r4, r3, #31
 8004d9e:	d503      	bpl.n	8004da8 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004da0:	2301      	movs	r3, #1
 8004da2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004da4:	2001      	movs	r0, #1
 8004da6:	bd10      	pop	{r4, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <SDMMC_GetCmdResp1+0x11c>)
 8004daa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004dac:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d1f7      	bne.n	8004da4 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8004db4:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004db6:	4834      	ldr	r0, [pc, #208]	; (8004e88 <SDMMC_GetCmdResp1+0x120>)
 8004db8:	4018      	ands	r0, r3
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d05c      	beq.n	8004e78 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db2a      	blt.n	8004e18 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004dc2:	005a      	lsls	r2, r3, #1
 8004dc4:	d42b      	bmi.n	8004e1e <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004dc6:	009c      	lsls	r4, r3, #2
 8004dc8:	d42b      	bmi.n	8004e22 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004dca:	00d9      	lsls	r1, r3, #3
 8004dcc:	d42b      	bmi.n	8004e26 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004dce:	011a      	lsls	r2, r3, #4
 8004dd0:	d42c      	bmi.n	8004e2c <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004dd2:	015c      	lsls	r4, r3, #5
 8004dd4:	d42d      	bmi.n	8004e32 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004dd6:	01d9      	lsls	r1, r3, #7
 8004dd8:	d42e      	bmi.n	8004e38 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	d42f      	bmi.n	8004e3e <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004dde:	025c      	lsls	r4, r3, #9
 8004de0:	d430      	bmi.n	8004e44 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004de2:	0299      	lsls	r1, r3, #10
 8004de4:	d431      	bmi.n	8004e4a <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004de6:	02da      	lsls	r2, r3, #11
 8004de8:	d432      	bmi.n	8004e50 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004dea:	035c      	lsls	r4, r3, #13
 8004dec:	d433      	bmi.n	8004e56 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004dee:	0399      	lsls	r1, r3, #14
 8004df0:	d434      	bmi.n	8004e5c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004df2:	03da      	lsls	r2, r3, #15
 8004df4:	d435      	bmi.n	8004e62 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004df6:	041c      	lsls	r4, r3, #16
 8004df8:	d436      	bmi.n	8004e68 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004dfa:	0459      	lsls	r1, r3, #17
 8004dfc:	d437      	bmi.n	8004e6e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004dfe:	049a      	lsls	r2, r3, #18
 8004e00:	d438      	bmi.n	8004e74 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004e02:	f013 0f08 	tst.w	r3, #8
 8004e06:	bf0c      	ite	eq
 8004e08:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004e0c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004e10:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004e12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004e16:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004e18:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004e1c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004e1e:	2040      	movs	r0, #64	; 0x40
 8004e20:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004e22:	2080      	movs	r0, #128	; 0x80
 8004e24:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004e26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e2a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e30:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e32:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e36:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e3c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e42:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e48:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e4e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8004e50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e54:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e5a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004e60:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e66:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004e6c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e72:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8004e74:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	00200045 	.word	0x00200045
 8004e84:	002000c5 	.word	0x002000c5
 8004e88:	fdffe008 	.word	0xfdffe008

08004e8c <SDMMC_Init>:
{
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	ac03      	add	r4, sp, #12
 8004e92:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8004e96:	9a04      	ldr	r2, [sp, #16]
 8004e98:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004e9a:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8004e9c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8004e9e:	9a05      	ldr	r2, [sp, #20]
 8004ea0:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004ea2:	9a06      	ldr	r2, [sp, #24]
 8004ea4:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004ea6:	9a07      	ldr	r2, [sp, #28]
 8004ea8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004eaa:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <SDMMC_Init+0x30>)
 8004eac:	400a      	ands	r2, r1
}
 8004eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004eb2:	4313      	orrs	r3, r2
}
 8004eb4:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004eb6:	6043      	str	r3, [r0, #4]
}
 8004eb8:	2000      	movs	r0, #0
 8004eba:	4770      	bx	lr
 8004ebc:	ffc02c00 	.word	0xffc02c00

08004ec0 <SDMMC_ReadFIFO>:
 8004ec0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8004ec4:	4770      	bx	lr

08004ec6 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8004ed0:	6803      	ldr	r3, [r0, #0]
 8004ed2:	f043 0303 	orr.w	r3, r3, #3
 8004ed6:	6003      	str	r3, [r0, #0]
}
 8004ed8:	2000      	movs	r0, #0
 8004eda:	4770      	bx	lr

08004edc <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004edc:	6800      	ldr	r0, [r0, #0]
}
 8004ede:	f000 0003 	and.w	r0, r0, #3
 8004ee2:	4770      	bx	lr

08004ee4 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8004ee4:	680b      	ldr	r3, [r1, #0]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ee6:	688a      	ldr	r2, [r1, #8]
{
 8004ee8:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8004eea:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004eec:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004eee:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ef0:	4313      	orrs	r3, r2
                       Command->Response         |\
 8004ef2:	68ca      	ldr	r2, [r1, #12]
 8004ef4:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8004ef6:	690a      	ldr	r2, [r1, #16]
 8004ef8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004efa:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <SDMMC_SendCommand+0x24>)
 8004efc:	4022      	ands	r2, r4
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60c3      	str	r3, [r0, #12]
}
 8004f02:	2000      	movs	r0, #0
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	bf00      	nop
 8004f08:	fffee0c0 	.word	0xfffee0c0

08004f0c <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004f0c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004f0e:	5840      	ldr	r0, [r0, r1]
}
 8004f10:	4770      	bx	lr

08004f12 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004f12:	680b      	ldr	r3, [r1, #0]
{
 8004f14:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004f16:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004f18:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f1a:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 8004f1c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f1e:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f22:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8004f24:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8004f26:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f28:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
                       Data->TransferDir   |\
 8004f2c:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8004f2e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004f34:	2000      	movs	r0, #0
 8004f36:	bd10      	pop	{r4, pc}

08004f38 <SDMMC_CmdBlockLength>:
{
 8004f38:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004f3e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f40:	2410      	movs	r4, #16
{
 8004f42:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f44:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f46:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f48:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f52:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f54:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f56:	f7ff ffc5 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f7ff ff01 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 8004f66:	b007      	add	sp, #28
 8004f68:	bd30      	pop	{r4, r5, pc}

08004f6a <SDMMC_CmdReadSingleBlock>:
{
 8004f6a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004f70:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f72:	2411      	movs	r4, #17
{
 8004f74:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f76:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f78:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f7a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f7e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f84:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f86:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f88:	f7ff ffac 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4621      	mov	r1, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	f7ff fee8 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 8004f98:	b007      	add	sp, #28
 8004f9a:	bd30      	pop	{r4, r5, pc}

08004f9c <SDMMC_CmdReadMultiBlock>:
{
 8004f9c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004fa2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fa4:	2412      	movs	r4, #18
{
 8004fa6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fa8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004faa:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fac:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fb0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fb6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fb8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fba:	f7ff ff93 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f7ff fecf 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 8004fca:	b007      	add	sp, #28
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <SDMMC_CmdWriteSingleBlock>:
{
 8004fce:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004fd4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fd6:	2418      	movs	r4, #24
{
 8004fd8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fda:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fdc:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fde:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fe0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fe2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fe8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fea:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fec:	f7ff ff7a 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7ff feb6 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 8004ffc:	b007      	add	sp, #28
 8004ffe:	bd30      	pop	{r4, r5, pc}

08005000 <SDMMC_CmdWriteMultiBlock>:
{
 8005000:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005002:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005006:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005008:	2419      	movs	r4, #25
{
 800500a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800500c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800500e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005010:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005012:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005014:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800501a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800501c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800501e:	f7ff ff61 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4621      	mov	r1, r4
 8005028:	4628      	mov	r0, r5
 800502a:	f7ff fe9d 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 800502e:	b007      	add	sp, #28
 8005030:	bd30      	pop	{r4, r5, pc}
	...

08005034 <SDMMC_CmdStopTransfer>:
{
 8005034:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8005036:	2300      	movs	r3, #0
{
 8005038:	b087      	sub	sp, #28
 800503a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800503c:	250c      	movs	r5, #12
  sdmmc_cmdinit.Argument         = 0U;
 800503e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005040:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005044:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800504a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800504c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800504e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8005050:	68c3      	ldr	r3, [r0, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005052:	9502      	str	r5, [sp, #8]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800505a:	68c3      	ldr	r3, [r0, #12]
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005062:	f7ff ff3f 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <SDMMC_CmdStopTransfer+0x50>)
 8005068:	4629      	mov	r1, r5
 800506a:	4620      	mov	r0, r4
 800506c:	f7ff fe7c 	bl	8004d68 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8005070:	68e3      	ldr	r3, [r4, #12]
}
 8005072:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8005076:	bf08      	it	eq
 8005078:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800507a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507e:	60e3      	str	r3, [r4, #12]
}
 8005080:	b007      	add	sp, #28
 8005082:	bd30      	pop	{r4, r5, pc}
 8005084:	05f5e100 	.word	0x05f5e100

08005088 <SDMMC_CmdSelDesel>:
{
 8005088:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800508a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800508e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005090:	2407      	movs	r4, #7
{
 8005092:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005094:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005096:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005098:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800509a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800509c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800509e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050a2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050a4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050a6:	f7ff ff1d 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7ff fe59 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 80050b6:	b007      	add	sp, #28
 80050b8:	bd30      	pop	{r4, r5, pc}
	...

080050bc <SDMMC_CmdGoIdleState>:
{
 80050bc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 80050be:	2300      	movs	r3, #0
{
 80050c0:	b086      	sub	sp, #24
 80050c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80050c4:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050c8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80050ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050cc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050d4:	f7ff ff06 	bl	8004ee4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <SDMMC_CmdGoIdleState+0x4c>)
 80050da:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80050e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80050e8:	4353      	muls	r3, r2
    if (count-- == 0U)
 80050ea:	f113 33ff 	adds.w	r3, r3, #4294967295
 80050ee:	d307      	bcc.n	8005100 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80050f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050f2:	0612      	lsls	r2, r2, #24
 80050f4:	d5f9      	bpl.n	80050ea <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 80050f8:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050fa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80050fc:	b006      	add	sp, #24
 80050fe:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8005100:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8005104:	e7fa      	b.n	80050fc <SDMMC_CmdGoIdleState+0x40>
 8005106:	bf00      	nop
 8005108:	2000000c 	.word	0x2000000c
 800510c:	002000c5 	.word	0x002000c5

08005110 <SDMMC_CmdOperCond>:
{
 8005110:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005112:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8005116:	b086      	sub	sp, #24
 8005118:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800511a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800511c:	2308      	movs	r3, #8
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800511e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005120:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005126:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005128:	2300      	movs	r3, #0
 800512a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800512c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005130:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005132:	f7ff fed7 	bl	8004ee4 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <SDMMC_CmdOperCond+0x7c>)
 8005138:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005142:	f241 3388 	movw	r3, #5000	; 0x1388
 8005146:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8005148:	f113 33ff 	adds.w	r3, r3, #4294967295
 800514c:	d31a      	bcc.n	8005184 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800514e:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005150:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005154:	d0f8      	beq.n	8005148 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005156:	0492      	lsls	r2, r2, #18
 8005158:	d4f6      	bmi.n	8005148 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800515a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800515c:	075b      	lsls	r3, r3, #29
 800515e:	d503      	bpl.n	8005168 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005160:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005162:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005164:	b006      	add	sp, #24
 8005166:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005168:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800516a:	f012 0201 	ands.w	r2, r2, #1
 800516e:	d001      	beq.n	8005174 <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005170:	2001      	movs	r0, #1
 8005172:	e7f6      	b.n	8005162 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005174:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005176:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800517a:	d0f3      	beq.n	8005164 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800517c:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800517e:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005180:	63a3      	str	r3, [r4, #56]	; 0x38
 8005182:	e7ef      	b.n	8005164 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 8005184:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005188:	e7ec      	b.n	8005164 <SDMMC_CmdOperCond+0x54>
 800518a:	bf00      	nop
 800518c:	2000000c 	.word	0x2000000c

08005190 <SDMMC_CmdAppCommand>:
{
 8005190:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005192:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005196:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005198:	2437      	movs	r4, #55	; 0x37
{
 800519a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800519c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800519e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051a0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051aa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051ae:	f7ff fe99 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f7ff fdd5 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 80051be:	b007      	add	sp, #28
 80051c0:	bd30      	pop	{r4, r5, pc}

080051c2 <SDMMC_CmdAppOperCommand>:
{
 80051c2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051c4:	2329      	movs	r3, #41	; 0x29
{
 80051c6:	b086      	sub	sp, #24
 80051c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdmmc_cmdinit.Argument         = Argument;
 80051d0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051d6:	2300      	movs	r3, #0
 80051d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051de:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051e0:	f7ff fe80 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff fd9b 	bl	8004d20 <SDMMC_GetCmdResp3>
}
 80051ea:	b006      	add	sp, #24
 80051ec:	bd10      	pop	{r4, pc}

080051ee <SDMMC_CmdSendSCR>:
{
 80051ee:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0U;
 80051f0:	2300      	movs	r3, #0
{
 80051f2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80051f4:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051f6:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0U;
 80051fa:	9301      	str	r3, [sp, #4]
{
 80051fc:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005204:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005206:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005208:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800520a:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800520c:	f7ff fe6a 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4621      	mov	r1, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f7ff fda6 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 800521c:	b007      	add	sp, #28
 800521e:	bd30      	pop	{r4, r5, pc}

08005220 <SDMMC_CmdSendCID>:
{
 8005220:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8005222:	2300      	movs	r3, #0
{
 8005224:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005226:	2202      	movs	r2, #2
{
 8005228:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800522a:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800522c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800522e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005230:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005234:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800523a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800523c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800523e:	f7ff fe51 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fd42 	bl	8004ccc <SDMMC_GetCmdResp2>
}
 8005248:	b006      	add	sp, #24
 800524a:	bd10      	pop	{r4, pc}

0800524c <SDMMC_CmdSendCSD>:
{
 800524c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800524e:	2309      	movs	r3, #9
{
 8005250:	b086      	sub	sp, #24
 8005252:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005254:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005256:	f44f 7340 	mov.w	r3, #768	; 0x300
  sdmmc_cmdinit.Argument         = Argument;
 800525a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800525c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800525e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005260:	2300      	movs	r3, #0
 8005262:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005268:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800526a:	f7ff fe3b 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800526e:	4620      	mov	r0, r4
 8005270:	f7ff fd2c 	bl	8004ccc <SDMMC_GetCmdResp2>
}
 8005274:	b006      	add	sp, #24
 8005276:	bd10      	pop	{r4, pc}

08005278 <SDMMC_CmdSetRelAdd>:
{
 8005278:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800527a:	2300      	movs	r3, #0
{
 800527c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800527e:	2203      	movs	r2, #3
{
 8005280:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005282:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005284:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005286:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005288:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800528c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800528e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005292:	9203      	str	r2, [sp, #12]
{
 8005294:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005296:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005298:	f7ff fe24 	bl	8004ee4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <SDMMC_CmdSetRelAdd+0xa0>)
 800529e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80052a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80052ac:	4353      	muls	r3, r2
    if (count-- == 0U)
 80052ae:	f113 33ff 	adds.w	r3, r3, #4294967295
 80052b2:	d328      	bcc.n	8005306 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 80052b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80052b6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80052ba:	d0f8      	beq.n	80052ae <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052bc:	0492      	lsls	r2, r2, #18
 80052be:	d4f6      	bmi.n	80052ae <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c2:	0758      	lsls	r0, r3, #29
 80052c4:	d503      	bpl.n	80052ce <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052c6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052c8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80052ca:	b007      	add	sp, #28
 80052cc:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052d0:	07d9      	lsls	r1, r3, #31
 80052d2:	d501      	bpl.n	80052d8 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052d4:	2001      	movs	r0, #1
 80052d6:	e7f7      	b.n	80052c8 <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 80052d8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d115      	bne.n	800530c <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <SDMMC_CmdSetRelAdd+0xa4>)
 80052e2:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80052e4:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052e6:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80052ea:	d102      	bne.n	80052f2 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	802b      	strh	r3, [r5, #0]
 80052f0:	e7eb      	b.n	80052ca <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052f2:	045a      	lsls	r2, r3, #17
 80052f4:	d40c      	bmi.n	8005310 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80052fa:	bf0c      	ite	eq
 80052fc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005300:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8005304:	e7e1      	b.n	80052ca <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8005306:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800530a:	e7de      	b.n	80052ca <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800530c:	2001      	movs	r0, #1
 800530e:	e7dc      	b.n	80052ca <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005310:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005314:	e7d9      	b.n	80052ca <SDMMC_CmdSetRelAdd+0x52>
 8005316:	bf00      	nop
 8005318:	2000000c 	.word	0x2000000c
 800531c:	002000c5 	.word	0x002000c5

08005320 <SDMMC_CmdSendStatus>:
{
 8005320:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005322:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005326:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005328:	240d      	movs	r4, #13
{
 800532a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800532c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800532e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 8005330:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005332:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005334:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800533a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800533c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800533e:	f7ff fdd1 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f7ff fd0d 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 800534e:	b007      	add	sp, #28
 8005350:	bd30      	pop	{r4, r5, pc}

08005352 <SDMMC_CmdStatusRegister>:
{
 8005352:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8005354:	2300      	movs	r3, #0
{
 8005356:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8005358:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800535a:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0U;
 800535e:	9301      	str	r3, [sp, #4]
{
 8005360:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005362:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005368:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800536a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800536c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800536e:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005370:	f7ff fdb8 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4621      	mov	r1, r4
 800537a:	4628      	mov	r0, r5
 800537c:	f7ff fcf4 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 8005380:	b007      	add	sp, #28
 8005382:	bd30      	pop	{r4, r5, pc}

08005384 <SDMMC_CmdSwitch>:
{
 8005384:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005386:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800538a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800538c:	2406      	movs	r4, #6
{
 800538e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005390:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005392:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN;*/
 8005394:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005396:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005398:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800539a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800539e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053a2:	f7ff fd9f 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4621      	mov	r1, r4
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7ff fcdb 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 80053b2:	b007      	add	sp, #28
 80053b4:	bd30      	pop	{r4, r5, pc}

080053b6 <SDMMC_CmdBusWidth>:
 80053b6:	f7ff bfe5 	b.w	8005384 <SDMMC_CmdSwitch>

080053ba <SDMMC_CmdVoltageSwitch>:
{
 80053ba:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0x00000000;
 80053bc:	2300      	movs	r3, #0
{
 80053be:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80053c0:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0x00000000;
 80053c6:	9301      	str	r3, [sp, #4]
{
 80053c8:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053d0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053d2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053d4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80053d6:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053d8:	f7ff fd84 	bl	8004ee4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7ff fcc0 	bl	8004d68 <SDMMC_GetCmdResp1>
}
 80053e8:	b007      	add	sp, #28
 80053ea:	bd30      	pop	{r4, r5, pc}

080053ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053ee:	3b01      	subs	r3, #1
 80053f0:	d101      	bne.n	80053f6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80053f2:	2003      	movs	r0, #3
 80053f4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f6:	6902      	ldr	r2, [r0, #16]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	daf8      	bge.n	80053ee <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053fc:	6903      	ldr	r3, [r0, #16]
 80053fe:	4a06      	ldr	r2, [pc, #24]	; (8005418 <USB_CoreReset+0x2c>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005406:	3a01      	subs	r2, #1
 8005408:	d0f3      	beq.n	80053f2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800540a:	6903      	ldr	r3, [r0, #16]
 800540c:	f013 0301 	ands.w	r3, r3, #1
 8005410:	d1f9      	bne.n	8005406 <USB_CoreReset+0x1a>

  return HAL_OK;
 8005412:	4618      	mov	r0, r3
}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	00030d41 	.word	0x00030d41

0800541c <USB_CoreInit>:
{
 800541c:	b084      	sub	sp, #16
 800541e:	b538      	push	{r3, r4, r5, lr}
 8005420:	ad05      	add	r5, sp, #20
 8005422:	4604      	mov	r4, r0
 8005424:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d126      	bne.n	800547c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800542e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005434:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005436:	68c3      	ldr	r3, [r0, #12]
 8005438:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800543c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005440:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005442:	68c3      	ldr	r3, [r0, #12]
 8005444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005448:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800544a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800544c:	2b01      	cmp	r3, #1
 800544e:	d103      	bne.n	8005458 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005450:	68c3      	ldr	r3, [r0, #12]
 8005452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005456:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff ffc7 	bl	80053ec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800545e:	9b08      	ldr	r3, [sp, #32]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005464:	68a3      	ldr	r3, [r4, #8]
 8005466:	f043 0306 	orr.w	r3, r3, #6
 800546a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800546c:	68a3      	ldr	r3, [r4, #8]
 800546e:	f043 0320 	orr.w	r3, r3, #32
 8005472:	60a3      	str	r3, [r4, #8]
}
 8005474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005478:	b004      	add	sp, #16
 800547a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800547c:	68c3      	ldr	r3, [r0, #12]
 800547e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005482:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8005484:	f7ff ffb2 	bl	80053ec <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8005488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800548a:	b923      	cbnz	r3, 8005496 <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800548c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800548e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005492:	63a3      	str	r3, [r4, #56]	; 0x38
 8005494:	e7e3      	b.n	800545e <USB_CoreInit+0x42>
 8005496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	e7f9      	b.n	8005492 <USB_CoreInit+0x76>

0800549e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800549e:	6883      	ldr	r3, [r0, #8]
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	6083      	str	r3, [r0, #8]
}
 80054a6:	2000      	movs	r0, #0
 80054a8:	4770      	bx	lr

080054aa <USB_SetCurrentMode>:
{
 80054aa:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ac:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80054ae:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80054b6:	d108      	bne.n	80054ca <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054b8:	68c3      	ldr	r3, [r0, #12]
 80054ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054be:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80054c0:	2032      	movs	r0, #50	; 0x32
 80054c2:	f7fb f8ff 	bl	80006c4 <HAL_Delay>
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
 80054c8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80054ca:	b919      	cbnz	r1, 80054d4 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054cc:	68c3      	ldr	r3, [r0, #12]
 80054ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	e7f4      	b.n	80054be <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
}
 80054d6:	bd08      	pop	{r3, pc}

080054d8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054d8:	0189      	lsls	r1, r1, #6
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <USB_FlushTxFifo+0x20>)
 80054dc:	f041 0120 	orr.w	r1, r1, #32
 80054e0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80054e2:	3a01      	subs	r2, #1
 80054e4:	d005      	beq.n	80054f2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054e6:	6903      	ldr	r3, [r0, #16]
 80054e8:	f013 0320 	ands.w	r3, r3, #32
 80054ec:	d1f9      	bne.n	80054e2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80054ee:	4618      	mov	r0, r3
 80054f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80054f2:	2003      	movs	r0, #3
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	00030d41 	.word	0x00030d41

080054fc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054fc:	2310      	movs	r3, #16
 80054fe:	4a06      	ldr	r2, [pc, #24]	; (8005518 <USB_FlushRxFifo+0x1c>)
 8005500:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8005502:	3a01      	subs	r2, #1
 8005504:	d005      	beq.n	8005512 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005506:	6903      	ldr	r3, [r0, #16]
 8005508:	f013 0310 	ands.w	r3, r3, #16
 800550c:	d1f9      	bne.n	8005502 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800550e:	4618      	mov	r0, r3
 8005510:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005512:	2003      	movs	r0, #3
}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	00030d41 	.word	0x00030d41

0800551c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800551c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005520:	4319      	orrs	r1, r3
 8005522:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005526:	2000      	movs	r0, #0
 8005528:	4770      	bx	lr
	...

0800552c <USB_DevInit>:
{
 800552c:	b084      	sub	sp, #16
 800552e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	a809      	add	r0, sp, #36	; 0x24
 8005536:	460f      	mov	r7, r1
 8005538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8005540:	4619      	mov	r1, r3
 8005542:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8005546:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8005548:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800554c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800554e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005550:	d1f7      	bne.n	8005542 <USB_DevInit+0x16>
 8005552:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8005556:	2d00      	cmp	r5, #0
 8005558:	d16c      	bne.n	8005634 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555a:	6873      	ldr	r3, [r6, #4]
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005568:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005570:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005580:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005584:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800558a:	2b01      	cmp	r3, #1
 800558c:	d159      	bne.n	8005642 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800558e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005590:	2900      	cmp	r1, #0
 8005592:	d154      	bne.n	800563e <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff ffc1 	bl	800551c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800559a:	2110      	movs	r1, #16
 800559c:	4620      	mov	r0, r4
 800559e:	f7ff ff9b 	bl	80054d8 <USB_FlushTxFifo>
 80055a2:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff ffa9 	bl	80054fc <USB_FlushRxFifo>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d14b      	bne.n	8005646 <USB_DevInit+0x11a>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ae:	1c08      	adds	r0, r1, #0
 80055b0:	bf18      	it	ne
 80055b2:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ba:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055be:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80055c2:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055c4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80055c8:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055ca:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055cc:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	42bb      	cmp	r3, r7
 80055d0:	d13b      	bne.n	800564a <USB_DevInit+0x11e>
 80055d2:	2100      	movs	r1, #0
 80055d4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055d8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055dc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055e0:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055e2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e6:	428b      	cmp	r3, r1
 80055e8:	d142      	bne.n	8005670 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055ea:	6933      	ldr	r3, [r6, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80055fa:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80055fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055fe:	b91b      	cbnz	r3, 8005608 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005600:	69a3      	ldr	r3, [r4, #24]
 8005602:	f043 0310 	orr.w	r3, r3, #16
 8005606:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005608:	69a2      	ldr	r2, [r4, #24]
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <USB_DevInit+0x16c>)
 800560c:	4313      	orrs	r3, r2
 800560e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8005610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005612:	b11b      	cbz	r3, 800561c <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	f043 0308 	orr.w	r3, r3, #8
 800561a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800561c:	2d01      	cmp	r5, #1
 800561e:	d105      	bne.n	800562c <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005620:	69a3      	ldr	r3, [r4, #24]
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005626:	f043 0304 	orr.w	r3, r3, #4
 800562a:	61a3      	str	r3, [r4, #24]
}
 800562c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005630:	b004      	add	sp, #16
 8005632:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800563a:	63a3      	str	r3, [r4, #56]	; 0x38
 800563c:	e79d      	b.n	800557a <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800563e:	4619      	mov	r1, r3
 8005640:	e7a8      	b.n	8005594 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005642:	2103      	movs	r1, #3
 8005644:	e7a6      	b.n	8005594 <USB_DevInit+0x68>
 8005646:	2001      	movs	r0, #1
 8005648:	e7b4      	b.n	80055b4 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800564a:	f8d2 9000 	ldr.w	r9, [r2]
 800564e:	f1b9 0f00 	cmp.w	r9, #0
 8005652:	da0b      	bge.n	800566c <USB_DevInit+0x140>
      if (i == 0U)
 8005654:	b93b      	cbnz	r3, 8005666 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005656:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800565a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800565e:	f8c2 8008 	str.w	r8, [r2, #8]
 8005662:	3220      	adds	r2, #32
 8005664:	e7b3      	b.n	80055ce <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005666:	f8c2 e000 	str.w	lr, [r2]
 800566a:	e7f6      	b.n	800565a <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	e7f4      	b.n	800565a <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005670:	f8d2 9000 	ldr.w	r9, [r2]
 8005674:	f1b9 0f00 	cmp.w	r9, #0
 8005678:	da0b      	bge.n	8005692 <USB_DevInit+0x166>
      if (i == 0U)
 800567a:	b939      	cbnz	r1, 800568c <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800567c:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005680:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005682:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005684:	f8c2 8008 	str.w	r8, [r2, #8]
 8005688:	3220      	adds	r2, #32
 800568a:	e7ac      	b.n	80055e6 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800568c:	f8c2 e000 	str.w	lr, [r2]
 8005690:	e7f6      	b.n	8005680 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005692:	6017      	str	r7, [r2, #0]
 8005694:	e7f4      	b.n	8005680 <USB_DevInit+0x154>
 8005696:	bf00      	nop
 8005698:	803c3800 	.word	0x803c3800

0800569c <USB_DevDisconnect>:
{
 800569c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80056a2:	f043 0302 	orr.w	r3, r3, #2
 80056a6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80056aa:	2003      	movs	r0, #3
 80056ac:	f7fb f80a 	bl	80006c4 <HAL_Delay>
}
 80056b0:	2000      	movs	r0, #0
 80056b2:	bd08      	pop	{r3, pc}

080056b4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <disk_status+0x10>)
 80056b6:	181a      	adds	r2, r3, r0
 80056b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	7a10      	ldrb	r0, [r2, #8]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4718      	bx	r3
 80056c4:	20000118 	.word	0x20000118

080056c8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <disk_initialize+0x1c>)
 80056ca:	5c1a      	ldrb	r2, [r3, r0]
 80056cc:	b942      	cbnz	r2, 80056e0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80056ce:	2201      	movs	r2, #1
 80056d0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056d2:	181a      	adds	r2, r3, r0
 80056d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80056d8:	7a10      	ldrb	r0, [r2, #8]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4718      	bx	r3
  }
  return stat;
}
 80056e0:	2000      	movs	r0, #0
 80056e2:	4770      	bx	lr
 80056e4:	20000118 	.word	0x20000118

080056e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80056e8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80056ea:	4c05      	ldr	r4, [pc, #20]	; (8005700 <disk_read+0x18>)
 80056ec:	1825      	adds	r5, r4, r0
 80056ee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80056f2:	6860      	ldr	r0, [r4, #4]
 80056f4:	6884      	ldr	r4, [r0, #8]
 80056f6:	7a28      	ldrb	r0, [r5, #8]
 80056f8:	46a4      	mov	ip, r4
  return res;
}
 80056fa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80056fc:	4760      	bx	ip
 80056fe:	bf00      	nop
 8005700:	20000118 	.word	0x20000118

08005704 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005704:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005706:	4c05      	ldr	r4, [pc, #20]	; (800571c <disk_write+0x18>)
 8005708:	1825      	adds	r5, r4, r0
 800570a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800570e:	6860      	ldr	r0, [r4, #4]
 8005710:	68c4      	ldr	r4, [r0, #12]
 8005712:	7a28      	ldrb	r0, [r5, #8]
 8005714:	46a4      	mov	ip, r4
  return res;
}
 8005716:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005718:	4760      	bx	ip
 800571a:	bf00      	nop
 800571c:	20000118 	.word	0x20000118

08005720 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8005720:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8005722:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005724:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8005726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800572a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800572e:	4770      	bx	lr

08005730 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005730:	0a0b      	lsrs	r3, r1, #8
 8005732:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005734:	7043      	strb	r3, [r0, #1]
 8005736:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005738:	0e09      	lsrs	r1, r1, #24
 800573a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800573c:	70c1      	strb	r1, [r0, #3]
 800573e:	4770      	bx	lr

08005740 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005740:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8005742:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8005746:	4290      	cmp	r0, r2
 8005748:	d1fb      	bne.n	8005742 <mem_set+0x2>
}
 800574a:	4770      	bx	lr

0800574c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <chk_lock+0x58>)
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005750:	2500      	movs	r5, #0
 8005752:	461c      	mov	r4, r3
 8005754:	462a      	mov	r2, r5
		if (Files[i].fs) {	/* Existing entry */
 8005756:	681e      	ldr	r6, [r3, #0]
 8005758:	b1a6      	cbz	r6, 8005784 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800575a:	6807      	ldr	r7, [r0, #0]
 800575c:	42be      	cmp	r6, r7
 800575e:	d112      	bne.n	8005786 <chk_lock+0x3a>
 8005760:	685f      	ldr	r7, [r3, #4]
 8005762:	6886      	ldr	r6, [r0, #8]
 8005764:	42b7      	cmp	r7, r6
 8005766:	d10e      	bne.n	8005786 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8005768:	689f      	ldr	r7, [r3, #8]
 800576a:	6946      	ldr	r6, [r0, #20]
 800576c:	42b7      	cmp	r7, r6
 800576e:	d10a      	bne.n	8005786 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005770:	b9a9      	cbnz	r1, 800579e <chk_lock+0x52>
 8005772:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8005776:	8993      	ldrh	r3, [r2, #12]
 8005778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577c:	bf14      	ite	ne
 800577e:	2000      	movne	r0, #0
 8005780:	2010      	moveq	r0, #16
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8005784:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005786:	3201      	adds	r2, #1
 8005788:	3310      	adds	r3, #16
 800578a:	2a02      	cmp	r2, #2
 800578c:	d1e3      	bne.n	8005756 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800578e:	b10d      	cbz	r5, 8005794 <chk_lock+0x48>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005790:	2000      	movs	r0, #0
 8005792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005794:	2902      	cmp	r1, #2
 8005796:	bf0c      	ite	eq
 8005798:	2000      	moveq	r0, #0
 800579a:	2012      	movne	r0, #18
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800579e:	2010      	movs	r0, #16
 80057a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200000f4 	.word	0x200000f4

080057a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057a8:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <inc_lock+0x70>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057aa:	2300      	movs	r3, #0
{
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 80057ae:	6805      	ldr	r5, [r0, #0]
 80057b0:	4616      	mov	r6, r2
 80057b2:	6814      	ldr	r4, [r2, #0]
 80057b4:	42ac      	cmp	r4, r5
 80057b6:	d107      	bne.n	80057c8 <inc_lock+0x20>
 80057b8:	6857      	ldr	r7, [r2, #4]
 80057ba:	6884      	ldr	r4, [r0, #8]
 80057bc:	42a7      	cmp	r7, r4
 80057be:	d103      	bne.n	80057c8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 80057c0:	6897      	ldr	r7, [r2, #8]
 80057c2:	6944      	ldr	r4, [r0, #20]
 80057c4:	42a7      	cmp	r7, r4
 80057c6:	d01c      	beq.n	8005802 <inc_lock+0x5a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057c8:	3301      	adds	r3, #1
 80057ca:	3210      	adds	r2, #16
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d1f0      	bne.n	80057b2 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	b113      	cbz	r3, 80057da <inc_lock+0x32>
 80057d4:	6933      	ldr	r3, [r6, #16]
 80057d6:	b9eb      	cbnz	r3, 8005814 <inc_lock+0x6c>
 80057d8:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80057da:	011c      	lsls	r4, r3, #4
 80057dc:	1932      	adds	r2, r6, r4
 80057de:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 80057e0:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 80057e2:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 80057e4:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80057e6:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80057e8:	2000      	movs	r0, #0
 80057ea:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057ec:	b979      	cbnz	r1, 800580e <inc_lock+0x66>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057ee:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80057f2:	8992      	ldrh	r2, [r2, #12]
 80057f4:	3201      	adds	r2, #1
 80057f6:	b292      	uxth	r2, r2
 80057f8:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 80057fc:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057fe:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005802:	2900      	cmp	r1, #0
 8005804:	d0f3      	beq.n	80057ee <inc_lock+0x46>
 8005806:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 800580a:	8992      	ldrh	r2, [r2, #12]
 800580c:	b912      	cbnz	r2, 8005814 <inc_lock+0x6c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800580e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005812:	e7f1      	b.n	80057f8 <inc_lock+0x50>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005814:	2000      	movs	r0, #0
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005818:	200000f4 	.word	0x200000f4

0800581c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800581c:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800581e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005820:	3b02      	subs	r3, #2
 8005822:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8005824:	bf3d      	ittte	cc
 8005826:	8943      	ldrhcc	r3, [r0, #10]
 8005828:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 800582a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800582e:	2000      	movcs	r0, #0
}
 8005830:	4770      	bx	lr

08005832 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005832:	6802      	ldr	r2, [r0, #0]
 8005834:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005838:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800583a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800583c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005840:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005842:	b130      	cbz	r0, 8005852 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8005844:	4281      	cmp	r1, r0
 8005846:	d302      	bcc.n	800584e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005848:	1a09      	subs	r1, r1, r0
 800584a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800584c:	e7f8      	b.n	8005840 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800584e:	6858      	ldr	r0, [r3, #4]
 8005850:	4408      	add	r0, r1
}
 8005852:	4770      	bx	lr

08005854 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005854:	6802      	ldr	r2, [r0, #0]
{
 8005856:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8005858:	b152      	cbz	r2, 8005870 <get_ldnumber+0x1c>
 800585a:	4611      	mov	r1, r2
 800585c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800585e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005862:	2c20      	cmp	r4, #32
 8005864:	d90c      	bls.n	8005880 <get_ldnumber+0x2c>
 8005866:	2c3a      	cmp	r4, #58	; 0x3a
 8005868:	d1f8      	bne.n	800585c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800586a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800586c:	428b      	cmp	r3, r1
 800586e:	d002      	beq.n	8005876 <get_ldnumber+0x22>
	int vol = -1;
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8005874:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	2a30      	cmp	r2, #48	; 0x30
 800587a:	d1f9      	bne.n	8005870 <get_ldnumber+0x1c>
					*path = ++tt;
 800587c:	3301      	adds	r3, #1
 800587e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8005880:	2000      	movs	r0, #0
 8005882:	bd10      	pop	{r4, pc}

08005884 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005888:	4604      	mov	r4, r0
 800588a:	b918      	cbnz	r0, 8005894 <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 800588c:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800588e:	2300      	movs	r3, #0
 8005890:	602b      	str	r3, [r5, #0]
	return res;
}
 8005892:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005894:	6803      	ldr	r3, [r0, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f8      	beq.n	800588c <validate+0x8>
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	2a00      	cmp	r2, #0
 800589e:	d0f5      	beq.n	800588c <validate+0x8>
 80058a0:	8881      	ldrh	r1, [r0, #4]
 80058a2:	88da      	ldrh	r2, [r3, #6]
 80058a4:	4291      	cmp	r1, r2
 80058a6:	d1f1      	bne.n	800588c <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80058a8:	7858      	ldrb	r0, [r3, #1]
 80058aa:	f7ff ff03 	bl	80056b4 <disk_status>
 80058ae:	f010 0001 	ands.w	r0, r0, #1
 80058b2:	d1eb      	bne.n	800588c <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	e7eb      	b.n	8005890 <validate+0xc>

080058b8 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058b8:	3801      	subs	r0, #1
 80058ba:	440a      	add	r2, r1
			*d++ = *s++;
 80058bc:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 80058c0:	4291      	cmp	r1, r2
			*d++ = *s++;
 80058c2:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80058c6:	d1f9      	bne.n	80058bc <mem_cpy.part.0+0x4>
}
 80058c8:	4770      	bx	lr

080058ca <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 80058ca:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 80058cc:	7eca      	ldrb	r2, [r1, #27]
 80058ce:	7e8b      	ldrb	r3, [r1, #26]
 80058d0:	bf08      	it	eq
 80058d2:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 80058d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80058d8:	bf02      	ittt	eq
 80058da:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80058dc:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80058e0:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	4770      	bx	lr

080058e8 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80058e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80058ec:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80058ee:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80058f0:	7803      	ldrb	r3, [r0, #0]
 80058f2:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80058f4:	bf01      	itttt	eq
 80058f6:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80058f8:	750a      	strbeq	r2, [r1, #20]
 80058fa:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80058fc:	754a      	strbeq	r2, [r1, #21]
 80058fe:	4770      	bx	lr

08005900 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8005902:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005904:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005908:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800590a:	2301      	movs	r3, #1
 800590c:	462a      	mov	r2, r5
 800590e:	4639      	mov	r1, r7
 8005910:	7840      	ldrb	r0, [r0, #1]
 8005912:	f7ff fef7 	bl	8005704 <disk_write>
 8005916:	b9a0      	cbnz	r0, 8005942 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005918:	6a23      	ldr	r3, [r4, #32]
 800591a:	69a2      	ldr	r2, [r4, #24]
 800591c:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800591e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005920:	4293      	cmp	r3, r2
 8005922:	d301      	bcc.n	8005928 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8005924:	2000      	movs	r0, #0
 8005926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005928:	78a6      	ldrb	r6, [r4, #2]
 800592a:	2e01      	cmp	r6, #1
 800592c:	d9fa      	bls.n	8005924 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 800592e:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005930:	4639      	mov	r1, r7
 8005932:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005934:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 8005936:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005938:	2301      	movs	r3, #1
 800593a:	462a      	mov	r2, r5
 800593c:	f7ff fee2 	bl	8005704 <disk_write>
 8005940:	e7f3      	b.n	800592a <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8005942:	2001      	movs	r0, #1
}
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005946 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005946:	78c3      	ldrb	r3, [r0, #3]
 8005948:	b10b      	cbz	r3, 800594e <sync_window+0x8>
 800594a:	f7ff bfd9 	b.w	8005900 <sync_window.part.4>
}
 800594e:	4618      	mov	r0, r3
 8005950:	4770      	bx	lr

08005952 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005952:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005954:	428b      	cmp	r3, r1
{
 8005956:	b570      	push	{r4, r5, r6, lr}
 8005958:	4606      	mov	r6, r0
 800595a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800595c:	d012      	beq.n	8005984 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800595e:	f7ff fff2 	bl	8005946 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005962:	4604      	mov	r4, r0
 8005964:	b960      	cbnz	r0, 8005980 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005966:	462a      	mov	r2, r5
 8005968:	2301      	movs	r3, #1
 800596a:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800596e:	7870      	ldrb	r0, [r6, #1]
 8005970:	f7ff feba 	bl	80056e8 <disk_read>
 8005974:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8005976:	bf1c      	itt	ne
 8005978:	f04f 35ff 	movne.w	r5, #4294967295
 800597c:	2401      	movne	r4, #1
			fs->winsect = sector;
 800597e:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8005980:	4620      	mov	r0, r4
 8005982:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8005984:	2400      	movs	r4, #0
 8005986:	e7fb      	b.n	8005980 <move_window+0x2e>

08005988 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005988:	2300      	movs	r3, #0
{
 800598a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800598c:	70c3      	strb	r3, [r0, #3]
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8005992:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005994:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005996:	f7ff ffdc 	bl	8005952 <move_window>
 800599a:	bb30      	cbnz	r0, 80059ea <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800599c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80059a0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80059a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059a8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d11e      	bne.n	80059ee <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80059b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80059b4:	2be9      	cmp	r3, #233	; 0xe9
 80059b6:	d005      	beq.n	80059c4 <check_fs+0x3c>
 80059b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059ba:	4a10      	ldr	r2, [pc, #64]	; (80059fc <check_fs+0x74>)
 80059bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d116      	bne.n	80059f2 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80059c4:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80059c8:	f7ff feaa 	bl	8005720 <ld_dword>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <check_fs+0x78>)
 80059ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80059d2:	4298      	cmp	r0, r3
 80059d4:	d00f      	beq.n	80059f6 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80059d6:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80059da:	f7ff fea1 	bl	8005720 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <check_fs+0x7c>)
 80059e0:	4298      	cmp	r0, r3
 80059e2:	bf14      	ite	ne
 80059e4:	2002      	movne	r0, #2
 80059e6:	2000      	moveq	r0, #0
 80059e8:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059ea:	2004      	movs	r0, #4
 80059ec:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059ee:	2003      	movs	r0, #3
 80059f0:	bd10      	pop	{r4, pc}
	return 2;
 80059f2:	2002      	movs	r0, #2
 80059f4:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80059f6:	2000      	movs	r0, #0
}
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	009000eb 	.word	0x009000eb
 8005a00:	00544146 	.word	0x00544146
 8005a04:	33544146 	.word	0x33544146

08005a08 <find_volume>:
	*rfs = 0;
 8005a08:	2300      	movs	r3, #0
{
 8005a0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8005a0e:	600b      	str	r3, [r1, #0]
{
 8005a10:	b085      	sub	sp, #20
 8005a12:	460f      	mov	r7, r1
 8005a14:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8005a16:	f7ff ff1d 	bl	8005854 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a1a:	1e06      	subs	r6, r0, #0
 8005a1c:	f2c0 813d 	blt.w	8005c9a <find_volume+0x292>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005a20:	4ba2      	ldr	r3, [pc, #648]	; (8005cac <find_volume+0x2a4>)
 8005a22:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	f000 8139 	beq.w	8005c9e <find_volume+0x296>
	*rfs = fs;							/* Return pointer to the file system object */
 8005a2c:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a2e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005a32:	7823      	ldrb	r3, [r4, #0]
 8005a34:	b173      	cbz	r3, 8005a54 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8005a36:	7860      	ldrb	r0, [r4, #1]
 8005a38:	f7ff fe3c 	bl	80056b4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005a3c:	07c1      	lsls	r1, r0, #31
 8005a3e:	d409      	bmi.n	8005a54 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	f000 812e 	beq.w	8005ca2 <find_volume+0x29a>
 8005a46:	f010 0004 	ands.w	r0, r0, #4
 8005a4a:	d000      	beq.n	8005a4e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8005a4c:	200a      	movs	r0, #10
}
 8005a4e:	b005      	add	sp, #20
 8005a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005a54:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a56:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8005a58:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a5a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a5c:	f7ff fe34 	bl	80056c8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a60:	07c2      	lsls	r2, r0, #31
 8005a62:	f100 8120 	bmi.w	8005ca6 <find_volume+0x29e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a66:	b10d      	cbz	r5, 8005a6c <find_volume+0x64>
 8005a68:	0743      	lsls	r3, r0, #29
 8005a6a:	d4ef      	bmi.n	8005a4c <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7ff ff8a 	bl	8005988 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a74:	2802      	cmp	r0, #2
 8005a76:	f040 80f5 	bne.w	8005c64 <find_volume+0x25c>
 8005a7a:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 8005a7e:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a80:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8005a84:	b110      	cbz	r0, 8005a8c <find_volume+0x84>
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7ff fe4a 	bl	8005720 <ld_dword>
 8005a8c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a90:	3101      	adds	r1, #1
 8005a92:	3510      	adds	r5, #16
 8005a94:	2904      	cmp	r1, #4
 8005a96:	d1f3      	bne.n	8005a80 <find_volume+0x78>
 8005a98:	2500      	movs	r5, #0
			bsect = br[i];
 8005a9a:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	f000 80d7 	beq.w	8005c52 <find_volume+0x24a>
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff ff6e 	bl	8005988 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005aac:	2801      	cmp	r0, #1
 8005aae:	f200 80d1 	bhi.w	8005c54 <find_volume+0x24c>
	rv = rv << 8 | ptr[0];
 8005ab2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005ab6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8005aba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac2:	f040 80d3 	bne.w	8005c6c <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 8005ac6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005aca:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ace:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8005ad2:	d104      	bne.n	8005ade <find_volume+0xd6>
 8005ad4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8005ad8:	f7ff fe22 	bl	8005720 <ld_dword>
 8005adc:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ade:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8005ae2:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ae4:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ae8:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f200 80bd 	bhi.w	8005c6c <find_volume+0x264>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005af2:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8005af6:	b2bb      	uxth	r3, r7
 8005af8:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80b6 	beq.w	8005c6c <find_volume+0x264>
 8005b00:	1e7b      	subs	r3, r7, #1
 8005b02:	423b      	tst	r3, r7
 8005b04:	f040 80b2 	bne.w	8005c6c <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 8005b08:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005b0c:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8005b10:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b14:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b18:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b1c:	f040 80a6 	bne.w	8005c6c <find_volume+0x264>
	rv = rv << 8 | ptr[0];
 8005b20:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8005b24:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b28:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8005b2c:	d103      	bne.n	8005b36 <find_volume+0x12e>
 8005b2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b32:	f7ff fdf5 	bl	8005720 <ld_dword>
	rv = rv << 8 | ptr[0];
 8005b36:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005b3a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b3e:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8005b42:	f000 8093 	beq.w	8005c6c <find_volume+0x264>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b46:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005b4a:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8005b4e:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005b50:	4570      	cmp	r0, lr
 8005b52:	f0c0 808b 	bcc.w	8005c6c <find_volume+0x264>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005b56:	eba0 010e 	sub.w	r1, r0, lr
 8005b5a:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	f000 8084 	beq.w	8005c6c <find_volume+0x264>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005b64:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8005b68:	4281      	cmp	r1, r0
 8005b6a:	f200 8083 	bhi.w	8005c74 <find_volume+0x26c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005b6e:	f640 77f5 	movw	r7, #4085	; 0xff5
 8005b72:	42b9      	cmp	r1, r7
 8005b74:	bf8c      	ite	hi
 8005b76:	2702      	movhi	r7, #2
 8005b78:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b7a:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b7c:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8005b7e:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 8005b82:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b84:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005b86:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b88:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005b8a:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005b8c:	d174      	bne.n	8005c78 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 8005b8e:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8005b92:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005b96:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005b9a:	d167      	bne.n	8005c6c <find_volume+0x264>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005b9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ba0:	d164      	bne.n	8005c6c <find_volume+0x264>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ba2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ba6:	f7ff fdbb 	bl	8005720 <ld_dword>
 8005baa:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005bac:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005bae:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8005bb2:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8005bb6:	d359      	bcc.n	8005c6c <find_volume+0x264>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005bbc:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8005bc2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005bc6:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005bc8:	d12f      	bne.n	8005c2a <find_volume+0x222>
	rv = rv << 8 | ptr[0];
 8005bca:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8005bce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005bd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d127      	bne.n	8005c2a <find_volume+0x222>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005bda:	1c71      	adds	r1, r6, #1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff feb8 	bl	8005952 <move_window>
 8005be2:	bb10      	cbnz	r0, 8005c2a <find_volume+0x222>
	rv = rv << 8 | ptr[0];
 8005be4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8005be8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8005bec:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8005bee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bf2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d117      	bne.n	8005c2a <find_volume+0x222>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005bfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005bfe:	f7ff fd8f 	bl	8005720 <ld_dword>
 8005c02:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <find_volume+0x2a8>)
 8005c04:	4298      	cmp	r0, r3
 8005c06:	d110      	bne.n	8005c2a <find_volume+0x222>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005c08:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8005c0c:	f7ff fd88 	bl	8005720 <ld_dword>
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <find_volume+0x2ac>)
 8005c12:	4298      	cmp	r0, r3
 8005c14:	d109      	bne.n	8005c2a <find_volume+0x222>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005c16:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8005c1a:	f7ff fd81 	bl	8005720 <ld_dword>
 8005c1e:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005c20:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005c24:	f7ff fd7c 	bl	8005720 <ld_dword>
 8005c28:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8005c2a:	4a23      	ldr	r2, [pc, #140]	; (8005cb8 <find_volume+0x2b0>)
 8005c2c:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 8005c2e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005c30:	8813      	ldrh	r3, [r2, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
 8005c38:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c3a:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <find_volume+0x2b4>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4294      	cmp	r4, r2
 8005c40:	bf04      	itt	eq
 8005c42:	2200      	moveq	r2, #0
 8005c44:	601a      	streq	r2, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	4294      	cmp	r4, r2
 8005c4a:	f47f af00 	bne.w	8005a4e <find_volume+0x46>
 8005c4e:	6118      	str	r0, [r3, #16]
 8005c50:	e6fd      	b.n	8005a4e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c52:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005c54:	3501      	adds	r5, #1
 8005c56:	2d04      	cmp	r5, #4
 8005c58:	f47f af1f 	bne.w	8005a9a <find_volume+0x92>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c5c:	2804      	cmp	r0, #4
 8005c5e:	d105      	bne.n	8005c6c <find_volume+0x264>
 8005c60:	2001      	movs	r0, #1
 8005c62:	e6f4      	b.n	8005a4e <find_volume+0x46>
 8005c64:	2804      	cmp	r0, #4
 8005c66:	d0fb      	beq.n	8005c60 <find_volume+0x258>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c68:	2801      	cmp	r0, #1
 8005c6a:	d901      	bls.n	8005c70 <find_volume+0x268>
 8005c6c:	200d      	movs	r0, #13
 8005c6e:	e6ee      	b.n	8005a4e <find_volume+0x46>
	bsect = 0;
 8005c70:	2600      	movs	r6, #0
 8005c72:	e71e      	b.n	8005ab2 <find_volume+0xaa>
		fmt = FS_FAT32;
 8005c74:	2703      	movs	r7, #3
 8005c76:	e780      	b.n	8005b7a <find_volume+0x172>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	d0f6      	beq.n	8005c6c <find_volume+0x264>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c7e:	2f02      	cmp	r7, #2
 8005c80:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c84:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c86:	bf1c      	itt	ne
 8005c88:	1840      	addne	r0, r0, r1
 8005c8a:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c8e:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c90:	bf0c      	ite	eq
 8005c92:	4601      	moveq	r1, r0
 8005c94:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8005c98:	e789      	b.n	8005bae <find_volume+0x1a6>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c9a:	200b      	movs	r0, #11
 8005c9c:	e6d7      	b.n	8005a4e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c9e:	200c      	movs	r0, #12
 8005ca0:	e6d5      	b.n	8005a4e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	e6d3      	b.n	8005a4e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ca6:	2003      	movs	r0, #3
 8005ca8:	e6d1      	b.n	8005a4e <find_volume+0x46>
 8005caa:	bf00      	nop
 8005cac:	200000f0 	.word	0x200000f0
 8005cb0:	41615252 	.word	0x41615252
 8005cb4:	61417272 	.word	0x61417272
 8005cb8:	20000114 	.word	0x20000114
 8005cbc:	200000f4 	.word	0x200000f4

08005cc0 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005cc0:	2901      	cmp	r1, #1
{
 8005cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ccc:	d973      	bls.n	8005db6 <put_fat+0xf6>
 8005cce:	6943      	ldr	r3, [r0, #20]
 8005cd0:	4299      	cmp	r1, r3
 8005cd2:	d270      	bcs.n	8005db6 <put_fat+0xf6>
		switch (fs->fs_type) {
 8005cd4:	7803      	ldrb	r3, [r0, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d040      	beq.n	8005d5c <put_fat+0x9c>
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d051      	beq.n	8005d82 <put_fat+0xc2>
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d169      	bne.n	8005db6 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 8005ce2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ce6:	6a01      	ldr	r1, [r0, #32]
 8005ce8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005cec:	f7ff fe31 	bl	8005952 <move_window>
 8005cf0:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8005cf2:	bb40      	cbnz	r0, 8005d46 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cf4:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8005cf8:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8005cfc:	f108 0a01 	add.w	sl, r8, #1
 8005d00:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d04:	bf08      	it	eq
 8005d06:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d08:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d0a:	bf1f      	itttt	ne
 8005d0c:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8005d10:	f003 020f 	andne.w	r2, r3, #15
 8005d14:	013b      	lslne	r3, r7, #4
 8005d16:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8005d1a:	bf18      	it	ne
 8005d1c:	4313      	orrne	r3, r2
 8005d1e:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8005d22:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d24:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8005d26:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d28:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8005d2c:	f7ff fe11 	bl	8005952 <move_window>
			if (res != FR_OK) break;
 8005d30:	4606      	mov	r6, r0
 8005d32:	b940      	cbnz	r0, 8005d46 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8005d34:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d38:	b144      	cbz	r4, 8005d4c <put_fat+0x8c>
 8005d3a:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8005d3e:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	70eb      	strb	r3, [r5, #3]
}
 8005d46:	4630      	mov	r0, r6
 8005d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d4c:	f819 300a 	ldrb.w	r3, [r9, sl]
 8005d50:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8005d54:	f023 030f 	bic.w	r3, r3, #15
 8005d58:	431f      	orrs	r7, r3
 8005d5a:	e7f0      	b.n	8005d3e <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d5c:	6a01      	ldr	r1, [r0, #32]
 8005d5e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005d62:	f7ff fdf6 	bl	8005952 <move_window>
			if (res != FR_OK) break;
 8005d66:	4606      	mov	r6, r0
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1ec      	bne.n	8005d46 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d6c:	0064      	lsls	r4, r4, #1
 8005d6e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8005d72:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8005d76:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d78:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8005d7a:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8005d7e:	7057      	strb	r7, [r2, #1]
 8005d80:	e7df      	b.n	8005d42 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d82:	6a01      	ldr	r1, [r0, #32]
 8005d84:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005d88:	f7ff fde3 	bl	8005952 <move_window>
			if (res != FR_OK) break;
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d1d9      	bne.n	8005d46 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d92:	00a4      	lsls	r4, r4, #2
 8005d94:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8005d98:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8005d9c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005da0:	441c      	add	r4, r3
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7ff fcbc 	bl	8005720 <ld_dword>
 8005da8:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005dac:	4620      	mov	r0, r4
 8005dae:	4339      	orrs	r1, r7
 8005db0:	f7ff fcbe 	bl	8005730 <st_dword>
 8005db4:	e7c5      	b.n	8005d42 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 8005db6:	2602      	movs	r6, #2
 8005db8:	e7c5      	b.n	8005d46 <put_fat+0x86>

08005dba <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dba:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dc2:	d952      	bls.n	8005e6a <get_fat.isra.8+0xb0>
 8005dc4:	6943      	ldr	r3, [r0, #20]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	d24f      	bcs.n	8005e6a <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8005dca:	7803      	ldrb	r3, [r0, #0]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d029      	beq.n	8005e24 <get_fat.isra.8+0x6a>
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d038      	beq.n	8005e46 <get_fat.isra.8+0x8c>
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d148      	bne.n	8005e6a <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8005dd8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ddc:	6a01      	ldr	r1, [r0, #32]
 8005dde:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8005de2:	f7ff fdb6 	bl	8005952 <move_window>
 8005de6:	b110      	cbz	r0, 8005dee <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8005dee:	1c77      	adds	r7, r6, #1
 8005df0:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005df4:	6a29      	ldr	r1, [r5, #32]
 8005df6:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8005df8:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dfa:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8005dfe:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e02:	f7ff fda6 	bl	8005952 <move_window>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d1ee      	bne.n	8005de8 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e0a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e0e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e10:	443d      	add	r5, r7
 8005e12:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8005e16:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e1a:	bf4c      	ite	mi
 8005e1c:	0900      	lsrmi	r0, r0, #4
 8005e1e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8005e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e24:	6a01      	ldr	r1, [r0, #32]
 8005e26:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005e2a:	f7ff fd92 	bl	8005952 <move_window>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d1da      	bne.n	8005de8 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e32:	0064      	lsls	r4, r4, #1
 8005e34:	3530      	adds	r5, #48	; 0x30
 8005e36:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8005e3a:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8005e3c:	5d28      	ldrb	r0, [r5, r4]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e40:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e46:	6a01      	ldr	r1, [r0, #32]
 8005e48:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005e4c:	f7ff fd81 	bl	8005952 <move_window>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d1c9      	bne.n	8005de8 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e54:	00a4      	lsls	r4, r4, #2
 8005e56:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8005e5a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005e5e:	4420      	add	r0, r4
 8005e60:	f7ff fc5e 	bl	8005720 <ld_dword>
 8005e64:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8005e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8005e6a:	2001      	movs	r0, #1
}
 8005e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e6e <create_chain>:
{
 8005e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8005e74:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005e76:	460f      	mov	r7, r1
 8005e78:	b971      	cbnz	r1, 8005e98 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005e7a:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e7c:	b1f6      	cbz	r6, 8005ebc <create_chain+0x4e>
 8005e7e:	696b      	ldr	r3, [r5, #20]
 8005e80:	429e      	cmp	r6, r3
 8005e82:	bf28      	it	cs
 8005e84:	2601      	movcs	r6, #1
 8005e86:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8005e88:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e8a:	696b      	ldr	r3, [r5, #20]
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d318      	bcc.n	8005ec2 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8005e90:	2e01      	cmp	r6, #1
 8005e92:	d815      	bhi.n	8005ec0 <create_chain+0x52>
 8005e94:	2400      	movs	r4, #0
 8005e96:	e009      	b.n	8005eac <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f7ff ff8e 	bl	8005dba <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e9e:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ea0:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005ea2:	d937      	bls.n	8005f14 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d104      	bne.n	8005eb2 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005ea8:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005eac:	4620      	mov	r0, r4
 8005eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005eb2:	696b      	ldr	r3, [r5, #20]
 8005eb4:	4298      	cmp	r0, r3
 8005eb6:	d3f9      	bcc.n	8005eac <create_chain+0x3e>
 8005eb8:	463e      	mov	r6, r7
 8005eba:	e7e4      	b.n	8005e86 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ebc:	2601      	movs	r6, #1
 8005ebe:	e7e2      	b.n	8005e86 <create_chain+0x18>
				ncl = 2;
 8005ec0:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	f8d8 0000 	ldr.w	r0, [r8]
 8005ec8:	f7ff ff77 	bl	8005dba <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8005ecc:	b130      	cbz	r0, 8005edc <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005ece:	2801      	cmp	r0, #1
 8005ed0:	d020      	beq.n	8005f14 <create_chain+0xa6>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d0e8      	beq.n	8005ea8 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8005ed6:	42b4      	cmp	r4, r6
 8005ed8:	d1d6      	bne.n	8005e88 <create_chain+0x1a>
 8005eda:	e7db      	b.n	8005e94 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005edc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff feec 	bl	8005cc0 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005ee8:	b990      	cbnz	r0, 8005f10 <create_chain+0xa2>
 8005eea:	b957      	cbnz	r7, 8005f02 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005eec:	696a      	ldr	r2, [r5, #20]
 8005eee:	692b      	ldr	r3, [r5, #16]
 8005ef0:	3a02      	subs	r2, #2
		fs->last_clst = ncl;
 8005ef2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d90f      	bls.n	8005f18 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8005ef8:	792b      	ldrb	r3, [r5, #4]
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	712b      	strb	r3, [r5, #4]
 8005f00:	e7d4      	b.n	8005eac <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005f02:	4622      	mov	r2, r4
 8005f04:	4639      	mov	r1, r7
 8005f06:	4628      	mov	r0, r5
 8005f08:	f7ff feda 	bl	8005cc0 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d0ed      	beq.n	8005eec <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f10:	2801      	cmp	r0, #1
 8005f12:	d0c9      	beq.n	8005ea8 <create_chain+0x3a>
 8005f14:	2401      	movs	r4, #1
 8005f16:	e7c9      	b.n	8005eac <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	612b      	str	r3, [r5, #16]
 8005f1c:	e7ec      	b.n	8005ef8 <create_chain+0x8a>

08005f1e <remove_chain>:
{
 8005f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f20:	460d      	mov	r5, r1
 8005f22:	4607      	mov	r7, r0
 8005f24:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f26:	2d01      	cmp	r5, #1
 8005f28:	d801      	bhi.n	8005f2e <remove_chain+0x10>
 8005f2a:	2002      	movs	r0, #2
 8005f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8005f2e:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	429d      	cmp	r5, r3
 8005f34:	d2f9      	bcs.n	8005f2a <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f36:	b12a      	cbz	r2, 8005f44 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f38:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff febf 	bl	8005cc0 <put_fat>
		if (res != FR_OK) return res;
 8005f42:	bb08      	cbnz	r0, 8005f88 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f44:	4629      	mov	r1, r5
 8005f46:	6838      	ldr	r0, [r7, #0]
 8005f48:	f7ff ff37 	bl	8005dba <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b908      	cbnz	r0, 8005f54 <remove_chain+0x36>
	return FR_OK;
 8005f50:	2000      	movs	r0, #0
 8005f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f54:	2801      	cmp	r0, #1
 8005f56:	d0e8      	beq.n	8005f2a <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d014      	beq.n	8005f86 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4629      	mov	r1, r5
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fead 	bl	8005cc0 <put_fat>
			if (res != FR_OK) return res;
 8005f66:	b978      	cbnz	r0, 8005f88 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f68:	6962      	ldr	r2, [r4, #20]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	1e91      	subs	r1, r2, #2
 8005f6e:	428b      	cmp	r3, r1
 8005f70:	d205      	bcs.n	8005f7e <remove_chain+0x60>
			fs->free_clst++;
 8005f72:	3301      	adds	r3, #1
 8005f74:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8005f76:	7923      	ldrb	r3, [r4, #4]
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005f7e:	4296      	cmp	r6, r2
 8005f80:	4635      	mov	r5, r6
 8005f82:	d3df      	bcc.n	8005f44 <remove_chain+0x26>
 8005f84:	e7e4      	b.n	8005f50 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f86:	2001      	movs	r0, #1
}
 8005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f8a <dir_sdi.constprop.11>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8005f8a:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f8c:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 8005f8e:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8005f90:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8005f92:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8005f94:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f96:	b992      	cbnz	r2, 8005fbe <dir_sdi.constprop.11+0x34>
 8005f98:	7823      	ldrb	r3, [r4, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8005f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fa0:	b973      	cbnz	r3, 8005fc0 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005fa2:	8923      	ldrh	r3, [r4, #8]
 8005fa4:	b90b      	cbnz	r3, 8005faa <dir_sdi.constprop.11+0x20>
 8005fa6:	2002      	movs	r0, #2
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8005faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fac:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8005fae:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8005fb0:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f7      	beq.n	8005fa6 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fb6:	3430      	adds	r4, #48	; 0x30
	return FR_OK;
 8005fb8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fba:	622c      	str	r4, [r5, #32]
 8005fbc:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005fbe:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fc0:	8961      	ldrh	r1, [r4, #10]
 8005fc2:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fc4:	b961      	cbnz	r1, 8005fe0 <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	6828      	ldr	r0, [r5, #0]
 8005fca:	f7ff fef6 	bl	8005dba <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fce:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fd0:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fd2:	d00b      	beq.n	8005fec <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fd4:	2801      	cmp	r0, #1
 8005fd6:	d9e6      	bls.n	8005fa6 <dir_sdi.constprop.11+0x1c>
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	4298      	cmp	r0, r3
 8005fdc:	d3f3      	bcc.n	8005fc6 <dir_sdi.constprop.11+0x3c>
 8005fde:	e7e2      	b.n	8005fa6 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff fc1a 	bl	800581c <clust2sect>
 8005fe8:	61e8      	str	r0, [r5, #28]
 8005fea:	e7e0      	b.n	8005fae <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fec:	2001      	movs	r0, #1
}
 8005fee:	bd38      	pop	{r3, r4, r5, pc}

08005ff0 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ff0:	69c3      	ldr	r3, [r0, #28]
{
 8005ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ffa:	b1ab      	cbz	r3, 8006028 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ffc:	6942      	ldr	r2, [r0, #20]
 8005ffe:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006002:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8006006:	d20f      	bcs.n	8006028 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006008:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800600c:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800600e:	f1b9 0f00 	cmp.w	r9, #0
 8006012:	d14f      	bne.n	80060b4 <dir_next+0xc4>
		dp->sect++;				/* Next sector */
 8006014:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8006016:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8006018:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800601a:	b941      	cbnz	r1, 800602e <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800601c:	8923      	ldrh	r3, [r4, #8]
 800601e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8006022:	d847      	bhi.n	80060b4 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8006024:	2300      	movs	r3, #0
 8006026:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006028:	2004      	movs	r0, #4
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800602e:	8963      	ldrh	r3, [r4, #10]
 8006030:	3b01      	subs	r3, #1
 8006032:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8006036:	d13d      	bne.n	80060b4 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff febe 	bl	8005dba <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800603e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006040:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006042:	d802      	bhi.n	800604a <dir_next+0x5a>
 8006044:	2002      	movs	r0, #2
 8006046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800604a:	1c42      	adds	r2, r0, #1
 800604c:	d102      	bne.n	8006054 <dir_next+0x64>
 800604e:	2001      	movs	r0, #1
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006054:	6963      	ldr	r3, [r4, #20]
 8006056:	4298      	cmp	r0, r3
 8006058:	d326      	bcc.n	80060a8 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 800605a:	2f00      	cmp	r7, #0
 800605c:	d0e2      	beq.n	8006024 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800605e:	69a9      	ldr	r1, [r5, #24]
 8006060:	4628      	mov	r0, r5
 8006062:	f7ff ff04 	bl	8005e6e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006066:	4606      	mov	r6, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d037      	beq.n	80060dc <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800606c:	2801      	cmp	r0, #1
 800606e:	d0e9      	beq.n	8006044 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d0ec      	beq.n	800604e <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff fc66 	bl	8005946 <sync_window>
 800607a:	4607      	mov	r7, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	d1e6      	bne.n	800604e <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006080:	4601      	mov	r1, r0
 8006082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006086:	f104 0030 	add.w	r0, r4, #48	; 0x30
						fs->wflag = 1;
 800608a:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800608e:	f7ff fb57 	bl	8005740 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006092:	4631      	mov	r1, r6
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff fbc1 	bl	800581c <clust2sect>
 800609a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800609c:	8963      	ldrh	r3, [r4, #10]
 800609e:	429f      	cmp	r7, r3
 80060a0:	d310      	bcc.n	80060c4 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 80060a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060a4:	1bdf      	subs	r7, r3, r7
 80060a6:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80060a8:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80060aa:	4631      	mov	r1, r6
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff fbb5 	bl	800581c <clust2sect>
 80060b2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060b4:	3430      	adds	r4, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 80060b6:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 80060ba:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060bc:	444c      	add	r4, r9
 80060be:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 80060c4:	f884 a003 	strb.w	sl, [r4, #3]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff fc19 	bl	8005900 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d1bd      	bne.n	800604e <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060d4:	3701      	adds	r7, #1
 80060d6:	3301      	adds	r3, #1
 80060d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060da:	e7df      	b.n	800609c <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060dc:	2007      	movs	r0, #7
}
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080060e4 <follow_path>:
{
 80060e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 80060ea:	6807      	ldr	r7, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80060ec:	780b      	ldrb	r3, [r1, #0]
 80060ee:	460d      	mov	r5, r1
 80060f0:	3101      	adds	r1, #1
 80060f2:	2b2f      	cmp	r3, #47	; 0x2f
 80060f4:	d0fa      	beq.n	80060ec <follow_path+0x8>
 80060f6:	2b5c      	cmp	r3, #92	; 0x5c
 80060f8:	d0f8      	beq.n	80060ec <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80060fa:	2300      	movs	r3, #0
 80060fc:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80060fe:	782b      	ldrb	r3, [r5, #0]
 8006100:	2b1f      	cmp	r3, #31
 8006102:	d958      	bls.n	80061b6 <follow_path+0xd2>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006104:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800625c <follow_path+0x178>
	p = *path; sfn = dp->fn;
 8006108:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800610c:	220b      	movs	r2, #11
 800610e:	2120      	movs	r1, #32
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff fb15 	bl	8005740 <mem_set>
	si = i = 0; ni = 8;
 8006116:	2200      	movs	r2, #0
 8006118:	f105 3eff 	add.w	lr, r5, #4294967295
 800611c:	2008      	movs	r0, #8
 800611e:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 8006120:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8006124:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006126:	2b20      	cmp	r3, #32
 8006128:	d90b      	bls.n	8006142 <follow_path+0x5e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800612a:	2b2f      	cmp	r3, #47	; 0x2f
 800612c:	d14b      	bne.n	80061c6 <follow_path+0xe2>
 800612e:	1868      	adds	r0, r5, r1
 8006130:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006132:	f810 eb01 	ldrb.w	lr, [r0], #1
 8006136:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800613a:	d0f9      	beq.n	8006130 <follow_path+0x4c>
 800613c:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8006140:	d0f6      	beq.n	8006130 <follow_path+0x4c>
	*path = p + si;						/* Return pointer to the next segment */
 8006142:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006144:	2a00      	cmp	r2, #0
 8006146:	d053      	beq.n	80061f0 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006148:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800614c:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800614e:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006152:	2ae5      	cmp	r2, #229	; 0xe5
 8006154:	bf04      	itt	eq
 8006156:	2205      	moveq	r2, #5
 8006158:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800615c:	2b21      	cmp	r3, #33	; 0x21
 800615e:	bf34      	ite	cc
 8006160:	2304      	movcc	r3, #4
 8006162:	2300      	movcs	r3, #0
 8006164:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006168:	f7ff ff0f 	bl	8005f8a <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 800616c:	2800      	cmp	r0, #0
 800616e:	d144      	bne.n	80061fa <follow_path+0x116>
		res = move_window(fs, dp->sect);
 8006170:	69e1      	ldr	r1, [r4, #28]
 8006172:	4648      	mov	r0, r9
 8006174:	f7ff fbed 	bl	8005952 <move_window>
		if (res != FR_OK) break;
 8006178:	2800      	cmp	r0, #0
 800617a:	d13e      	bne.n	80061fa <follow_path+0x116>
		c = dp->dir[DIR_Name];
 800617c:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	2a00      	cmp	r2, #0
 8006182:	d045      	beq.n	8006210 <follow_path+0x12c>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006184:	7ada      	ldrb	r2, [r3, #11]
 8006186:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800618a:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800618c:	7ada      	ldrb	r2, [r3, #11]
 800618e:	0711      	lsls	r1, r2, #28
 8006190:	d40c      	bmi.n	80061ac <follow_path+0xc8>
 8006192:	f103 0e0b 	add.w	lr, r3, #11
 8006196:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8006198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800619c:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80061a0:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80061a2:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80061a6:	d026      	beq.n	80061f6 <follow_path+0x112>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d0f5      	beq.n	8006198 <follow_path+0xb4>
		res = dir_next(dp, 0);	/* Next entry */
 80061ac:	2100      	movs	r1, #0
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff ff1e 	bl	8005ff0 <dir_next>
 80061b4:	e7da      	b.n	800616c <follow_path+0x88>
		dp->fn[NSFLAG] = NS_NONAME;
 80061b6:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80061b8:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 80061ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 80061be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 80061c2:	f7ff bee2 	b.w	8005f8a <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80061c6:	2b5c      	cmp	r3, #92	; 0x5c
 80061c8:	d0b1      	beq.n	800612e <follow_path+0x4a>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80061ca:	2b2e      	cmp	r3, #46	; 0x2e
 80061cc:	d035      	beq.n	800623a <follow_path+0x156>
 80061ce:	4290      	cmp	r0, r2
 80061d0:	d90e      	bls.n	80061f0 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 80061d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061d6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006260 <follow_path+0x17c>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80061da:	bf1c      	itt	ne
 80061dc:	3b80      	subne	r3, #128	; 0x80
 80061de:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80061e2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80061e6:	f1bc 0f00 	cmp.w	ip, #0
 80061ea:	d02b      	beq.n	8006244 <follow_path+0x160>
 80061ec:	4563      	cmp	r3, ip
 80061ee:	d1f8      	bne.n	80061e2 <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80061f0:	2006      	movs	r0, #6
	return res;
 80061f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	d1d8      	bne.n	80061ac <follow_path+0xc8>
			ns = dp->fn[NSFLAG];
 80061fa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80061fe:	b148      	cbz	r0, 8006214 <follow_path+0x130>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006200:	2804      	cmp	r0, #4
 8006202:	d129      	bne.n	8006258 <follow_path+0x174>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006204:	f013 0f04 	tst.w	r3, #4
 8006208:	bf08      	it	eq
 800620a:	2005      	moveq	r0, #5
 800620c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006210:	2004      	movs	r0, #4
 8006212:	e7f2      	b.n	80061fa <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006214:	075a      	lsls	r2, r3, #29
 8006216:	d41f      	bmi.n	8006258 <follow_path+0x174>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006218:	79a3      	ldrb	r3, [r4, #6]
 800621a:	06db      	lsls	r3, r3, #27
 800621c:	d50a      	bpl.n	8006234 <follow_path+0x150>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800621e:	6963      	ldr	r3, [r4, #20]
 8006220:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006224:	7838      	ldrb	r0, [r7, #0]
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	4419      	add	r1, r3
 800622c:	f7ff fb4d 	bl	80058ca <ld_clust.isra.1>
 8006230:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006232:	e769      	b.n	8006108 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006234:	2005      	movs	r0, #5
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800623a:	280b      	cmp	r0, #11
 800623c:	d0d8      	beq.n	80061f0 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800623e:	2208      	movs	r2, #8
 8006240:	200b      	movs	r0, #11
 8006242:	e76d      	b.n	8006120 <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006244:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006248:	f1bc 0f19 	cmp.w	ip, #25
 800624c:	d801      	bhi.n	8006252 <follow_path+0x16e>
 800624e:	3b20      	subs	r3, #32
 8006250:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8006252:	54b3      	strb	r3, [r6, r2]
 8006254:	3201      	adds	r2, #1
 8006256:	e763      	b.n	8006120 <follow_path+0x3c>
}
 8006258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625c:	080071d9 	.word	0x080071d9
 8006260:	08007258 	.word	0x08007258

08006264 <dir_register>:
{
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8006268:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800626a:	f7ff fe8e 	bl	8005f8a <dir_sdi.constprop.11>
	if (res == FR_OK) {
 800626e:	4604      	mov	r4, r0
 8006270:	bb28      	cbnz	r0, 80062be <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8006272:	69e9      	ldr	r1, [r5, #28]
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff fb6c 	bl	8005952 <move_window>
			if (res != FR_OK) break;
 800627a:	4604      	mov	r4, r0
 800627c:	b9f8      	cbnz	r0, 80062be <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800627e:	6a2b      	ldr	r3, [r5, #32]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2be5      	cmp	r3, #229	; 0xe5
 8006284:	d114      	bne.n	80062b0 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8006286:	69e9      	ldr	r1, [r5, #28]
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fb62 	bl	8005952 <move_window>
		if (res == FR_OK) {
 800628e:	4604      	mov	r4, r0
 8006290:	b960      	cbnz	r0, 80062ac <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006292:	4601      	mov	r1, r0
 8006294:	2220      	movs	r2, #32
 8006296:	6a28      	ldr	r0, [r5, #32]
 8006298:	f7ff fa52 	bl	8005740 <mem_set>
 800629c:	220b      	movs	r2, #11
 800629e:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80062a2:	6a28      	ldr	r0, [r5, #32]
 80062a4:	f7ff fb08 	bl	80058b8 <mem_cpy.part.0>
			fs->wflag = 1;
 80062a8:	2301      	movs	r3, #1
 80062aa:	70f3      	strb	r3, [r6, #3]
}
 80062ac:	4620      	mov	r0, r4
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0e8      	beq.n	8006286 <dir_register+0x22>
			res = dir_next(dp, 1);
 80062b4:	2101      	movs	r1, #1
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fe9a 	bl	8005ff0 <dir_next>
 80062bc:	e7d7      	b.n	800626e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062be:	2c04      	cmp	r4, #4
 80062c0:	bf08      	it	eq
 80062c2:	2407      	moveq	r4, #7
 80062c4:	e7f2      	b.n	80062ac <dir_register+0x48>
	...

080062c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80062c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80062ca:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80062cc:	a804      	add	r0, sp, #16
{
 80062ce:	9100      	str	r1, [sp, #0]
 80062d0:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 80062d2:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80062d6:	f7ff fabd 	bl	8005854 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80062da:	1e05      	subs	r5, r0, #0
 80062dc:	db1f      	blt.n	800631e <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80062de:	4912      	ldr	r1, [pc, #72]	; (8006328 <f_mount+0x60>)
 80062e0:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80062e4:	b15c      	cbz	r4, 80062fe <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <f_mount+0x64>)
 80062e8:	2000      	movs	r0, #0
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4294      	cmp	r4, r2
 80062ee:	bf04      	itt	eq
 80062f0:	2200      	moveq	r2, #0
 80062f2:	601a      	streq	r2, [r3, #0]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	4294      	cmp	r4, r2
 80062f8:	bf08      	it	eq
 80062fa:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80062fc:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 80062fe:	9801      	ldr	r0, [sp, #4]
 8006300:	b108      	cbz	r0, 8006306 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006302:	2300      	movs	r3, #0
 8006304:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006306:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800630a:	b130      	cbz	r0, 800631a <f_mount+0x52>
 800630c:	2e01      	cmp	r6, #1
 800630e:	d108      	bne.n	8006322 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006310:	2200      	movs	r2, #0
 8006312:	a901      	add	r1, sp, #4
 8006314:	4668      	mov	r0, sp
 8006316:	f7ff fb77 	bl	8005a08 <find_volume>
	LEAVE_FF(fs, res);
}
 800631a:	b004      	add	sp, #16
 800631c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800631e:	200b      	movs	r0, #11
 8006320:	e7fb      	b.n	800631a <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006322:	2000      	movs	r0, #0
 8006324:	e7f9      	b.n	800631a <f_mount+0x52>
 8006326:	bf00      	nop
 8006328:	200000f0 	.word	0x200000f0
 800632c:	200000f4 	.word	0x200000f4

08006330 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	b090      	sub	sp, #64	; 0x40
 8006336:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006338:	4604      	mov	r4, r0
{
 800633a:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800633c:	2800      	cmp	r0, #0
 800633e:	f000 80ce 	beq.w	80064de <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006342:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8006346:	a903      	add	r1, sp, #12
 8006348:	a801      	add	r0, sp, #4
 800634a:	462a      	mov	r2, r5
 800634c:	f7ff fb5c 	bl	8005a08 <find_volume>
	if (res == FR_OK) {
 8006350:	4607      	mov	r7, r0
 8006352:	bb38      	cbnz	r0, 80063a4 <f_open+0x74>
		dj.obj.fs = fs;
 8006354:	ae10      	add	r6, sp, #64	; 0x40
 8006356:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006358:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800635a:	f846 3d30 	str.w	r3, [r6, #-48]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff fec0 	bl	80060e4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006364:	b958      	cbnz	r0, 800637e <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006366:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800636a:	2b00      	cmp	r3, #0
 800636c:	db1e      	blt.n	80063ac <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800636e:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8006372:	4630      	mov	r0, r6
 8006374:	bf14      	ite	ne
 8006376:	2101      	movne	r1, #1
 8006378:	2100      	moveq	r1, #0
 800637a:	f7ff f9e7 	bl	800574c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800637e:	f018 0f1c 	tst.w	r8, #28
 8006382:	d073      	beq.n	800646c <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8006384:	b1a0      	cbz	r0, 80063b0 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006386:	2804      	cmp	r0, #4
 8006388:	d109      	bne.n	800639e <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800638a:	4b71      	ldr	r3, [pc, #452]	; (8006550 <f_open+0x220>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2a00      	cmp	r2, #0
 8006390:	f000 80da 	beq.w	8006548 <f_open+0x218>
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80d6 	beq.w	8006548 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800639c:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800639e:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063a2:	b170      	cbz	r0, 80063c2 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063a4:	2300      	movs	r3, #0
 80063a6:	4607      	mov	r7, r0
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	e092      	b.n	80064d2 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 80063ac:	2006      	movs	r0, #6
 80063ae:	e7e6      	b.n	800637e <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80063b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80063b4:	f013 0f11 	tst.w	r3, #17
 80063b8:	d163      	bne.n	8006482 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80063ba:	f018 0f04 	tst.w	r8, #4
 80063be:	f040 80bd 	bne.w	800653c <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063c2:	0728      	lsls	r0, r5, #28
 80063c4:	d53c      	bpl.n	8006440 <f_open+0x110>
				dw = GET_FATTIME();
 80063c6:	f000 fa29 	bl	800681c <get_fattime>
 80063ca:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80063cc:	4601      	mov	r1, r0
 80063ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063d0:	300e      	adds	r0, #14
 80063d2:	f7ff f9ad 	bl	8005730 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80063d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063d8:	4611      	mov	r1, r2
 80063da:	3016      	adds	r0, #22
 80063dc:	f7ff f9a8 	bl	8005730 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80063e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e2:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80063e8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063ee:	f899 0000 	ldrb.w	r0, [r9]
 80063f2:	4651      	mov	r1, sl
 80063f4:	f7ff fa69 	bl	80058ca <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063f8:	2200      	movs	r2, #0
 80063fa:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063fc:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063fe:	4648      	mov	r0, r9
 8006400:	f7ff fa72 	bl	80058e8 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8006406:	2200      	movs	r2, #0
					fs->wflag = 1;
 8006408:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800640a:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800640c:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800640e:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8006410:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8006416:	f1b8 0f00 	cmp.w	r8, #0
 800641a:	d011      	beq.n	8006440 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 800641c:	4641      	mov	r1, r8
 800641e:	4630      	mov	r0, r6
						dw = fs->winsect;
 8006420:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8006424:	f7ff fd7b 	bl	8005f1e <remove_chain>
						if (res == FR_OK) {
 8006428:	2800      	cmp	r0, #0
 800642a:	d1bb      	bne.n	80063a4 <f_open+0x74>
							res = move_window(fs, dw);
 800642c:	4649      	mov	r1, r9
 800642e:	9803      	ldr	r0, [sp, #12]
 8006430:	f7ff fa8f 	bl	8005952 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006434:	f108 33ff 	add.w	r3, r8, #4294967295
 8006438:	9a03      	ldr	r2, [sp, #12]
 800643a:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 800643c:	2800      	cmp	r0, #0
 800643e:	d1b1      	bne.n	80063a4 <f_open+0x74>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006440:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006442:	9b03      	ldr	r3, [sp, #12]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006444:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				mode |= FA_MODIFIED;
 8006448:	bf48      	it	mi
 800644a:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800644e:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006450:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8006454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006456:	bf14      	ite	ne
 8006458:	2101      	movne	r1, #1
 800645a:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800645c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800645e:	f7ff f9a3 	bl	80057a8 <inc_lock>
 8006462:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006464:	2800      	cmp	r0, #0
 8006466:	d13c      	bne.n	80064e2 <f_open+0x1b2>
 8006468:	2002      	movs	r0, #2
 800646a:	e79b      	b.n	80063a4 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 800646c:	2800      	cmp	r0, #0
 800646e:	d199      	bne.n	80063a4 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006470:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006474:	06da      	lsls	r2, r3, #27
 8006476:	d463      	bmi.n	8006540 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006478:	f018 0f02 	tst.w	r8, #2
 800647c:	d0e0      	beq.n	8006440 <f_open+0x110>
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d5de      	bpl.n	8006440 <f_open+0x110>
					res = FR_DENIED;
 8006482:	2007      	movs	r0, #7
 8006484:	e78e      	b.n	80063a4 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	f7ff fc97 	bl	8005dba <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 800648c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800648e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006490:	d923      	bls.n	80064da <f_open+0x1aa>
 8006492:	1c42      	adds	r2, r0, #1
 8006494:	4250      	negs	r0, r2
 8006496:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006498:	eba5 0508 	sub.w	r5, r5, r8
 800649c:	2800      	cmp	r0, #0
 800649e:	d049      	beq.n	8006534 <f_open+0x204>
				fp->clust = clst;
 80064a0:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f47f af7e 	bne.w	80063a4 <f_open+0x74>
 80064a8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80064ac:	b18b      	cbz	r3, 80064d2 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80064ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff f9b2 	bl	800581c <clust2sect>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d0d5      	beq.n	8006468 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80064bc:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80064c4:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80064c6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80064ca:	f7ff f90d 	bl	80056e8 <disk_read>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d138      	bne.n	8006544 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 80064d2:	4638      	mov	r0, r7
 80064d4:	b010      	add	sp, #64	; 0x40
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80064da:	2002      	movs	r0, #2
 80064dc:	e7dc      	b.n	8006498 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80064de:	2709      	movs	r7, #9
 80064e0:	e7f7      	b.n	80064d2 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80064e2:	9e03      	ldr	r6, [sp, #12]
 80064e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80064e8:	7830      	ldrb	r0, [r6, #0]
 80064ea:	4641      	mov	r1, r8
 80064ec:	f7ff f9ed 	bl	80058ca <ld_clust.isra.1>
 80064f0:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064f2:	f108 001c 	add.w	r0, r8, #28
 80064f6:	f7ff f913 	bl	8005720 <ld_dword>
			fp->obj.id = fs->id;
 80064fa:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064fc:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064fe:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006500:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006504:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8006506:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006508:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800650c:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800650e:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 8006510:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8006512:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006514:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006516:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006518:	f7ff f912 	bl	8005740 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800651c:	06ab      	lsls	r3, r5, #26
 800651e:	d5d8      	bpl.n	80064d2 <f_open+0x1a2>
 8006520:	68e5      	ldr	r5, [r4, #12]
 8006522:	2d00      	cmp	r5, #0
 8006524:	d0d5      	beq.n	80064d2 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006526:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006528:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800652a:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800652e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006530:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006534:	45a8      	cmp	r8, r5
 8006536:	d3a6      	bcc.n	8006486 <f_open+0x156>
 8006538:	2000      	movs	r0, #0
 800653a:	e7b1      	b.n	80064a0 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800653c:	2008      	movs	r0, #8
 800653e:	e731      	b.n	80063a4 <f_open+0x74>
					res = FR_NO_FILE;
 8006540:	2004      	movs	r0, #4
 8006542:	e72f      	b.n	80063a4 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006544:	2001      	movs	r0, #1
 8006546:	e72d      	b.n	80063a4 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff fe8b 	bl	8006264 <dir_register>
 800654e:	e726      	b.n	800639e <f_open+0x6e>
 8006550:	200000f4 	.word	0x200000f4

08006554 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	469b      	mov	fp, r3
 800655a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800655c:	2300      	movs	r3, #0
{
 800655e:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006560:	a903      	add	r1, sp, #12
{
 8006562:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 8006564:	f8cb 3000 	str.w	r3, [fp]
{
 8006568:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800656a:	f7ff f98b 	bl	8005884 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800656e:	4606      	mov	r6, r0
 8006570:	bb00      	cbnz	r0, 80065b4 <f_read+0x60>
 8006572:	7d66      	ldrb	r6, [r4, #21]
 8006574:	b9f6      	cbnz	r6, 80065b4 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006576:	7d23      	ldrb	r3, [r4, #20]
 8006578:	07da      	lsls	r2, r3, #31
 800657a:	f140 8095 	bpl.w	80066a8 <f_read+0x154>
	remain = fp->obj.objsize - fp->fptr;
 800657e:	68e3      	ldr	r3, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006580:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 8006584:	69a7      	ldr	r7, [r4, #24]
 8006586:	1bdf      	subs	r7, r3, r7
 8006588:	42af      	cmp	r7, r5
 800658a:	bf28      	it	cs
 800658c:	462f      	movcs	r7, r5
	for ( ;  btr;								/* Repeat until all data read */
 800658e:	b18f      	cbz	r7, 80065b4 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006590:	69a1      	ldr	r1, [r4, #24]
 8006592:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006596:	2b00      	cmp	r3, #0
 8006598:	d178      	bne.n	800668c <f_read+0x138>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	895b      	ldrh	r3, [r3, #10]
 800659e:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80065a0:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	d119      	bne.n	80065dc <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80065a8:	b941      	cbnz	r1, 80065bc <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80065aa:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80065ac:	2801      	cmp	r0, #1
 80065ae:	d810      	bhi.n	80065d2 <f_read+0x7e>
 80065b0:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065b2:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80065b4:	4630      	mov	r0, r6
 80065b6:	b005      	add	sp, #20
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80065bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065be:	b11b      	cbz	r3, 80065c8 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7ff f936 	bl	8005832 <clmt_clust>
 80065c6:	e7f1      	b.n	80065ac <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80065c8:	69e1      	ldr	r1, [r4, #28]
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	f7ff fbf5 	bl	8005dba <get_fat.isra.8>
 80065d0:	e7ec      	b.n	80065ac <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d101      	bne.n	80065da <f_read+0x86>
 80065d6:	2601      	movs	r6, #1
 80065d8:	e7eb      	b.n	80065b2 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 80065da:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	69e1      	ldr	r1, [r4, #28]
 80065e0:	4618      	mov	r0, r3
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	f7ff f91a 	bl	800581c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0e1      	beq.n	80065b0 <f_read+0x5c>
			sect += csect;
 80065ec:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80065ee:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80065f0:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80065f4:	d02c      	beq.n	8006650 <f_read+0xfc>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80065f6:	9b00      	ldr	r3, [sp, #0]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065f8:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80065fa:	9a01      	ldr	r2, [sp, #4]
 80065fc:	895b      	ldrh	r3, [r3, #10]
 80065fe:	442a      	add	r2, r5
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006600:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006602:	429a      	cmp	r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006604:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8006606:	bf84      	itt	hi
 8006608:	9a01      	ldrhi	r2, [sp, #4]
 800660a:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800660c:	4642      	mov	r2, r8
 800660e:	462b      	mov	r3, r5
 8006610:	f7ff f86a 	bl	80056e8 <disk_read>
 8006614:	2800      	cmp	r0, #0
 8006616:	d1de      	bne.n	80065d6 <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006618:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	da0b      	bge.n	8006638 <f_read+0xe4>
 8006620:	6a20      	ldr	r0, [r4, #32]
 8006622:	eba0 0008 	sub.w	r0, r0, r8
 8006626:	4285      	cmp	r5, r0
 8006628:	d906      	bls.n	8006638 <f_read+0xe4>
 800662a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662e:	4651      	mov	r1, sl
 8006630:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8006634:	f7ff f940 	bl	80058b8 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006638:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800663a:	69a3      	ldr	r3, [r4, #24]
 800663c:	44a9      	add	r9, r5
 800663e:	1b7f      	subs	r7, r7, r5
 8006640:	442b      	add	r3, r5
 8006642:	61a3      	str	r3, [r4, #24]
 8006644:	f8db 3000 	ldr.w	r3, [fp]
 8006648:	442b      	add	r3, r5
 800664a:	f8cb 3000 	str.w	r3, [fp]
 800664e:	e79e      	b.n	800658e <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006650:	6a22      	ldr	r2, [r4, #32]
 8006652:	4590      	cmp	r8, r2
 8006654:	d018      	beq.n	8006688 <f_read+0x134>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006656:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	da0b      	bge.n	8006676 <f_read+0x122>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800665e:	9800      	ldr	r0, [sp, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	4651      	mov	r1, sl
 8006664:	7840      	ldrb	r0, [r0, #1]
 8006666:	f7ff f84d 	bl	8005704 <disk_write>
 800666a:	2800      	cmp	r0, #0
 800666c:	d1b3      	bne.n	80065d6 <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 800666e:	7d23      	ldrb	r3, [r4, #20]
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006676:	9803      	ldr	r0, [sp, #12]
 8006678:	2301      	movs	r3, #1
 800667a:	4642      	mov	r2, r8
 800667c:	4651      	mov	r1, sl
 800667e:	7840      	ldrb	r0, [r0, #1]
 8006680:	f7ff f832 	bl	80056e8 <disk_read>
 8006684:	2800      	cmp	r0, #0
 8006686:	d1a6      	bne.n	80065d6 <f_read+0x82>
			fp->sect = sect;
 8006688:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800668c:	69a1      	ldr	r1, [r4, #24]
 800668e:	4648      	mov	r0, r9
 8006690:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006694:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8006698:	4451      	add	r1, sl
 800669a:	42bd      	cmp	r5, r7
 800669c:	bf28      	it	cs
 800669e:	463d      	movcs	r5, r7
 80066a0:	462a      	mov	r2, r5
 80066a2:	f7ff f909 	bl	80058b8 <mem_cpy.part.0>
 80066a6:	e7c8      	b.n	800663a <f_read+0xe6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80066a8:	2607      	movs	r6, #7
 80066aa:	e783      	b.n	80065b4 <f_read+0x60>

080066ac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80066ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066b0:	4606      	mov	r6, r0
 80066b2:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 80066b4:	4605      	mov	r5, r0
	int n = 0;
 80066b6:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80066b8:	1e4f      	subs	r7, r1, #1
 80066ba:	42bc      	cmp	r4, r7
 80066bc:	da12      	bge.n	80066e4 <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80066be:	ab01      	add	r3, sp, #4
 80066c0:	2201      	movs	r2, #1
 80066c2:	4669      	mov	r1, sp
 80066c4:	4640      	mov	r0, r8
 80066c6:	f7ff ff45 	bl	8006554 <f_read>
		if (rc != 1) break;
 80066ca:	9b01      	ldr	r3, [sp, #4]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d109      	bne.n	80066e4 <f_gets+0x38>
		c = s[0];
 80066d0:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80066d4:	2b0d      	cmp	r3, #13
 80066d6:	d0f0      	beq.n	80066ba <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 80066d8:	2b0a      	cmp	r3, #10
		*p++ = c;
 80066da:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 80066de:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 80066e2:	d1ea      	bne.n	80066ba <f_gets+0xe>
	}
	*p = 0;
 80066e4:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80066e6:	429c      	cmp	r4, r3
	*p = 0;
 80066e8:	702b      	strb	r3, [r5, #0]
}
 80066ea:	bf14      	ite	ne
 80066ec:	4630      	movne	r0, r6
 80066ee:	4618      	moveq	r0, r3
 80066f0:	b002      	add	sp, #8
 80066f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080066f8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <FATFS_LinkDriverEx+0x40>)
{
 80066fa:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 80066fc:	7a5d      	ldrb	r5, [r3, #9]
 80066fe:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8006702:	b9b5      	cbnz	r5, 8006732 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006704:	7a5d      	ldrb	r5, [r3, #9]
 8006706:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006708:	7a5d      	ldrb	r5, [r3, #9]
 800670a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800670e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8006710:	7a58      	ldrb	r0, [r3, #9]
 8006712:	4418      	add	r0, r3
 8006714:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006716:	7a5a      	ldrb	r2, [r3, #9]
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800671c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800671e:	b2c0      	uxtb	r0, r0
 8006720:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8006722:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006724:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 8006726:	4620      	mov	r0, r4
    path[1] = ':';
 8006728:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800672a:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800672c:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800672e:	708b      	strb	r3, [r1, #2]
 8006730:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006732:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8006734:	bd30      	pop	{r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	20000118 	.word	0x20000118

0800673c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800673c:	2200      	movs	r2, #0
 800673e:	f7ff bfdb 	b.w	80066f8 <FATFS_LinkDriverEx>
	...

08006744 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006744:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	460a      	mov	r2, r1
 800674c:	4601      	mov	r1, r0
 800674e:	4804      	ldr	r0, [pc, #16]	; (8006760 <BSP_SD_ReadBlocks+0x1c>)
 8006750:	f7fc f9c4 	bl	8002adc <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8006754:	3000      	adds	r0, #0
 8006756:	bf18      	it	ne
 8006758:	2001      	movne	r0, #1
 800675a:	b003      	add	sp, #12
 800675c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006760:	20000a24 	.word	0x20000a24

08006764 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006764:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	460a      	mov	r2, r1
 800676c:	4601      	mov	r1, r0
 800676e:	4804      	ldr	r0, [pc, #16]	; (8006780 <BSP_SD_WriteBlocks+0x1c>)
 8006770:	f7fc fa90 	bl	8002c94 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8006774:	3000      	adds	r0, #0
 8006776:	bf18      	it	ne
 8006778:	2001      	movne	r0, #1
 800677a:	b003      	add	sp, #12
 800677c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006780:	20000a24 	.word	0x20000a24

08006784 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006784:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006786:	4803      	ldr	r0, [pc, #12]	; (8006794 <BSP_SD_GetCardState+0x10>)
 8006788:	f7fc fec6 	bl	8003518 <HAL_SD_GetCardState>
}
 800678c:	3804      	subs	r0, #4
 800678e:	bf18      	it	ne
 8006790:	2001      	movne	r0, #1
 8006792:	bd08      	pop	{r3, pc}
 8006794:	20000a24 	.word	0x20000a24

08006798 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006798:	4601      	mov	r1, r0
 800679a:	4801      	ldr	r0, [pc, #4]	; (80067a0 <BSP_SD_GetCardInfo+0x8>)
 800679c:	f7fc be0e 	b.w	80033bc <HAL_SD_GetCardInfo>
 80067a0:	20000a24 	.word	0x20000a24

080067a4 <BSP_SD_WriteCpltCallback>:
 80067a4:	4770      	bx	lr

080067a6 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80067a6:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80067a8:	f7ff fffc 	bl	80067a4 <BSP_SD_WriteCpltCallback>
 80067ac:	bd08      	pop	{r3, pc}

080067ae <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80067ae:	4770      	bx	lr

080067b0 <HAL_SD_RxCpltCallback>:
{
 80067b0:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80067b2:	f7ff fffc 	bl	80067ae <BSP_SD_ReadCpltCallback>
 80067b6:	bd08      	pop	{r3, pc}

080067b8 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80067b8:	2301      	movs	r3, #1
{
 80067ba:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80067bc:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80067c0:	f000 f82e 	bl	8006820 <BSP_PlatformIsDetected>
 80067c4:	b908      	cbnz	r0, 80067ca <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80067c6:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80067ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80067ce:	b003      	add	sp, #12
 80067d0:	f85d fb04 	ldr.w	pc, [sp], #4

080067d4 <BSP_SD_Init>:
{
 80067d4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067d6:	f7ff ffef 	bl	80067b8 <BSP_SD_IsDetected>
 80067da:	2801      	cmp	r0, #1
 80067dc:	d10c      	bne.n	80067f8 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 80067de:	4807      	ldr	r0, [pc, #28]	; (80067fc <BSP_SD_Init+0x28>)
 80067e0:	f7fc feae 	bl	8003540 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80067e4:	b948      	cbnz	r0, 80067fa <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80067e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ea:	4804      	ldr	r0, [pc, #16]	; (80067fc <BSP_SD_Init+0x28>)
 80067ec:	f7fc fdf8 	bl	80033e0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80067f0:	3000      	adds	r0, #0
 80067f2:	bf18      	it	ne
 80067f4:	2001      	movne	r0, #1
 80067f6:	bd08      	pop	{r3, pc}
 80067f8:	2002      	movs	r0, #2
}
 80067fa:	bd08      	pop	{r3, pc}
 80067fc:	20000a24 	.word	0x20000a24

08006800 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006800:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006802:	4903      	ldr	r1, [pc, #12]	; (8006810 <MX_FATFS_Init+0x10>)
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <MX_FATFS_Init+0x14>)
 8006806:	f7ff ff99 	bl	800673c <FATFS_LinkDriver>
 800680a:	4b03      	ldr	r3, [pc, #12]	; (8006818 <MX_FATFS_Init+0x18>)
 800680c:	7018      	strb	r0, [r3, #0]
 800680e:	bd08      	pop	{r3, pc}
 8006810:	20000129 	.word	0x20000129
 8006814:	080072f4 	.word	0x080072f4
 8006818:	20000128 	.word	0x20000128

0800681c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800681c:	2000      	movs	r0, #0
 800681e:	4770      	bx	lr

08006820 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006820:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006822:	2104      	movs	r1, #4
 8006824:	4803      	ldr	r0, [pc, #12]	; (8006834 <BSP_PlatformIsDetected+0x14>)
 8006826:	f7fa fb4b 	bl	8000ec0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 800682a:	fab0 f080 	clz	r0, r0
 800682e:	0940      	lsrs	r0, r0, #5
 8006830:	bd08      	pop	{r3, pc}
 8006832:	bf00      	nop
 8006834:	58021800 	.word	0x58021800

08006838 <send_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void send_uart (char *string)
{
 8006838:	b510      	push	{r4, lr}
 800683a:	4604      	mov	r4, r0
	uint8_t len = strlen ((const char *) string);
 800683c:	f7f9 fd4c 	bl	80002d8 <strlen>
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, 2000);
 8006840:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006844:	b2c2      	uxtb	r2, r0
 8006846:	4621      	mov	r1, r4
 8006848:	4802      	ldr	r0, [pc, #8]	; (8006854 <send_uart+0x1c>)
}
 800684a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, 2000);
 800684e:	f7fe b8d0 	b.w	80049f2 <HAL_UART_Transmit>
 8006852:	bf00      	nop
 8006854:	20000590 	.word	0x20000590

08006858 <file_open>:
FATFS SDFatFs;
FIL FileSDCard;

char line[100];

uint8_t file_open(void) {
 8006858:	b538      	push	{r3, r4, r5, lr}
	  res = BSP_SD_Init();
 800685a:	4c1c      	ldr	r4, [pc, #112]	; (80068cc <file_open+0x74>)
 800685c:	f7ff ffba 	bl	80067d4 <BSP_SD_Init>
 8006860:	7020      	strb	r0, [r4, #0]
	  if(res != FR_OK) {
 8006862:	b120      	cbz	r0, 800686e <file_open+0x16>
		  send_uart("SD card initialization error.\n");
 8006864:	481a      	ldr	r0, [pc, #104]	; (80068d0 <file_open+0x78>)
 8006866:	f7ff ffe7 	bl	8006838 <send_uart>
		  return 1;
 800686a:	2001      	movs	r0, #1
 800686c:	bd38      	pop	{r3, r4, r5, pc}
	  }
	  else {
		  send_uart("SD card initialized.\n");
 800686e:	4819      	ldr	r0, [pc, #100]	; (80068d4 <file_open+0x7c>)
 8006870:	f7ff ffe2 	bl	8006838 <send_uart>
	  }

	  res = f_mount(&SDFatFs, "", 1);
 8006874:	2201      	movs	r2, #1
 8006876:	4918      	ldr	r1, [pc, #96]	; (80068d8 <file_open+0x80>)
 8006878:	4818      	ldr	r0, [pc, #96]	; (80068dc <file_open+0x84>)
 800687a:	f7ff fd25 	bl	80062c8 <f_mount>
 800687e:	7020      	strb	r0, [r4, #0]
	  if(res != FR_OK) {
 8006880:	b120      	cbz	r0, 800688c <file_open+0x34>
		  send_uart("FatFS mount error.\n");
 8006882:	4817      	ldr	r0, [pc, #92]	; (80068e0 <file_open+0x88>)
 8006884:	f7ff ffd8 	bl	8006838 <send_uart>
	  	  return 2;
 8006888:	2002      	movs	r0, #2
 800688a:	bd38      	pop	{r3, r4, r5, pc}
	  }
	  else {
		  send_uart("FatFS mounted.\n");
 800688c:	4815      	ldr	r0, [pc, #84]	; (80068e4 <file_open+0x8c>)
 800688e:	f7ff ffd3 	bl	8006838 <send_uart>
	  }


	  res = f_open(&FileSDCard, "message.txt", FA_READ);
 8006892:	2201      	movs	r2, #1
 8006894:	4914      	ldr	r1, [pc, #80]	; (80068e8 <file_open+0x90>)
 8006896:	4815      	ldr	r0, [pc, #84]	; (80068ec <file_open+0x94>)
 8006898:	f7ff fd4a 	bl	8006330 <f_open>
 800689c:	7020      	strb	r0, [r4, #0]
	  if(res != FR_OK) {
 800689e:	b120      	cbz	r0, 80068aa <file_open+0x52>
		  send_uart("No message.txt file.\n");
 80068a0:	4813      	ldr	r0, [pc, #76]	; (80068f0 <file_open+0x98>)
 80068a2:	f7ff ffc9 	bl	8006838 <send_uart>
		  return 3;
 80068a6:	2003      	movs	r0, #3
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
	  }
	  else {
		  send_uart("File opened.\n");
		  while (f_gets(line, sizeof line, &FileSDCard)) {
 80068aa:	4d12      	ldr	r5, [pc, #72]	; (80068f4 <file_open+0x9c>)
 80068ac:	4c0f      	ldr	r4, [pc, #60]	; (80068ec <file_open+0x94>)
		  send_uart("File opened.\n");
 80068ae:	4812      	ldr	r0, [pc, #72]	; (80068f8 <file_open+0xa0>)
 80068b0:	f7ff ffc2 	bl	8006838 <send_uart>
		  while (f_gets(line, sizeof line, &FileSDCard)) {
 80068b4:	4622      	mov	r2, r4
 80068b6:	2164      	movs	r1, #100	; 0x64
 80068b8:	480e      	ldr	r0, [pc, #56]	; (80068f4 <file_open+0x9c>)
 80068ba:	f7ff fef7 	bl	80066ac <f_gets>
 80068be:	b900      	cbnz	r0, 80068c2 <file_open+0x6a>
			  send_uart(line);
		  }
	  }
	  return 0;
}
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
			  send_uart(line);
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7ff ffb8 	bl	8006838 <send_uart>
 80068c8:	e7f4      	b.n	80068b4 <file_open+0x5c>
 80068ca:	bf00      	nop
 80068cc:	20000d38 	.word	0x20000d38
 80068d0:	08007268 	.word	0x08007268
 80068d4:	08007287 	.word	0x08007287
 80068d8:	080072f0 	.word	0x080072f0
 80068dc:	20000b08 	.word	0x20000b08
 80068e0:	0800729d 	.word	0x0800729d
 80068e4:	080072b1 	.word	0x080072b1
 80068e8:	080072c1 	.word	0x080072c1
 80068ec:	20000d3c 	.word	0x20000d3c
 80068f0:	080072cd 	.word	0x080072cd
 80068f4:	20000aa4 	.word	0x20000aa4
 80068f8:	080072e3 	.word	0x080072e3

080068fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006900:	224c      	movs	r2, #76	; 0x4c
 8006902:	2100      	movs	r1, #0
 8006904:	a80a      	add	r0, sp, #40	; 0x28
 8006906:	f000 fc39 	bl	800717c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800690a:	2220      	movs	r2, #32
 800690c:	2100      	movs	r1, #0
 800690e:	a802      	add	r0, sp, #8
 8006910:	f000 fc34 	bl	800717c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006914:	22bc      	movs	r2, #188	; 0xbc
 8006916:	2100      	movs	r1, #0
 8006918:	a81d      	add	r0, sp, #116	; 0x74
 800691a:	f000 fc2f 	bl	800717c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800691e:	2002      	movs	r0, #2
 8006920:	f7fa fb7e 	bl	8001020 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006924:	2300      	movs	r3, #0
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <SystemClock_Config+0xc8>)
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	62da      	str	r2, [r3, #44]	; 0x2c
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <SystemClock_Config+0xcc>)
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006946:	619a      	str	r2, [r3, #24]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800694e:	9201      	str	r2, [sp, #4]
 8006950:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	0492      	lsls	r2, r2, #18
 8006956:	d5fc      	bpl.n	8006952 <SystemClock_Config+0x56>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006958:	2303      	movs	r3, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800695a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLN = 24;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800695c:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800695e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006960:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006962:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006966:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006968:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800696a:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800696c:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800696e:	2218      	movs	r2, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006970:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006972:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006974:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006976:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006978:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800697a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800697c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800697e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006980:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006982:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006984:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006986:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006988:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800698a:	f7fa fb75 	bl	8001078 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800698e:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006990:	4621      	mov	r1, r4
 8006992:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006994:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006996:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006998:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800699a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800699c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800699e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80069a0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80069a2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80069a4:	f7fa fe8c 	bl	80016c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <SystemClock_Config+0xd0>)
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069aa:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80069ac:	9430      	str	r4, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC
 80069ae:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80069b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80069b4:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80069b6:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069b8:	f7fb f8e0 	bl	8001b7c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80069bc:	f7fa fb54 	bl	8001068 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80069c0:	b04c      	add	sp, #304	; 0x130
 80069c2:	bd10      	pop	{r4, pc}
 80069c4:	58000400 	.word	0x58000400
 80069c8:	58024800 	.word	0x58024800
 80069cc:	00050002 	.word	0x00050002

080069d0 <main>:
{
 80069d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d2:	b08d      	sub	sp, #52	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069d4:	2400      	movs	r4, #0
  HAL_Init();
 80069d6:	f7f9 fe35 	bl	8000644 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069da:	2601      	movs	r6, #1
  SystemClock_Config();
 80069dc:	f7ff ff8e 	bl	80068fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e0:	2214      	movs	r2, #20
 80069e2:	2100      	movs	r1, #0
 80069e4:	a807      	add	r0, sp, #28
 80069e6:	f000 fbc9 	bl	800717c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ea:	4b8f      	ldr	r3, [pc, #572]	; (8006c28 <main+0x258>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80069ec:	f244 0101 	movw	r1, #16385	; 0x4001
 80069f0:	488e      	ldr	r0, [pc, #568]	; (8006c2c <main+0x25c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80069f6:	2580      	movs	r5, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80069f8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069fa:	f042 0204 	orr.w	r2, r2, #4
 80069fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a06:	f002 0204 	and.w	r2, r2, #4
 8006a0a:	9200      	str	r2, [sp, #0]
 8006a0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a1e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006a22:	9201      	str	r2, [sp, #4]
 8006a24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a36:	f002 0201 	and.w	r2, r2, #1
 8006a3a:	9202      	str	r2, [sp, #8]
 8006a3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a42:	f042 0202 	orr.w	r2, r2, #2
 8006a46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a4e:	f002 0202 	and.w	r2, r2, #2
 8006a52:	9203      	str	r2, [sp, #12]
 8006a54:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a66:	f002 0208 	and.w	r2, r2, #8
 8006a6a:	9204      	str	r2, [sp, #16]
 8006a6c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006a82:	9205      	str	r2, [sp, #20]
 8006a84:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a8a:	f042 0210 	orr.w	r2, r2, #16
 8006a8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8006a92:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	9306      	str	r3, [sp, #24]
 8006a9e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8006aa0:	f7fa fa14 	bl	8000ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006aaa:	4861      	ldr	r0, [pc, #388]	; (8006c30 <main+0x260>)
 8006aac:	f7fa fa0e 	bl	8000ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	485f      	ldr	r0, [pc, #380]	; (8006c34 <main+0x264>)
 8006ab6:	f7fa fa09 	bl	8000ecc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8006aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006abe:	a907      	add	r1, sp, #28
 8006ac0:	485d      	ldr	r0, [pc, #372]	; (8006c38 <main+0x268>)
  GPIO_InitStruct.Pin = B1_Pin;
 8006ac2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ac4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006ac8:	f7fa f90c 	bl	8000ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8006acc:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ad0:	a907      	add	r1, sp, #28
 8006ad2:	4856      	ldr	r0, [pc, #344]	; (8006c2c <main+0x25c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8006ad4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ad6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ada:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006adc:	f7fa f902 	bl	8000ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006ae4:	a907      	add	r1, sp, #28
 8006ae6:	4852      	ldr	r0, [pc, #328]	; (8006c30 <main+0x260>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006ae8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aea:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006af0:	f7fa f8f8 	bl	8000ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006af4:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006af6:	a907      	add	r1, sp, #28
 8006af8:	4850      	ldr	r0, [pc, #320]	; (8006c3c <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006afa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006afc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afe:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b00:	f7fa f8f0 	bl	8000ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b04:	4b4e      	ldr	r3, [pc, #312]	; (8006c40 <main+0x270>)
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006b06:	a907      	add	r1, sp, #28
 8006b08:	484c      	ldr	r0, [pc, #304]	; (8006c3c <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b0a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8006b0c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006b10:	f7fa f8e8 	bl	8000ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006b14:	a907      	add	r1, sp, #28
 8006b16:	4847      	ldr	r0, [pc, #284]	; (8006c34 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b18:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = LD2_Pin;
 8006b1a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b1e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006b20:	f7fa f8e0 	bl	8000ce4 <HAL_GPIO_Init>
  heth.Instance = ETH;
 8006b24:	4847      	ldr	r0, [pc, #284]	; (8006c44 <main+0x274>)
  heth.Init.MACAddr[2] =   0xE1;
 8006b26:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 8006b28:	4b47      	ldr	r3, [pc, #284]	; (8006c48 <main+0x278>)
 8006b2a:	6003      	str	r3, [r0, #0]
  heth.Init.MACAddr[0] =   0x00;
 8006b2c:	6843      	ldr	r3, [r0, #4]
 8006b2e:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8006b30:	6843      	ldr	r3, [r0, #4]
 8006b32:	705d      	strb	r5, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 8006b34:	6843      	ldr	r3, [r0, #4]
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006b36:	4d45      	ldr	r5, [pc, #276]	; (8006c4c <main+0x27c>)
  heth.Init.MACAddr[2] =   0xE1;
 8006b38:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 8006b3a:	6843      	ldr	r3, [r0, #4]
 8006b3c:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 8006b3e:	6843      	ldr	r3, [r0, #4]
 8006b40:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 8006b42:	6843      	ldr	r3, [r0, #4]
 8006b44:	715c      	strb	r4, [r3, #5]
  heth.Init.TxDesc = DMATxDscrTab;
 8006b46:	4b42      	ldr	r3, [pc, #264]	; (8006c50 <main+0x280>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006b48:	7206      	strb	r6, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006b4a:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006b4c:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <main+0x284>)
 8006b4e:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8006b50:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006b54:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006b56:	f7f9 ffa7 	bl	8000aa8 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006b5a:	2234      	movs	r2, #52	; 0x34
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fb0c 	bl	800717c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006b64:	2321      	movs	r3, #33	; 0x21
  hsd1.Instance = SDMMC1;
 8006b66:	4a3c      	ldr	r2, [pc, #240]	; (8006c58 <main+0x288>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006b68:	602b      	str	r3, [r5, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006b6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  huart3.Init.BaudRate = 115200;
 8006b6e:	493b      	ldr	r1, [pc, #236]	; (8006c5c <main+0x28c>)
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006b70:	616b      	str	r3, [r5, #20]
  hsd1.Instance = SDMMC1;
 8006b72:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <main+0x290>)
  huart3.Instance = USART3;
 8006b74:	4d3b      	ldr	r5, [pc, #236]	; (8006c64 <main+0x294>)
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8006b76:	619e      	str	r6, [r3, #24]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006b78:	609c      	str	r4, [r3, #8]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006b7a:	4628      	mov	r0, r5
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b7c:	611c      	str	r4, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8006b7e:	615c      	str	r4, [r3, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b80:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b82:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b84:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b86:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b88:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b8a:	622c      	str	r4, [r5, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b8c:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b8e:	62ac      	str	r4, [r5, #40]	; 0x28
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006b90:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b98:	60da      	str	r2, [r3, #12]
  huart3.Init.BaudRate = 115200;
 8006b9a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006b9e:	e885 000a 	stmia.w	r5, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006ba6:	f7fd ffb2 	bl	8004b0e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f7fe f844 	bl	8004c3a <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7fe f864 	bl	8004c82 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f7fe f822 	bl	8004c04 <HAL_UARTEx_DisableFifoMode>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006bc0:	2509      	movs	r5, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006bc2:	4829      	ldr	r0, [pc, #164]	; (8006c68 <main+0x298>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006bc4:	4b29      	ldr	r3, [pc, #164]	; (8006c6c <main+0x29c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006bc6:	61c6      	str	r6, [r0, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8006bc8:	6286      	str	r6, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006bca:	62c6      	str	r6, [r0, #44]	; 0x2c
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006bcc:	4e19      	ldr	r6, [pc, #100]	; (8006c34 <main+0x264>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bce:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bd0:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bd2:	6187      	str	r7, [r0, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006bd4:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bd6:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bd8:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006bda:	e880 0028 	stmia.w	r0, {r3, r5}
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8006bde:	4d13      	ldr	r5, [pc, #76]	; (8006c2c <main+0x25c>)
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006be0:	f7fa f980 	bl	8000ee4 <HAL_PCD_Init>
  MX_FATFS_Init();
 8006be4:	f7ff fe0c 	bl	8006800 <MX_FATFS_Init>
  file_open();
 8006be8:	f7ff fe36 	bl	8006858 <file_open>
	  if(ld_cnt % 2 == 0){
 8006bec:	07e2      	lsls	r2, r4, #31
 8006bee:	d403      	bmi.n	8006bf8 <main+0x228>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7fa f96f 	bl	8000ed6 <HAL_GPIO_TogglePin>
	  if(ld_cnt % 3 == 0){
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	fb94 f3f3 	sdiv	r3, r4, r3
 8006bfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d103      	bne.n	8006c0e <main+0x23e>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006c06:	2102      	movs	r1, #2
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7fa f964 	bl	8000ed6 <HAL_GPIO_TogglePin>
	  if(ld_cnt % 4 == 0){
 8006c0e:	07a3      	lsls	r3, r4, #30
 8006c10:	d104      	bne.n	8006c1c <main+0x24c>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7fa f95d 	bl	8000ed6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8006c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  ld_cnt++;
 8006c20:	3401      	adds	r4, #1
	  HAL_Delay(1000);
 8006c22:	f7f9 fd4f 	bl	80006c4 <HAL_Delay>
	  if(ld_cnt % 2 == 0){
 8006c26:	e7e1      	b.n	8006bec <main+0x21c>
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	58020400 	.word	0x58020400
 8006c30:	58020c00 	.word	0x58020c00
 8006c34:	58021000 	.word	0x58021000
 8006c38:	58020800 	.word	0x58020800
 8006c3c:	58021800 	.word	0x58021800
 8006c40:	11110000 	.word	0x11110000
 8006c44:	20000f6c 	.word	0x20000f6c
 8006c48:	40028000 	.word	0x40028000
 8006c4c:	20000fdc 	.word	0x20000fdc
 8006c50:	20000074 	.word	0x20000074
 8006c54:	20000014 	.word	0x20000014
 8006c58:	52007000 	.word	0x52007000
 8006c5c:	40004800 	.word	0x40004800
 8006c60:	20000a24 	.word	0x20000a24
 8006c64:	20000590 	.word	0x20000590
 8006c68:	2000061c 	.word	0x2000061c
 8006c6c:	40080000 	.word	0x40080000

08006c70 <SD_CheckStatus.isra.0>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
 8006c70:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8006c72:	2301      	movs	r3, #1
 8006c74:	4c05      	ldr	r4, [pc, #20]	; (8006c8c <SD_CheckStatus.isra.0+0x1c>)
 8006c76:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006c78:	f7ff fd84 	bl	8006784 <BSP_SD_GetCardState>
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	b918      	cbnz	r0, 8006c88 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006c80:	7822      	ldrb	r2, [r4, #0]
 8006c82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c86:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8006c88:	7818      	ldrb	r0, [r3, #0]
}
 8006c8a:	bd10      	pop	{r4, pc}
 8006c8c:	20000008 	.word	0x20000008

08006c90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006c90:	b510      	push	{r4, lr}
Stat = STA_NOINIT;  
 8006c92:	2301      	movs	r3, #1
 8006c94:	4c04      	ldr	r4, [pc, #16]	; (8006ca8 <SD_initialize+0x18>)
 8006c96:	7023      	strb	r3, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006c98:	f7ff fd9c 	bl	80067d4 <BSP_SD_Init>
 8006c9c:	b910      	cbnz	r0, 8006ca4 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8006c9e:	f7ff ffe7 	bl	8006c70 <SD_CheckStatus.isra.0>
 8006ca2:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006ca4:	7820      	ldrb	r0, [r4, #0]
}
 8006ca6:	bd10      	pop	{r4, pc}
 8006ca8:	20000008 	.word	0x20000008

08006cac <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8006cac:	f7ff bfe0 	b.w	8006c70 <SD_CheckStatus.isra.0>

08006cb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006cb0:	b508      	push	{r3, lr}
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbc:	f7ff fd42 	bl	8006744 <BSP_SD_ReadBlocks>
 8006cc0:	b920      	cbnz	r0, 8006ccc <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006cc2:	f7ff fd5f 	bl	8006784 <BSP_SD_GetCardState>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d1fb      	bne.n	8006cc2 <SD_read+0x12>
 8006cca:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006ccc:	2001      	movs	r0, #1
}
 8006cce:	bd08      	pop	{r3, pc}

08006cd0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <SD_ioctl+0x4c>)
{
 8006cd2:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cd4:	781b      	ldrb	r3, [r3, #0]
{
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cda:	07db      	lsls	r3, r3, #31
 8006cdc:	d41b      	bmi.n	8006d16 <SD_ioctl+0x46>

  switch (cmd)
 8006cde:	2903      	cmp	r1, #3
 8006ce0:	d803      	bhi.n	8006cea <SD_ioctl+0x1a>
 8006ce2:	e8df f001 	tbb	[pc, r1]
 8006ce6:	0510      	.short	0x0510
 8006ce8:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8006cea:	2004      	movs	r0, #4
  }

  return res;
}
 8006cec:	b00a      	add	sp, #40	; 0x28
 8006cee:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006cf0:	a801      	add	r0, sp, #4
 8006cf2:	f7ff fd51 	bl	8006798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006cf6:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	e004      	b.n	8006d06 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8006cfc:	a801      	add	r0, sp, #4
 8006cfe:	f7ff fd4b 	bl	8006798 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8006d06:	2000      	movs	r0, #0
 8006d08:	e7f0      	b.n	8006cec <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8006d0a:	a801      	add	r0, sp, #4
 8006d0c:	f7ff fd44 	bl	8006798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006d10:	9b08      	ldr	r3, [sp, #32]
 8006d12:	0a5b      	lsrs	r3, r3, #9
 8006d14:	e7f0      	b.n	8006cf8 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d16:	2003      	movs	r0, #3
 8006d18:	e7e8      	b.n	8006cec <SD_ioctl+0x1c>
 8006d1a:	bf00      	nop
 8006d1c:	20000008 	.word	0x20000008

08006d20 <SD_write>:
{
 8006d20:	b508      	push	{r3, lr}
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	f7ff fd1a 	bl	8006764 <BSP_SD_WriteBlocks>
 8006d30:	b920      	cbnz	r0, 8006d3c <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8006d32:	f7ff fd27 	bl	8006784 <BSP_SD_GetCardState>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d1fb      	bne.n	8006d32 <SD_write+0x12>
 8006d3a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006d3c:	2001      	movs	r0, #1
}
 8006d3e:	bd08      	pop	{r3, pc}

08006d40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <HAL_MspInit+0x20>)
{
 8006d42:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d44:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006d48:	f042 0202 	orr.w	r2, r2, #2
 8006d4c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d5c:	b002      	add	sp, #8
 8006d5e:	4770      	bx	lr
 8006d60:	58024400 	.word	0x58024400

08006d64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	b08c      	sub	sp, #48	; 0x30
 8006d68:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d6a:	2214      	movs	r2, #20
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	a807      	add	r0, sp, #28
 8006d70:	f000 fa04 	bl	800717c <memset>
  if(heth->Instance==ETH)
 8006d74:	6822      	ldr	r2, [r4, #0]
 8006d76:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <HAL_ETH_MspInit+0x11c>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d17f      	bne.n	8006e7c <HAL_ETH_MspInit+0x118>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <HAL_ETH_MspInit+0x120>)
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d80:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d82:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006d84:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d88:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d8a:	483f      	ldr	r0, [pc, #252]	; (8006e88 <HAL_ETH_MspInit+0x124>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d90:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006d94:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006d98:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006d9c:	9200      	str	r2, [sp, #0]
 8006d9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006da0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006da4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006da8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006dac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006db0:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8006db4:	9201      	str	r2, [sp, #4]
 8006db6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006db8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006dbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006dc0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006dc4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006dc8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006dcc:	9202      	str	r2, [sp, #8]
 8006dce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006dd4:	f042 0204 	orr.w	r2, r2, #4
 8006dd8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006ddc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006de0:	f002 0204 	and.w	r2, r2, #4
 8006de4:	9203      	str	r2, [sp, #12]
 8006de6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006df4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006df8:	f002 0201 	and.w	r2, r2, #1
 8006dfc:	9204      	str	r2, [sp, #16]
 8006dfe:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006e04:	f042 0202 	orr.w	r2, r2, #2
 8006e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006e0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006e10:	f002 0202 	and.w	r2, r2, #2
 8006e14:	9205      	str	r2, [sp, #20]
 8006e16:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e28:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e2e:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e30:	9306      	str	r3, [sp, #24]
 8006e32:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006e34:	2332      	movs	r3, #50	; 0x32
 8006e36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e38:	f7f9 ff54 	bl	8000ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006e3c:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e3e:	a907      	add	r1, sp, #28
 8006e40:	4812      	ldr	r0, [pc, #72]	; (8006e8c <HAL_ETH_MspInit+0x128>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006e42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e48:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e4a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4c:	f7f9 ff4a 	bl	8000ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e54:	a907      	add	r1, sp, #28
 8006e56:	480e      	ldr	r0, [pc, #56]	; (8006e90 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e5e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e60:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e62:	f7f9 ff3f 	bl	8000ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006e66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e6a:	a907      	add	r1, sp, #28
 8006e6c:	4809      	ldr	r0, [pc, #36]	; (8006e94 <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006e6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e70:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e72:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e74:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e76:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e78:	f7f9 ff34 	bl	8000ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006e7c:	b00c      	add	sp, #48	; 0x30
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	40028000 	.word	0x40028000
 8006e84:	58024400 	.word	0x58024400
 8006e88:	58020800 	.word	0x58020800
 8006e8c:	58020000 	.word	0x58020000
 8006e90:	58020400 	.word	0x58020400
 8006e94:	58021800 	.word	0x58021800

08006e98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9e:	2214      	movs	r2, #20
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	a803      	add	r0, sp, #12
 8006ea4:	f000 f96a 	bl	800717c <memset>
  if(hsd->Instance==SDMMC1)
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	4b26      	ldr	r3, [pc, #152]	; (8006f44 <HAL_SD_MspInit+0xac>)
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d146      	bne.n	8006f3e <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006eb2:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb4:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb6:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006eb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ebc:	eb0d 0105 	add.w	r1, sp, r5
 8006ec0:	4822      	ldr	r0, [pc, #136]	; (8006f4c <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ec6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006eca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006ece:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8006ed2:	9200      	str	r2, [sp, #0]
 8006ed4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006eda:	f042 0204 	orr.w	r2, r2, #4
 8006ede:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006ee6:	f002 0204 	and.w	r2, r2, #4
 8006eea:	9201      	str	r2, [sp, #4]
 8006eec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006eee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efe:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f00:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f04:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006f06:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8006f0c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006f10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f12:	f7f9 fee7 	bl	8000ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f16:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f18:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f1c:	eb0d 0105 	add.w	r1, sp, r5
 8006f20:	480b      	ldr	r0, [pc, #44]	; (8006f50 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f26:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006f28:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f2a:	f7f9 fedb 	bl	8000ce4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8006f2e:	2031      	movs	r0, #49	; 0x31
 8006f30:	4622      	mov	r2, r4
 8006f32:	4621      	mov	r1, r4
 8006f34:	f7f9 fbfa 	bl	800072c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006f38:	2031      	movs	r0, #49	; 0x31
 8006f3a:	f7f9 fc2f 	bl	800079c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8006f3e:	b008      	add	sp, #32
 8006f40:	bd70      	pop	{r4, r5, r6, pc}
 8006f42:	bf00      	nop
 8006f44:	52007000 	.word	0x52007000
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	58020800 	.word	0x58020800
 8006f50:	58020c00 	.word	0x58020c00

08006f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f54:	b510      	push	{r4, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5a:	2214      	movs	r2, #20
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	a803      	add	r0, sp, #12
 8006f60:	f000 f90c 	bl	800717c <memset>
  if(huart->Instance==USART3)
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <HAL_UART_MspInit+0x64>)
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d123      	bne.n	8006fb4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f6c:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f6e:	a903      	add	r1, sp, #12
 8006f70:	4813      	ldr	r0, [pc, #76]	; (8006fc0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006f76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f7a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006f7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006f82:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006f86:	9201      	str	r2, [sp, #4]
 8006f88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006f8e:	f042 0208 	orr.w	r2, r2, #8
 8006f92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	9302      	str	r3, [sp, #8]
 8006fa0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006fa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006fac:	2307      	movs	r3, #7
 8006fae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fb0:	f7f9 fe98 	bl	8000ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006fb4:	b008      	add	sp, #32
 8006fb6:	bd10      	pop	{r4, pc}
 8006fb8:	40004800 	.word	0x40004800
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	58020c00 	.word	0x58020c00

08006fc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fca:	2214      	movs	r2, #20
 8006fcc:	2100      	movs	r1, #0
 8006fce:	a803      	add	r0, sp, #12
 8006fd0:	f000 f8d4 	bl	800717c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	4b19      	ldr	r3, [pc, #100]	; (800703c <HAL_PCD_MspInit+0x78>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d12d      	bne.n	8007038 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fdc:	4c18      	ldr	r4, [pc, #96]	; (8007040 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fde:	a903      	add	r1, sp, #12
 8006fe0:	4818      	ldr	r0, [pc, #96]	; (8007044 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006fee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006ffa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006ffe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007000:	2302      	movs	r3, #2
 8007002:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007004:	230a      	movs	r3, #10
 8007006:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007008:	f7f9 fe6c 	bl	8000ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800700c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007010:	a903      	add	r1, sp, #12
 8007012:	480c      	ldr	r0, [pc, #48]	; (8007044 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007014:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007016:	2300      	movs	r3, #0
 8007018:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800701c:	f7f9 fe62 	bl	8000ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007020:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8007024:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007028:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800702c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8007030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007038:	b008      	add	sp, #32
 800703a:	bd10      	pop	{r4, pc}
 800703c:	40080000 	.word	0x40080000
 8007040:	58024400 	.word	0x58024400
 8007044:	58020000 	.word	0x58020000

08007048 <NMI_Handler>:
 8007048:	4770      	bx	lr

0800704a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800704a:	e7fe      	b.n	800704a <HardFault_Handler>

0800704c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800704c:	e7fe      	b.n	800704c <MemManage_Handler>

0800704e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800704e:	e7fe      	b.n	800704e <BusFault_Handler>

08007050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007050:	e7fe      	b.n	8007050 <UsageFault_Handler>

08007052 <SVC_Handler>:
 8007052:	4770      	bx	lr

08007054 <DebugMon_Handler>:
 8007054:	4770      	bx	lr

08007056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007056:	4770      	bx	lr

08007058 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007058:	f7f9 bb22 	b.w	80006a0 <HAL_IncTick>

0800705c <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <SDMMC1_IRQHandler+0x8>)
 800705e:	f7fc bacd 	b.w	80035fc <HAL_SD_IRQHandler>
 8007062:	bf00      	nop
 8007064:	20000a24 	.word	0x20000a24

08007068 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007068:	4918      	ldr	r1, [pc, #96]	; (80070cc <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800706a:	4819      	ldr	r0, [pc, #100]	; (80070d0 <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800706c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8007074:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800707a:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <SystemInit+0x6c>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	4020      	ands	r0, r4
 800708c:	6018      	str	r0, [r3, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800708e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007090:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007092:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800709a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800709c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80070a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80070aa:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <SystemInit+0x70>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ba:	d202      	bcs.n	80070c2 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80070bc:	2201      	movs	r2, #1
 80070be:	4b07      	ldr	r3, [pc, #28]	; (80070dc <SystemInit+0x74>)
 80070c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070c6:	608b      	str	r3, [r1, #8]
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	bf00      	nop
 80070cc:	e000ed00 	.word	0xe000ed00
 80070d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80070d4:	58024400 	.word	0x58024400
 80070d8:	5c001000 	.word	0x5c001000
 80070dc:	51008108 	.word	0x51008108

080070e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80070e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80070e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070e6:	e003      	b.n	80070f0 <LoopCopyDataInit>

080070e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070e8:	4b0c      	ldr	r3, [pc, #48]	; (800711c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80070ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070ee:	3104      	adds	r1, #4

080070f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80070f0:	480b      	ldr	r0, [pc, #44]	; (8007120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80070f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070f8:	d3f6      	bcc.n	80070e8 <CopyDataInit>
  ldr  r2, =_sbss
 80070fa:	4a0b      	ldr	r2, [pc, #44]	; (8007128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80070fc:	e002      	b.n	8007104 <LoopFillZerobss>

080070fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80070fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007100:	f842 3b04 	str.w	r3, [r2], #4

08007104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007104:	4b09      	ldr	r3, [pc, #36]	; (800712c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007108:	d3f9      	bcc.n	80070fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800710a:	f7ff ffad 	bl	8007068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800710e:	f000 f811 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007112:	f7ff fc5d 	bl	80069d0 <main>
  bx  lr    
 8007116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007118:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800711c:	08007328 	.word	0x08007328
  ldr  r0, =_sdata
 8007120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007124:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8007128:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 800712c:	20001010 	.word	0x20001010

08007130 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007130:	e7fe      	b.n	8007130 <ADC3_IRQHandler>
	...

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4e0d      	ldr	r6, [pc, #52]	; (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713a:	1ba4      	subs	r4, r4, r6
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2500      	movs	r5, #0
 8007140:	42a5      	cmp	r5, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4e0b      	ldr	r6, [pc, #44]	; (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	; (8007178 <__libc_init_array+0x44>)
 8007148:	f000 f820 	bl	800718c <_init>
 800714c:	1ba4      	subs	r4, r4, r6
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2500      	movs	r5, #0
 8007152:	42a5      	cmp	r5, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800715c:	4798      	blx	r3
 800715e:	3501      	adds	r5, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007166:	4798      	blx	r3
 8007168:	3501      	adds	r5, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	08007320 	.word	0x08007320
 8007170:	08007320 	.word	0x08007320
 8007174:	08007320 	.word	0x08007320
 8007178:	08007324 	.word	0x08007324

0800717c <memset>:
 800717c:	4402      	add	r2, r0
 800717e:	4603      	mov	r3, r0
 8007180:	4293      	cmp	r3, r2
 8007182:	d100      	bne.n	8007186 <memset+0xa>
 8007184:	4770      	bx	lr
 8007186:	f803 1b01 	strb.w	r1, [r3], #1
 800718a:	e7f9      	b.n	8007180 <memset+0x4>

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
